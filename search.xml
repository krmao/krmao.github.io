<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>移动端_IOS【Android基础入门〖6〗】四大组件之ContentProvider</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A86_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BContentProvider/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A86_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BContentProvider/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>简介</h1><div>简而言之，ContentProvider 向别的应用程序提供数据(联系人这个应用程序提供了 它的 ContentProvider)，ContentResolver 从<strong>别的应用程序</strong>(已提供ContentProvider)获取、修改、添加数据(我们可以通过ContentResolver 来操纵联系人中的数据)。</div><div> </div><h1>说明</h1><div>既然是四大组件之一，那么创建步骤基本相同</div><div>1: 自定义 ContentProvider</div><div>2: 注册</div><div>3: 使用</div><div> </div><h1>1    自定义ContentProvider</h1><p> MyProvider.java</p><h6></h6><pre><code class="language-java"><span style="font-weight:normal;">package com.myprovider;import android.content.ContentProvider;import android.content.ContentUris;import android.content.ContentValues;import android.content.UriMatcher;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.net.Uri;public class MyProvider extends ContentProvider{    DatabaseHelper dbhelper;    SQLiteDatabase db;        UriMatcher UMatcher=new UriMatcher(UriMatcher.NO_MATCH);        @Override    public boolean onCreate() {        // TODO 自动生成的方法存根        dbhelper=new DatabaseHelper(getContext(), "michael", null, 1);                UMatcher.addURI("com.michael", "michael", 1);        UMatcher.addURI("com.michael", "michael/#", 2);        db=dbhelper.getWritableDatabase();        return true;    }    @Override    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {        // TODO 自动生成的方法存根        Cursor cursor;                switch(UMatcher.match(uri))        {        case 1:            cursor= db.query("michael", projection, selection, selectionArgs, null, null, sortOrder);            break;        case 2:            long id=ContentUris.parseId(uri);            String myselection="_id="+id;                        if(selection!=null)                myselection +=selection;                            cursor =db.query("michael", projection, myselection, selectionArgs, null, null, sortOrder);            break;        default:            //非法的参数异常            throw new IllegalArgumentException("unknow uri" + uri.toString());        }        return cursor;    }    @Override    public String getType(Uri uri) {        // TODO 自动生成的方法存根        return null;    }    @Override    public Uri insert(Uri uri, ContentValues values) {        // TODO 自动生成的方法存根        long id =db.insert("michael", "username", values);        return ContentUris.withAppendedId(uri, id);    }    @Override    public int delete(Uri uri, String selection, String[] selectionArgs) {        // TODO 自动生成的方法存根        int num;        switch(UMatcher.match(uri))        {        case 1:            num=db.delete("michael", selection, selectionArgs);            break;        case 2:            long id=ContentUris.parseId(uri);            String myselection="_id="+id;                        if(selection!=null)                myselection +=selection;                        num= db.delete("michael", myselection, selectionArgs);            break;        default:            //非法的参数异常            throw new IllegalArgumentException("unknow uri" + uri.toString());        }        return num;    }    @Override    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {        // TODO 自动生成的方法存根        int num;                switch(UMatcher.match(uri))        {        case 1:            num=db.update("michael", values, selection, selectionArgs);            break;        case 2:            long id=ContentUris.parseId(uri);            String myselection="_id="+id;                        if(selection!=null)                myselection +=selection;            num=db.update("michael", values, myselection, selectionArgs);            break;        default:            //非法的参数异常            throw new IllegalArgumentException("unknow uri" + uri.toString());        }        return num;    }}</span></code></pre><h1>2    封装的 SQLiteOpenHelper 用以操作数据库</h1><p>DatabaseHelper.java</p><h6></h6><pre><code class="language-java"><span style="font-weight:normal;">package com.myprovider;import android.content.ContentValues;import android.content.Context;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteDatabase.CursorFactory;import android.database.sqlite.SQLiteOpenHelper;public class DatabaseHelper extends SQLiteOpenHelper {    public DatabaseHelper(Context context, String name, CursorFactory factory, int version) {        super(context, name, factory, version);    }    @Override    public void onCreate(SQLiteDatabase db) {        //创建数据库        db.execSQL("create table michael(_id integer primary key autoincrement ,username text);");                //初始数据        ContentValues values=new ContentValues();        values.put("username", "张三");        db.insert("michael", "username", values);        values.put("username", "李四");        db.insert("michael", "username", values);        values.put("username", "王五");        db.insert("michael", "username", values);        values.put("username", "赵六");        db.insert("michael", "username", values);    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        //升级数据库        db.execSQL("drop table if exists michael;");        this.onCreate(db);    }}</span></code></pre><h1>3    注册</h1><p>AndroidManifest.xml</p><div><pre><code class="language-html">&lt;provider    android:name="com.myprovider.MyProvider"    android:authorities="com.michael"    android:exported="true"/&gt;</code></pre><br></div><h1>4    访问数据    (在别的应用程序中亦同)</h1><div>意思是，你新建一个项目，具备如下代码，仍然能操作访问 上述项目中的数据 。 这就是 ContentProvider 的神奇之处 :)</div><div><br></div><p>4.1 MainActivity.java</p><div><pre><code class="language-java">package com.myprovider;import android.app.Activity;import android.content.ContentResolver;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.widget.ListView;import android.widget.SimpleCursorAdapter;public class MainActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);                ContentResolver resolver=this.getContentResolver();        Uri uri=Uri.parse("content://com.michael/michael");        ContentValues values=new ContentValues();        values.put("username", "霸王龙");        resolver.insert(uri, values);        values.put("username", "巨无霸");        resolver.insert(uri, values);        values.put("username", "擎天柱");        resolver.insert(uri, values);        values.put("username", "大黄蜂");        resolver.insert(uri, values);                Cursor cursor=resolver.query(uri, new String[]{"_id","username"}, null, null, null);        SimpleCursorAdapter adapter=new SimpleCursorAdapter(this, android.R.layout.simple_list_item_2, cursor, new String[]{"_id","username"}, new int[]{android.R.id.text1,android.R.id.text2}, 0);            ListView listview=(ListView)findViewById(R.id.listview);        listview.setAdapter(adapter);    }}</code></pre><br></div><p>4.2 activity_main.xml 布局文件</p><div><pre><code class="language-html">&lt;ListView xmlns:android="http://schemas.android.com/apk/res/android"    android:id="@+id/listview"    android:layout_width="match_parent"    android:layout_height="match_parent"/&gt;</code></pre><br></div><h1>5    效果截图</h1><div><br></div><div> <img src="https://img-blog.csdn.net/20130924220111437" alt=""></div><div> </div><div> </div><div> <span style="font-size:18px;color:#ff0000;"><strong><u>转载请注明出处，毕竟代码是一个一个敲出来的 :)</u></strong></span></div><div> </div><div> </div><div> </div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【MFC基础入门】基于Adaboost算法的车牌检测在OpenCV上的研究与实现</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_MFC%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E5%9F%BA%E4%BA%8EAdaboost%E7%AE%97%E6%B3%95%E7%9A%84%E8%BD%A6%E7%89%8C%E6%A3%80%E6%B5%8B%E5%9C%A8OpenCV%E4%B8%8A%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_MFC%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E5%9F%BA%E4%BA%8EAdaboost%E7%AE%97%E6%B3%95%E7%9A%84%E8%BD%A6%E7%89%8C%E6%A3%80%E6%B5%8B%E5%9C%A8OpenCV%E4%B8%8A%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1><span style="font-size:24px;"><strong>目录结构</strong></span></h1><pre><code class="language-plain">E:\Adaboost\   ---------positive\               //正样本文件夹---------pimages\       //正样本图片所在文件夹---------pos.dat        //正样本集描述文件---------pos.vec        //正样本特征集描述文件   ---------nagative\               //负样本文件夹   ---------pimages\       //负样本图片所在文件夹   ---------nag.dat        //正样本集描述文件</code></pre><h2><span style="font-size:18px;"><strong>正样本</strong></span></h2><h2><strong>1  <span>收集样本</span></strong></h2><p></p><p><span></span>找617张带有车牌的图片，一开始设置大小 200*200 左右，报内存错误。<br><span></span>后来重做，即将617张图片中的车牌用画图软件截取下来，重新设置大小为60*17，并保存为bmp文件。<br><span></span>我这人比较懒，617张车牌的照片？其实还是不容易找的。<span style="font-family:monospace;background-color:rgb(240,240,240);">我是这样做的：</span><br></p><h3>1.1 先收集类似图片</h3><span></span>运用 网页图片保存能手 这个软件批量下载图片（这个软件找的好辛苦，试过其它的有的收费有的基本不能用）<br><span></span>我在百度图片搜的关键词有 “车牌” “车牌号” “苏州车牌” “江苏车牌” 等等，获取了近7000张的图片<br><span></span><h3>1.2 利用以前写的小软件截取车牌</h3><span></span>运用自己以前写的小程序：车牌图片截取软件（运用opencv基于纹理检测车牌，由于效果不太好，姑且用来为adboost提供辅助收集车牌图片），<br><span></span>设置好样本图片所在的输入路径，在设置好车牌输出路径，运行即可得到 <span style="color:#cc0000;"><strong><em>60*17 </em></strong></span>大小的<strong><span style="color:#ff6600;">bmp</span></strong>图片<br><span></span>下载地址： <a href="http://download.csdn.net/detail/mkr127/5374301" rel="noopener" target="_blank">http://download.csdn.net/detail/mkr127/5374301</a><br><span></span><strong><span style="color:#ff6600;">PS</span></strong><span></span>由于效果不怎么好吗，所以在出来的图片中你得删掉无用的图片，于是，几千张的图片我只收集到了617张车牌图片，哈哈，很麻烦的。<br><span></span><span style="color:#ff6600;"><strong>BUG</strong></span><span></span>这个小软件有bug，我懒得改，即图片太大如5400*2700有时会出错，还有每次运行的图片不要太多，不然会出错，将图片 2000张一组就没有问题。<br><span></span>当然，如果你不喜欢，可以自己手动截取。<br><span></span><h3>1.3 将得到的617张正样本图片放在E:\Adaboost\positive\pimages\文件夹中</h3><span></span><h3>1.4 负样本图片</h3><p>即不包含车牌的图片，我收集了几千张，用matlab 批量格式化为 200*200大小的bmp图片，放在E:\Adaboost\nagative\pimages\文件夹内</p><span></span><span></span><span style="color:#cc0000;background-color:rgb(255,204,153);"><span></span><span></span></span><span></span><span></span><h2><strong>2</strong><span> <span></span></span>创建正负样本描述文件</h2><h3>2.1 正样本描述文件</h3><p><span></span>cd E:\Adaboost\positive<br><span></span>dir pimages /b &gt; pos.dat</p><span></span>运用文本编辑软件对生成的文件 pos.dat 进行替换修改：<br><span></span>a: 将jpg 替换为 jpg 1 0 0 60 17<br><span></span>b: 选择所有，tab键，将tab 替换为图片所在路径<br><span></span>得:<p><span></span></p><p></p><p style="text-align:center;"><img src="https://img-blog.csdn.net/20130515143600899" alt=""><br></p><h3>2.1 <strong><span></span></strong><span></span>负样本描述文件</h3><p><span></span><span></span></p><p><span></span>cd E:\Adaboost\nagative<br><span></span>dir pimages /b &gt; nag.dat</p><span></span>运用文本编辑软件对生成的文件 pos.dat 进行替换修改：<br><span></span>选择所有，tab键，将tab 替换为图片所在路径<br><span></span>得<p></p><p style="text-align:center;"><img src="https://img-blog.csdn.net/20130515143557231" alt=""><br></p><h2>3 设置环境变量</h2><p><span></span>添加Opencv库中opencv_createsamples的环境变量，以便于在cmd中执行，在path中最后添加 ;C:\OpenCV\opencv\install\bin</p><h2>4 创建正样本特征集描述文件</h2><p><span></span>打开cmd，进入positive所在文件夹</p><p><span></span>cd E:\Adaboost\positive<br><span></span>opencv_createsamples -vec pos.vec -info pos.dat -num 617 -w 60 -h 17<br><span></span>//-num 正样本数量 -w图像宽 -h高</p><p><span></span>如下图所示</p><span></span><div style="text-align:center;"><img src="https://img-blog.csdn.net/20130515143604274" alt=""></div><p><span></span></p><p><span></span><span></span></p><p><span></span>在E:\Adaboost\positive下生成pos.vec文件，即正样本特征集描述文件。</p><h2>5<span> </span>开始训练</h2><p>cd E:\Adaboost\nagative<br>opencv_haartraining -data trainout -vec e:\Adaboost\positive\pos.vec -bg nag.dat -npos 317 -nneg 300 -mem 40000 -mode ALL -w 60 -h 17<br>//-mem分配的内存大小 -w正样本宽 -h正样本高</p><p>//-npos正样本数量，-nneg 负样本数量，至于为什么是这个值，最后将有分析。</p><p><br></p><span></span><div style="text-align:center;"><img src="https://img-blog.csdn.net/20130515143606743" alt=""></div><h2><span style="color:rgb(255,0,0);"><strong>6 遇到的错误</strong></span></h2><p><span></span></p><h3>6.1 内存不够的错误</h3><span></span>那是因为正样本图片太大了，我改为60*17就正常了<p><span></span></p><h3>6.2 OpenCV Error: Assertion failed (elements_read == 1)</h3><span></span>原因：-nneg -npos 参数出错<p><span></span><strong><span style="color:#006600;">参考：</span></strong><br><span></span><a href="http://bbs.csdn.net/topics/390388465" rel="noopener" target="_blank">http://bbs.csdn.net/topics/390388465</a><br><span></span><a href="http://askbot.alekcac.webfactional.com/question/3085/why-always-opencv-error-assertion-failed-elements_read-1-in-unknown-function/" rel="noopener" target="_blank">http://askbot.alekcac.webfactional.com/question/3085/why-always-opencv-error-assertion-failed-elements_read-1-in-unknown-function/</a></p><p><br><span></span>我英文不太好 - -!初步分析认为：<br><span></span>假如我有正样本总数 617 ，npos(正样本参数设置的大小，待定);负样本数 nneg 待定(我原有3000张左右), nstages 12<br><span></span></p><p>617 &gt;= npos + (12-1)*0.001*npos +nneg</p><span></span>那么假如分配 nneg=300，则<br><span></span><p>npos&lt;= (617-300)/1.011 = 317</p><span></span><h3>6.3 再次测试</h3><span></span><p></p><pre><code class="language-cpp">opencv_haartraining -data trainout -vec e:\Adaboost\positive\pos.vec -bg nag.dat -npos 317 -nneg 300 -mem 40000 -mode ALL -w 60 -h 17</code></pre><br><p></p><span></span><p>问题搞定，我没有设置-nstages=12 也没错，额，待进一步研究。</p><p><br></p><p><span style="font-size:24px;color:#3333ff;"><span style="background-color:rgb(255,255,255);">结果</span></span></p><p>跑到第四层的时候，跑了一天两夜，仍然是第4阶！哥不淡定了，查查估计是死循环了，网上说适当增加负样本，</p><p>那么我在控制台中 Ctrl + C， 注意，是可以断开的，以前我一直不敢...原来在执行训练的话会自动加载 以前训练的级，估计这就是级联吧，都是自己摸索的，纯粹的供大家参考，有不到之处尽请谅解。</p><p>我将负样本增至600</p><p></p><pre><code class="language-cpp">opencv_haartraining -data trainout -vec e:\Adaboost\positive\pos.vec -bg nag.dat -npos 317 -nneg 600-mem 40000 -mode ALL -w 60 -h 17</code></pre><br><p></p><p>这时候在很短的时间内跑到了第10阶。进一步探究中。</p><p><br></p><p>接上</p><p><strong><span style="font-size:18px;background-color:rgb(51,102,255);">请注意</span></strong>，<strong>要确保 nag.dat 里面的数据大于600行</strong>，因为上一步执行到第10层时<span style="font-size:18px;color:#ff0000;"><strong>停止不动</strong></span>了</p><p style="text-align:center;"><img src="" alt=""><br></p><p>就停在这里，于是我找到 nag.dat(负样本描述文件)发现里面的数据只有300行，怪不得，于是我追加打到1269行，此时我再执行</p><p><span style="font-family:monospace;background-color:rgb(240,240,240);">E:\Adaboost\nagative&gt;opencv_haartraining -data trainout -vec e:\Adaboost\positive\pos.vec -bg nag.dat -npos 317 -nneg 900 -mem 40000 -mode ALL -w 60 -h 17</span><br></p><p></p><p>继续向下训练</p><p>截图为证</p><p style="text-align:center;"><img src="" alt=""></p><br><p><strong><u>报一下我的数据，pos.dat =617行,   pimages =617张     ,  nag.dat= 1269行 , nimages= 1269张</u></strong></p><p><strong><u>trainout 训练到第十层</u></strong></p><p style="text-align:center;"><img src="" alt=""><br></p><p style="text-align:center;"><br></p><p style="text-align:center;"><br></p><p>继续向下探索，由于我对着个完全没有经验，如果大家觉得太过幼稚简单，可以移步，呵呵，纯当给像我这样的一无所知之人一个借鉴。</p><p>仅此而已。</p><p><br></p><p><span style="font-size:18px;color:#ff6600;"><strong>训练结束</strong></span></p><p style="text-align:center;"><img src="" alt=""><br></p><p>得到 分类器：</p><p><br></p><p>这时我在增大负样本数到1269 发现到13级就训练结束了，和负样本数为900的没有区别，并且  E:\Adaboost\nagative\trainout.xml 自动更新覆盖为最新版，这下我就不用担心以前的成果白费了，当然，最好做个备份，E:\Adaboost\nagative\trainout 这里面的数据不要删，以后增加正负样本的数量的话我估计会自动累加，呵呵。</p><p style="text-align:center;"><img src="" alt=""><br></p><p><br></p><p>接下来开始测试：利用之前写的人脸检测代码，将分类器改成我们测试的分类器，一切就容易起来！</p><p>实验的结果还是挺差的，估计是样本太少了，我的正样本才600多，专业的最少都7-8000，也有可能是我的正样本图截的不好，用软件截的，没有手工的准确，再者就是网上的图片不行，真正好的样本还是比较少的。</p><p>测试结果：</p><p style="text-align:center;"><img src="" alt=""><img src="" alt=""><img src="https://img-blog.csdn.net/20130517124409378" alt=""><br></p><p><br></p><p>接下来就是增加样本数量，最后还不好的话，就增大样本质量，哈哈！</p><p>如果以后有经历，就写个MFC通用的提取分类器的小程序，用来测试分类器的性能。</p><p></p><p><strong>本人写的通用小项目下载地址：可以提取分类器进行检测，大家必须配置好OpenCV环境和在源码中设置好分类器的路径。</strong></p><p><a href="http://download.csdn.net/detail/mkr127/5397219" rel="noopener" target="_blank">http://download.csdn.net/detail/mkr127/5397219</a></p><p><a href="http://download.csdn.net/detail/mkr127/5397219" rel="noopener" target="_blank"></a><br></p><p>项目用到的正样本训练库，额，分有点高，毕竟是本人从几千张图片中一张一张筛选出来的...算是我的辛苦费吧，勿喷我......</p><p><a href="http://download.csdn.net/detail/mkr127/5418861" rel="noopener" target="_blank">http://download.csdn.net/detail/mkr127/5418861</a><br></p><p>60-17像素bmp车牌 共617张。</p><p><br></p><span></span><h2>7 参考文章</h2><p><span style="background-color:rgb(255,204,153);"><span style="font-size:24px;">基于Adaboost算法的车牌检测在OpenCV上的研究与实现.pdf </span></span></p><p><span style="font-size:18px;"><strong>作者：邓育林</strong></span></p><span></span><a href="http://wenku.baidu.com/view/5a3f464433687e21af45a971.html" rel="noopener" target="_blank">http://wenku.baidu.com/view/5a3f464433687e21af45a971.html</a><br><p><span style="font-weight:bold;"><span style="color:#ff0000;"><span style="font-size:18px;"><span></span><span></span><span></span>转载请注明出处！</span></span></span></p><p><br></p><div><span style="font-family:monospace;background-color:rgb(240,240,240);"><br></span></div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖1〗】UI布局</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A81_UI%E5%B8%83%E5%B1%80/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A81_UI%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1  Android UI 的基础知识</h1><div>       UI 即 User Interface，用户界面。Android 中所有的可视化组件都是从 View 类派生而来的，通常把他们称为视图。视图也常被称为控件或者组件。ViewGroup 类是对 View类的扩展，它是用来包含多个视图的。一般来说，视图组主要用来管理子视图的布局，但是也可以用来构建原子的可重用组件，那些用来实现前一种功能的视图组通常称为布局。</div><div> </div><h1>2  将用户界面分配给 Activity</h1><div>       一个新的Activity在刚被创建的时候是一个空白屏幕，可以把自己的UI放在上面。setContentView方法既可以接受一个布局资源ID，也可以接受一个单独的视图实例。这样既可以使用代码，又可以使用其他喜欢的外部布局资源的技术来定义UI。setContentView(R.id.layout);setContentView(new TextView(this));</div><h1>3  布局简介</h1><div>        布局管理器是对ViewGroup类的扩展，它是用来控制子控件在UI中的位置的，布局是可以嵌套的，因此，可以使用多个布局的组合来创建任意复杂的界面。布局类最关键的特征就是能够扩展并适应各种各样的屏幕尺寸、分辨率和屏幕方向。</div><ul><li>FrameLayout</li></ul><div>            最简单的布局管理器，它会把每一个新的子视图堆积在前一个子视图的上面，而且每一个新 的子视图可能会遮挡住上一个。</div><ul><li>LinearLayout</li></ul><div>            按照垂直或者水平方向来对齐每一个子视图，通过weight控制每一个子视图在可用空间内的相对大小。</div><ul><li>RelativeLayout</li></ul><div>            使用RelativeLayout，可以定义每一个子视图与其他子视图之间以及屏幕边界之间的相对位置。允许根据父元素或者其他视图的位置定义每个元素在布局中的位置。</div><ul><li>GridLayout</li></ul><div>            GridLayout在Android4.0(API level 14)中引入，它是由极细的线构成的矩形网格，在一系列行和列中布局视图。</div><div> </div><h3>    3.1  FrameLayout</h3><div><span><img src="https://img-blog.csdn.net/20130910130344578" alt=""></span></div><div><br></div><div></div><h3>    3.2  LinearLayout</h3><div><span><img src="https://img-blog.csdn.net/20130910130355156" alt=""></span></div><div></div><h1><span style="font-size:12px;"></span></h1><h3>   3.3 RelativeLayout</h3><div><span><img src="https://img-blog.csdn.net/20130910130402015" alt=""></span></div><div></div><h3>    3.4 GridLayout</h3><div><div><div>       网格布局是所有布局管理器中最为灵活的一种。网格布局使用一个随意选择的网格来放置视图。通过使用行和列延伸、Space View 和 Gravity 属性，可以创建复杂的UI，而不是像相对布局那样为构建UI而经常使用复杂的嵌套。</div><div>       GridLayout 看起来和 TableLayout差不多，实其性能和功能要比TableLayout要好，比如 GridLyout布局中的单元格可以跨越多行，而TabLayout却不行，此外，其渲染速度也比TabLayout要快。</div><div>       出于性能考虑，在创建相同的UI时，应该优先考虑使用网格布局，而不是嵌套布局 。</div><div>       在GridLyout中，默认对每一个子控件使用 wrap_content的方式，而不是显示声明高度和宽度。</div></div></div><div> </div><ul><li>GridLayout  案例</li></ul><div></div><div> <span> <img src="https://img-blog.csdn.net/20130910130406562" alt=""></span></div><h3>    3.5 优化布局</h3><div><div>        填充布局是一个开销巨大的过程，一个FrameLayout布局内的 layout_width 和layout_height 都被设置为 match_parent，这样做没有什么实际意义，只是增加了填充时间，当该布局作为子布局嵌入父布局时，两个match_parent就形成了冗余布局。布局可以被任意嵌套，但最好不要超过10层，不然性能会有质的差距。避免使用过多的View，每个布局中View个数不应该超过80。</div></div><div></div><div> </div><div> <span> <img src="https://img-blog.csdn.net/20130910130414765" alt=""></span></div><div> </div><div> </div><div><strong><span style="font-size:18px;color:#ff0000;"><u>转载请注明出处 :)</u></span></strong></div><div><br></div><div><br></div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖0〗】AndroidStudio</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A80_AndroidStudio/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A80_AndroidStudio/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>下载地址：<a href="http://developer.android.com/sdk/installing/studio.html#download" rel="noopener" target="_blank">http://developer.android.com/sdk/installing/studio.html#download</a></p><p>如果出现启动不了的问题</p><p>进入AndroidStudio安装目录 E:\software\AndroidStudio\bin ，运行studio.bat</p><p>出现</p><p></p><div></div><div style="text-align:center;"><img src="https://img-blog.csdn.net/20130516103534436" alt=""></div><p></p><p></p><div></div><br><p></p><p>原来是没有设置JAVA的环境变量！</p><p><strong>No.1 </strong><br>在系统变量里点击新建，变量名填写JAVA_HOME<br><br></p><pre><code class="language-cpp">变量名    JAVA_HOME变量值    C:\Program Files\Java\jdk1.7.0_21</code></pre><br><strong>No.2 </strong><br>在系统变量里点击新建变量名填写CLASSPATH<br><br><pre><code class="language-cpp">变量名    CLASSPATH变量值    .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</code></pre><br><strong>No.3 </strong><br>在系统变量里找到Path变量，这是系统自带的，在变量最后加上<br><br><pre><code class="language-cpp">;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code></pre><br>注意前面的分号。<p></p><p>设置好后，打开AndroidStudio，新建一个项目，</p><p><strong>Project location</strong> 中设置路径时的项目文件夹必须为<strong>本地还没有的文件夹</strong>，然后点击其它的输入框，会发先 Description 不提示错误了，感谢<strong><a class="username" href="http://blog.csdn.net/king875812310" rel="noopener" target="_blank">king875812310</a> </strong>的研究成果。</p><p><strong>例如路径为      E:\software\AndroidWorkspace\MTank</strong>   这个<strong><u>MTank</u></strong>文件夹本地不存在。<br></p><p>然后出现了一个下载更新的界面，等待</p><p style="text-align:center;"><img src="https://img-blog.csdn.net/20130516104928165" alt=""><br></p><p>更新玩后，就成功出现了界面了，哈哈，如下图</p><p style="text-align:center;"><img src="https://img-blog.csdn.net/20130516105340631" alt=""><br></p><p><span style="font-size:24px;color:#ff0000;"><strong><br></strong></span></p><p>如果还不能运行 试试<span style="font-size:18px;color:#ff9966;"><strong>最新版的jdk</strong></span>吧，因为我的是最新版本，下载地址</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" rel="noopener" target="_blank">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a><br></p><p><br></p><p>运行截图：</p><p style="text-align:center;"><img src="https://img-blog.csdn.net/20130516112914542" alt=""><br></p><p><span style="font-size:24px;color:rgb(255,0,0);"><strong><br></strong></span></p><p><span style="font-size:24px;color:#ff0000;"><strong>中文乱码的解决</strong></span></p><p>在打开的窗口中，找到IDE <strong><u>File</u></strong> --&gt; <strong><u>Settings</u></strong>下的<u><strong>Appearance</strong></u>，在右侧勾选上“<strong><u>Override default fonts by</u></strong>”，然后点应用，我的就可以看到中文了，然后我选择了<strong><u>黑体</u></strong>，哈哈，搞定。</p><p style="text-align:center;"><img src="https://img-blog.csdn.net/20130516151758202" alt=""><br></p><p>参考 <a href="http://www.eoeandroid.com/thread-275485-1-1.html" rel="noopener" target="_blank">http://www.eoeandroid.com/thread-275485-1-1.html</a></p><p><br></p><p>在代码中使用中文如果提示<strong><em><span style="color:#ff0000;"> java: 未结束的字符串文字</span></em></strong></p><p>则设置项目的字符编码，我是这么设置的</p><p>File --&gt; Settings </p><p style="text-align:center;"><img src="https://img-blog.csdn.net/20130516153707095" alt=""><br></p><p><strong><br></strong></p><p><strong>搞定收工！</strong><br></p><p><span style="font-size:24px;color:#ff0000;"><strong>转载请注明出处！</strong></span><br></p><p style="text-align:center;"><br></p><p style="text-align:center;"><br></p><p style="text-align:center;"><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【PHP基础入门】配置Phpstorm与xampp</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E9%85%8D%E7%BD%AEPhpstorm%E4%B8%8Exampp/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_PHP%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E9%85%8D%E7%BD%AEPhpstorm%E4%B8%8Exampp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <div><strong>1 Xampp</strong> </div><div><strong><br></strong></div><div><a href="http://blog.csdn.net/jonathanlin2008/article/details/6210782%E2%80%8D" rel="noopener" target="_blank"></a></div><div><strong>安装好xampp，配置 httpd.conf</strong> </div><div>191/221 行 DocumentRoot 路径改为 "F:/PHP"  （我的工作空间）,以后项目就放在这个文件夹里。</div><div></div><div> </div><div><strong>配置 php.ini</strong> </div><div> </div><div>Windows 下</div><div><pre><code class="language-python">[XDebug]zend_extension = "E:\Software\Develop\xampp\php\ext\php_xdebug.dll"xdebug.profiler_append = 0xdebug.profiler_enable = 1xdebug.profiler_enable_trigger = 0xdebug.profiler_output_dir = "E:\Software\Develop\xampp\tmp"xdebug.profiler_output_name = "cachegrind.out.%t-%s"xdebug.remote_enable = onxdebug.remote_handler = "dbgp"xdebug.remote_host = "127.0.0.1"xdebug.trace_output_dir = "E:\Software\Develop\xampp\tmp"xdebug.remote_port = 9000</code></pre></div><div><br></div><div>重启 Apache </div><div> </div><div>如果是Linux 需要下载 xdebug</div><div><a href="http://code.activestate.com/komodo/remotedebugging/" rel="noopener" target="_blank">http://code.activestate.com/komodo/remotedebugging/</a></div><div> </div><div>解压后找到合适版本的xdebug.so并将其复制到/opt/lampp/lib/php/extensions/中。然后修改/opt/lampp/etc/php.ini文件，</div><div>在其最后加上</div><div><code></code><div><div><br></div><div><pre><code class="language-python">[XDebug]zend_extension="/opt/lampp/lib/php/extensions/xdebug.so"xdebug.remote_enable=truexdebug.remote_host=127.0.0.1xdebug.remote_port=9000xdebug.remote_handler=dbgpxdebug.profiler_enable=1xdebug.profiler_output_dir="/opt/lampp/tmp"</code></pre><br></div></div></div><div>lampp restart</div><div><br></div><div><strong>2 PhpStorm</strong></div><div> </div><div><strong>2.1    进入File&gt;Settings&gt;PHP&gt;Servers，添加一个 Server</strong> </div><div> </div><div><code></code><div><div><pre><code class="language-python">Name     :  localhostHost     :  localhostPort     :  80Debugger :  Xdebuger</code></pre></div><br></div></div><div> </div><div><strong>2.2    进入File&gt;Settings&gt;PHP&gt;Debug</strong></div><div> </div><div><pre><code class="language-python">Debug port    :    9000</code></pre></div><br><div> </div><div><strong>2.3    打开 Edit Configurations</strong></div><div> </div><div align="left"></div><div> <img src="" alt=""><img src="https://img-blog.csdn.net/20130712170415984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWtyMTI3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></div><div><br></div><div><strong><u>添加一个 PHP Web Application</u></strong></div><div><strong><u><br></u></strong></div><div> <img src="" alt=""><img src="https://img-blog.csdn.net/20130712170419953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWtyMTI3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></div><div align="left"></div><div> </div><div>运行时 就用这个 Web 运行调试，搞定。</div><div>还不行就试试修改 上图中的Defaults，我把 server都改成了自己的localhost ,浏览器改成了firefox。</div><div><br></div><div>成果就是设置好断点,</div><div>debug 运行，或者直接 shift + F9</div><div>则会自动打开火狐浏览器并且停留在断点处。</div><div><br></div><div><br></div><div><strong><span style="font-size:18px;">以后遇到新问题是将更新本文档，免得后面人又得重新探索，也欢迎大家提出问题。</span></strong></div><div> </div><div><span style="font-size:18px;color:#ff0000;"><strong>转载请注明出处</strong></span></div><div><br></div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖8〗】SimpleAdapter之一</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A88_SimpleAdapter%E4%B9%8B%E4%B8%80/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A88_SimpleAdapter%E4%B9%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <div>SimpleAdapter</div> <br><h2>Activity</h2><p><strong>主程序</strong></p><p>listItem 中存放所有要显示的所有列数据，每 new <strong>一个map</strong>，即 在显示的列表中 新建<strong>一行</strong>数据，Title (自定义)、Image(自定义) 只是别名，分别对应 每一行的布局 item_layout 中的 资源 ID ， Title =&gt; R.id.item_text，Image =&gt; R.id.item_image。</p><p><br></p><pre><code class="language-java">package com.michael.training;import java.util.ArrayList;import java.util.HashMap;import android.app.Activity;import android.os.Bundle;import android.util.Log;import android.view.Menu;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ListView;import android.widget.SimpleAdapter;import android.widget.Toast;public class MainActivity extends Activity {@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.main_layout);ListView listView = (ListView)findViewById(R.id.mListView);ArrayList&lt;HashMap&lt;String, Object&gt;&gt; listItem = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();        HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();        map.put("Title", "NO.1开发环境搭建");        map.put("Image", R.drawable.item);        listItem.add(map);                map = null;        map = new HashMap&lt;String, Object&gt;();        map.put("Title", "NO.2四大组件");        map.put("Image", R.drawable.item);        listItem.add(map);SimpleAdapter listAdapter = new SimpleAdapter(this,listItem,R.layout.item_layout,new String[] {"Title", "Image"},new int[] {R.id.item_text,R.id.item_img});listView.setAdapter(listAdapter);listView.setOnItemClickListener(listener);}OnItemClickListener listener=new OnItemClickListener() {@Overridepublic void onItemClick(AdapterView&lt;?&gt; arg0, View arg1, int arg2,long arg3) {Toast.makeText(getApplicationContext(),((Integer)arg2).toString()+"-----"+((Integer)arg2).toString(), Toast.LENGTH_SHORT).show();}};@Overridepublic boolean onCreateOptionsMenu(Menu menu) {// Inflate the menu; this adds items to the action bar if it is present.getMenuInflater().inflate(R.menu.main, menu);return true;}}</code></pre><br><h2>main_layout.xml</h2><div><strong>主页面布局</strong></div><div>只放了个ListView。</div><pre><code class="language-html">&lt;RelativeLayout   xmlns:android = "http://schemas.android.com/apk/res/android"     xmlns:tools = "http://schemas.android.com/tools"     android:layout_width = "match_parent"     android:layout_height = "match_parent"     tools:context = ".MainActivity"  &gt;    &lt;ListView           android:id = "@+id/mListView"         android:layout_width = "match_parent"         android:layout_height = "match_parent" /&gt;&lt;/RelativeLayout&gt;</code></pre><h2>item_layout.xml</h2><div><strong>item布局</strong></div><div>即ListView中每一行显示的布局，我定义了一个图片和一个文本。</div><pre><code class="language-html">&lt;? xml   version = "1.0"   encoding = "utf-8" ?&gt;&lt;RelativeLayout   xmlns:android = "http://schemas.android.com/apk/res/android"     android:layout_width = "fill_parent"     android:layout_height = "match_parent"     android:layout_gravity = "center_vertical"   xmlns:tools = "http://schemas.android.com/tools"   tools:ignore = "HardcodedText" &gt;    &lt;ImageView         android:id = "@+id/item_img"         android:layout_width = "wrap_content"         android:layout_height = "wrap_content"         android:layout_alignParentTop = "true"         android:layout_marginLeft = "10dp"         android:src = "@drawable/item"         android:contentDescription = "imageflag"   /&gt;    &lt;TextView         android:id = "@+id/item_text"         android:layout_width = "wrap_content"         android:layout_height = "wrap_content"         android:layout_alignBottom = "@+id/item_img"         android:layout_alignParentRight = "true"         android:layout_alignParentTop = "true"         android:layout_marginTop = "4dp"         android:layout_marginLeft = "24dp"         android:layout_toRightOf = "@+id/item_img"         android:gravity = "center_vertical"         android:text = "环境搭建"         android:textStyle = "bold"   /&gt;&lt;/RelativeLayout&gt;</code></pre><p><br></p><h2>成果</h2><img src="https://img-blog.csdn.net/20130806152000234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWtyMTI3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><div><br></div><div><br></div><div><strong><span style="color:#ff0000;">转载请注明出处！</span></strong></div><div><br></div><div><br></div><div><br></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code></code></strong></span></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code></code></strong></span></div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖9〗】SimpleAdapter之二</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A89_SimpleAdapter%E4%B9%8B%E4%BA%8C/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A89_SimpleAdapter%E4%B9%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <div><h1>1    MainActivity.java</h1><div><span></span><pre><code class="language-java">package com.myadapter;import java.util.ArrayList;import java.util.HashMap;import android.app.Activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.ListView;import android.widget.SimpleAdapter;import android.widget.TextView;import android.widget.Toast;public class MainActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);                //声明一个 ListView        ListView listview = new ListView(this);                            //定义数组  数组内容是 HashMap        ArrayList&lt;HashMap&lt;String,Object&gt;&gt; list=new ArrayList&lt;HashMap&lt;String,Object&gt;&gt;();                //每一个HashMap 对应ListView 中 每一个 item 的数据        HashMap&lt;String,Object&gt;map=new HashMap&lt;String, Object&gt;();        map.put("Image", R.drawable.star);        map.put("Text1", "周杰伦");        map.put("Text2", "菊花台");        map.put("Button", "更多");        list.add(map);                map=null;        map=new HashMap&lt;String, Object&gt;();        map.put("Image", R.drawable.ic_menu_send);        map.put("Text1", "邓丽君");        map.put("Text2", "在水一方");        map.put("Button", "更多");        list.add(map);                map=null;        map=new HashMap&lt;String, Object&gt;();        map.put("Image", R.drawable.star);        map.put("Text1", "蔡琴");        map.put("Text2", "恰似你的温柔");        map.put("Button", "更多");        list.add(map);                //适配器  绑定数据        SimpleAdapter adapter=new SimpleAdapter(                this,                             //上下文                list,                             //要绑定的数据                R.layout.item_layout,             //每一个 item 的布局                new String[]{ "Text1",    "Text2",    "Button",    "Image"},    //HashMap 中的 键名                new int[]{    R.id.text1,  R.id.text2, R.id.button, R.id.image})//分别对应 item 中控件 id,与上一个参数 的键名一一上下对应        {                    //在这个重写的函数里设置 每个 item 中按钮的响应事件                    @Override                    public View getView(int position, View convertView,ViewGroup parent) {                        final int p=position;                        final View view=super.getView(position, convertView, parent);                        Button button=(Button)view.findViewById(R.id.button);                        button.setOnClickListener(new OnClickListener() {                                                        @Override                            public void onClick(View v) {                                                                //警告框的写法                                new AlertDialog.Builder(MainActivity.this)                                .setTitle("More")                                .setMessage("你选中了"+String.valueOf(p))                                .setPositiveButton("确定", new DialogInterface.OnClickListener() {                                    public void onClick(DialogInterface dialog, int which) {                                        setTitle("点击了对话框上的确定按钮");                                     }                                })                                .setNeutralButton("中立" ,new DialogInterface.OnClickListener() {                                      public void onClick(DialogInterface dialog, int whichButton) {                                          setTitle("点击了对话框上的中立按钮");                                      }                                  })                                 .setNegativeButton("取消", new DialogInterface.OnClickListener() {                                      public void onClick(DialogInterface dialog, int whichButton) {                                          setTitle("点击了对话框上的取消按钮");                                      }                                  })                                .create()                                .show();                            }                        });                        return view;                    }        };        //绑定适配器        listview.setAdapter(adapter);                        //设置背景颜色选择器        listview.setSelector(R.drawable.on_item_selected);                //设置焦点响应问题    同时要将 item 中的焦点 focusable 设置为 false        listview.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);                //设置 item 的监听事件        listview.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {                                //获得 item 里面的文本控件                TextView text1=(TextView)view.findViewById(R.id.text1);                Toast.makeText(getApplicationContext(), text1.getText().toString(), Toast.LENGTH_SHORT).show();            }        });                //设置显示的内容        setContentView(listview);    }}</code></pre><br></div><h1>2    ListView 之每一个 item的布局item_layout.xml</h1><div><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;  &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"      xmlns:tools="http://schemas.android.com/tools"      android:layout_width="match_parent"      android:layout_height="45dp"      android:orientation="horizontal"      tools:ignore="HardcodedText,NestedWeights" &gt;      &lt;ImageView          android:id="@+id/image"          android:layout_width="wrap_content"          android:layout_height="match_parent"          android:layout_weight="4"          android:contentDescription="头像"           android:src="@drawable/ic_menu_send"/&gt;      &lt;LinearLayout          android:layout_width="wrap_content"          android:layout_height="match_parent"          android:layout_weight="24"          android:orientation="vertical" &gt;          &lt;TextView               android:id="@+id/text1"              android:layout_width="match_parent"              android:layout_height="wrap_content"              android:layout_weight="1"              android:textColor="@color/blue"              android:text="王力宏"/&gt;          &lt;TextView               android:id="@+id/text2"              android:layout_width="match_parent"              android:layout_height="wrap_content"              android:textColor="@color/darkviolet"              android:layout_weight="1"              android:text="大城小爱"/&gt;      &lt;/LinearLayout&gt;      &lt;Button           android:id="@+id/button"          android:layout_width="wrap_content"          android:layout_height="match_parent"          android:text="more"          android:layout_weight="1"          android:textColor="@color/darkorchid"          android:focusable="false"/&gt;  &lt;/LinearLayout&gt; </code></pre><br><br></div><h1>3    ListView 之 item 颜色选择器    <span style="font-size:12px;">on_item_selected.xml    （放在 drawable 文件夹里）</span></h1><div><span style="font-size:12px;"></span><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;selector xmlns:android="http://schemas.android.com/apk/res/android" &gt;    &lt;item   android:state_focused="false"            android:drawable="@android:color/black"/&gt;    &lt;item   android:state_focused="true"            android:drawable="@android:color/darker_gray"/&gt;&lt;/selector&gt;</code></pre><br><br></div><h1>4    资源图片</h1><h6>        4.1    ic_menu_send.png        </h6><div><div>                <img src="https://img-blog.csdn.net/20130911142505828" alt=""></div></div><h6>        4.2    star.png</h6><div><div>                <img src="https://img-blog.csdn.net/20130911142559656" alt=""></div></div><h1>5    颜色值  color.xml</h1><div><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt;    &lt;color name="white"&gt;#FFFFFF&lt;/color&gt;&lt;!--白色 --&gt;    &lt;color name="ivory"&gt;#FFFFF0&lt;/color&gt;&lt;!--象牙色 --&gt;    &lt;color name="lightyellow"&gt;#FFFFE0&lt;/color&gt;&lt;!--亮黄色 --&gt;    &lt;color name="yellow"&gt;#FFFF00&lt;/color&gt;&lt;!--黄色 --&gt;    &lt;color name="snow"&gt;#FFFAFA&lt;/color&gt;&lt;!--雪白色 --&gt;    &lt;color name="floralwhite"&gt;#FFFAF0&lt;/color&gt;&lt;!--花白色 --&gt;    &lt;color name="lemonchiffon"&gt;#FFFACD&lt;/color&gt;&lt;!--柠檬绸色 --&gt;    &lt;color name="cornsilk"&gt;#FFF8DC&lt;/color&gt;&lt;!--米绸色 --&gt;    &lt;color name="seashell"&gt;#FFF5EE&lt;/color&gt;&lt;!--海贝色 --&gt;    &lt;color name="lavenderblush"&gt;#FFF0F5&lt;/color&gt;&lt;!--淡紫红 --&gt;    &lt;color name="papayawhip"&gt;#FFEFD5&lt;/color&gt;&lt;!--番木色 --&gt;    &lt;color name="blanchedalmond"&gt;#FFEBCD&lt;/color&gt;&lt;!--白杏色 --&gt;    &lt;color name="mistyrose"&gt;#FFE4E1&lt;/color&gt;&lt;!--浅玫瑰色 --&gt;    &lt;color name="bisque"&gt;#FFE4C4&lt;/color&gt;&lt;!--桔黄色 --&gt;    &lt;color name="moccasin"&gt;#FFE4B5&lt;/color&gt;&lt;!--鹿皮色 --&gt;    &lt;color name="navajowhite"&gt;#FFDEAD&lt;/color&gt;&lt;!--纳瓦白 --&gt;    &lt;color name="peachpuff"&gt;#FFDAB9&lt;/color&gt;&lt;!--桃色 --&gt;    &lt;color name="gold"&gt;#FFD700&lt;/color&gt;&lt;!--金色 --&gt;    &lt;color name="pink"&gt;#FFC0CB&lt;/color&gt;&lt;!--粉红色 --&gt;    &lt;color name="lightpink"&gt;#FFB6C1&lt;/color&gt;&lt;!--亮粉红色 --&gt;    &lt;color name="orange"&gt;#FFA500&lt;/color&gt;&lt;!--橙色 --&gt;    &lt;color name="lightsalmon"&gt;#FFA07A&lt;/color&gt;&lt;!--亮肉色 --&gt;    &lt;color name="darkorange"&gt;#FF8C00&lt;/color&gt;&lt;!--暗桔黄色 --&gt;    &lt;color name="coral"&gt;#FF7F50&lt;/color&gt;&lt;!--珊瑚色 --&gt;    &lt;color name="hotpink"&gt;#FF69B4&lt;/color&gt;&lt;!--热粉红色 --&gt;    &lt;color name="tomato"&gt;#FF6347&lt;/color&gt;&lt;!--西红柿色 --&gt;    &lt;color name="orangered"&gt;#FF4500&lt;/color&gt;&lt;!--红橙色 --&gt;    &lt;color name="deeppink"&gt;#FF1493&lt;/color&gt;&lt;!--深粉红色 --&gt;    &lt;color name="fuchsia"&gt;#FF00FF&lt;/color&gt;&lt;!--紫红色 --&gt;    &lt;color name="magenta"&gt;#FF00FF&lt;/color&gt;&lt;!--红紫色 --&gt;        &lt;color name="red"&gt;#FF0000&lt;/color&gt;&lt;!--红色 --&gt;    &lt;color name="oldlace"&gt;#FDF5E6&lt;/color&gt;&lt;!--老花色 --&gt;    &lt;color name="lightgoldenyellow"&gt;#FAFAD2&lt;/color&gt;&lt;!--亮金黄色 --&gt;    &lt;color name="linen"&gt;#FAF0E6&lt;/color&gt;&lt;!--亚麻色 --&gt;    &lt;color name="antiquewhite"&gt;#FAEBD7&lt;/color&gt;&lt;!--古董白 --&gt;    &lt;color name="salmon"&gt;#FA8072&lt;/color&gt;&lt;!--鲜肉色 --&gt;    &lt;color name="ghostwhite"&gt;#F8F8FF&lt;/color&gt;&lt;!--幽灵白 --&gt;    &lt;color name="mintcream"&gt;#F5FFFA&lt;/color&gt;&lt;!--薄荷色 --&gt;    &lt;color name="whitesmoke"&gt;#F5F5F5&lt;/color&gt;&lt;!--烟白色 --&gt;    &lt;color name="beige"&gt;#F5F5DC&lt;/color&gt;&lt;!--米色 --&gt;    &lt;color name="wheat"&gt;#F5DEB3&lt;/color&gt;&lt;!--浅黄色 --&gt;    &lt;color name="sandybrown"&gt;#F4A460&lt;/color&gt;&lt;!--沙褐色 --&gt;    &lt;color name="azure"&gt;#F0FFFF&lt;/color&gt;&lt;!--天蓝色 --&gt;    &lt;color name="honeydew"&gt;#F0FFF0&lt;/color&gt;&lt;!--蜜色 --&gt;    &lt;color name="aliceblue"&gt;#F0F8FF&lt;/color&gt;&lt;!--艾利斯兰 --&gt;    &lt;color name="khaki"&gt;#F0E68C&lt;/color&gt;&lt;!--黄褐色 --&gt;    &lt;color name="lightcoral"&gt;#F08080&lt;/color&gt;&lt;!--亮珊瑚色 --&gt;    &lt;color name="palegoldenrod"&gt;#EEE8AA&lt;/color&gt;&lt;!--苍麒麟色 --&gt;    &lt;color name="violet"&gt;#EE82EE&lt;/color&gt;&lt;!--紫罗兰色 --&gt;    &lt;color name="darksalmon"&gt;#E9967A&lt;/color&gt;&lt;!--暗肉色 --&gt;    &lt;color name="lavender"&gt;#E6E6FA&lt;/color&gt;&lt;!--淡紫色 --&gt;    &lt;color name="lightcyan"&gt;#E0FFFF&lt;/color&gt;&lt;!--亮青色 --&gt;    &lt;color name="burlywood"&gt;#DEB887&lt;/color&gt;&lt;!--实木色 --&gt;    &lt;color name="plum"&gt;#DDA0DD&lt;/color&gt;&lt;!--洋李色 --&gt;    &lt;color name="gainsboro"&gt;#DCDCDC&lt;/color&gt;&lt;!--淡灰色 --&gt;    &lt;color name="crimson"&gt;#DC143C&lt;/color&gt;&lt;!--暗深红色 --&gt;    &lt;color name="palevioletred"&gt;#DB7093&lt;/color&gt;&lt;!--苍紫罗兰色--&gt;    &lt;color name="goldenrod"&gt;#DAA520&lt;/color&gt;&lt;!--金麒麟色 --&gt;    &lt;color name="orchid"&gt;#DA70D6&lt;/color&gt;&lt;!--淡紫色 --&gt;    &lt;color name="thistle"&gt;#D8BFD8&lt;/color&gt;&lt;!--蓟色 --&gt;    &lt;color name="lightgray"&gt;#D3D3D3&lt;/color&gt;&lt;!--亮灰色 --&gt;    &lt;color name="lightgrey"&gt;#D3D3D3&lt;/color&gt;&lt;!--亮灰色 --&gt;    &lt;color name="tan"&gt;#D2B48C&lt;/color&gt;&lt;!--茶色 --&gt;    &lt;color name="chocolate"&gt;#D2691E&lt;/color&gt;&lt;!--巧可力色 --&gt;    &lt;color name="peru"&gt;#CD853F&lt;/color&gt;&lt;!--秘鲁色 --&gt;    &lt;color name="indianred"&gt;#CD5C5C&lt;/color&gt;&lt;!--印第安红 --&gt;    &lt;color name="mediumvioletred"&gt;#C71585&lt;/color&gt;&lt;!--中紫罗兰色 --&gt;    &lt;color name="silver"&gt;#C0C0C0&lt;/color&gt;&lt;!--银色 --&gt;    &lt;color name="darkkhaki"&gt;#BDB76B&lt;/color&gt;&lt;!-- 暗黄褐色 --&gt;    &lt;color name="rosybrown"&gt;#BC8F8F&lt;/color&gt;&lt;!--褐玫瑰红--&gt;    &lt;color name="mediumorchid"&gt;#BA55D3&lt;/color&gt;&lt;!--中粉紫色 --&gt;    &lt;color name="darkgoldenrod"&gt;#B8860B&lt;/color&gt;&lt;!--暗金黄色 --&gt;    &lt;color name="firebrick"&gt;#B22222&lt;/color&gt;&lt;!--火砖色 --&gt;    &lt;color name="powderblue"&gt;#B0E0E6&lt;/color&gt;&lt;!--粉蓝色 --&gt;    &lt;color name="lightsteelblue"&gt;#B0C4DE&lt;/color&gt;&lt;!--亮钢兰色 --&gt;    &lt;color name="paleturquoise"&gt;#AFEEEE&lt;/color&gt;&lt;!--苍宝石绿 --&gt;    &lt;color name="greenyellow"&gt;#ADFF2F&lt;/color&gt;&lt;!--黄绿色 --&gt;    &lt;color name="lightblue"&gt;#ADD8E6&lt;/color&gt;&lt;!--亮蓝色 --&gt;    &lt;color name="darkgray"&gt;#A9A9A9&lt;/color&gt;&lt;!--暗灰色 --&gt;    &lt;color name="darkgrey"&gt;#A9A9A9&lt;/color&gt;&lt;!--暗灰色 --&gt;    &lt;color name="brown"&gt;#A52A2A&lt;/color&gt;&lt;!--褐色 --&gt;    &lt;color name="sienna"&gt;#A0522D&lt;/color&gt;&lt;!--赭色 --&gt;    &lt;color name="darkorchid"&gt;#9932CC&lt;/color&gt;&lt;!--暗紫色 --&gt;    &lt;color name="palegreen"&gt;#98FB98&lt;/color&gt;&lt;!--苍绿色 --&gt;    &lt;color name="darkviolet"&gt;#9400D3&lt;/color&gt;&lt;!--暗紫罗兰色 --&gt;    &lt;color name="mediumpurple"&gt;#9370DB&lt;/color&gt;&lt;!--中紫色 --&gt;    &lt;color name="lightgreen"&gt;#90EE90&lt;/color&gt;&lt;!--亮绿色 --&gt;    &lt;color name="darkseagreen"&gt;#8FBC8F&lt;/color&gt;&lt;!--暗海兰色 --&gt;    &lt;color name="saddlebrown"&gt;#8B4513&lt;/color&gt;&lt;!--重褐色 --&gt;    &lt;color name="darkmagenta"&gt;#8B008B&lt;/color&gt;&lt;!--暗洋红 --&gt;    &lt;color name="darkred"&gt;#8B0000&lt;/color&gt;&lt;!--暗红色 --&gt;    &lt;color name="blueviolet"&gt;#8A2BE2&lt;/color&gt;&lt;!--紫罗兰蓝色--&gt;    &lt;color name="lightskyblue"&gt;#87CEFA&lt;/color&gt;&lt;!--亮天蓝色--&gt;    &lt;color name="skyblue"&gt;#87CEEB&lt;/color&gt;&lt;!--天蓝色 --&gt;    &lt;color name="gray"&gt;#808080&lt;/color&gt;&lt;!--灰色 --&gt;    &lt;color name="grey"&gt;#808080&lt;/color&gt;&lt;!--灰色 --&gt;    &lt;color name="olive"&gt;#808000&lt;/color&gt;&lt;!--橄榄色 --&gt;    &lt;color name="purple"&gt;#800080&lt;/color&gt;&lt;!--紫色 --&gt;    &lt;color name="maroon"&gt;#800000&lt;/color&gt;&lt;!--粟色 --&gt;    &lt;color name="aquamarine"&gt;#7FFFD4&lt;/color&gt;&lt;!--碧绿色 --&gt;    &lt;color name="chartreuse"&gt;#7FFF00&lt;/color&gt;&lt;!--黄绿色 --&gt;    &lt;color name="lawngreen"&gt;#7CFC00&lt;/color&gt;&lt;!--草绿色 --&gt;    &lt;color name="mediumslateblue"&gt;#7B68EE&lt;/color&gt;&lt;!--中暗蓝色 --&gt;    &lt;color name="lightslategray"&gt;#778899&lt;/color&gt;&lt;!--亮蓝灰 --&gt;    &lt;color name="lightslategrey"&gt;#778899&lt;/color&gt;&lt;!--亮蓝灰 --&gt;    &lt;color name="slategray"&gt;#708090&lt;/color&gt;&lt;!--灰石色 --&gt;    &lt;color name="slategrey"&gt;#708090&lt;/color&gt;&lt;!--灰石色 --&gt;    &lt;color name="olivedrab"&gt;#6B8E23&lt;/color&gt;&lt;!--深绿褐色 --&gt;    &lt;color name="slateblue"&gt;#6A5ACD&lt;/color&gt;&lt;!--石蓝色 --&gt;    &lt;color name="dimgray"&gt;#696969&lt;/color&gt;&lt;!--暗灰色 --&gt;    &lt;color name="dimgrey"&gt;#696969&lt;/color&gt;&lt;!--暗灰色 --&gt;    &lt;color name="mediumaquamarine"&gt;#66CDAA&lt;/color&gt;&lt;!--中绿色--&gt;    &lt;color name="cornflowerblue"&gt;#6495ED&lt;/color&gt;&lt;!--菊兰色 --&gt;    &lt;color name="cadetblue"&gt;#5F9EA0&lt;/color&gt;&lt;!--军兰色 --&gt;    &lt;color name="darkolivegreen"&gt;#556B2F&lt;/color&gt;&lt;!--暗橄榄绿 --&gt;    &lt;color name="indigo"&gt;#4B0082&lt;/color&gt;&lt;!--靛青色 --&gt;    &lt;color name="mediumturquoise"&gt;#48D1CC&lt;/color&gt;&lt;!--中绿宝石--&gt;    &lt;color name="darkslateblue"&gt;#483D8B&lt;/color&gt;&lt;!--暗灰蓝色 --&gt;    &lt;color name="steelblue"&gt;#4682B4&lt;/color&gt;&lt;!--钢兰色 --&gt;    &lt;color name="royalblue"&gt;#4169E1&lt;/color&gt;&lt;!--皇家蓝 --&gt;    &lt;color name="turquoise"&gt;#40E0D0&lt;/color&gt;&lt;!--青绿色 --&gt;    &lt;color name="mediumseagreen"&gt;#3CB371&lt;/color&gt;&lt;!--中海蓝 --&gt;    &lt;color name="limegreen"&gt;#32CD32&lt;/color&gt;&lt;!--橙绿色 --&gt;    &lt;color name="darkslategray"&gt;#2F4F4F&lt;/color&gt;&lt;!--暗瓦灰色 --&gt;    &lt;color name="darkslategrey"&gt;#2F4F4F&lt;/color&gt;&lt;!--暗瓦灰色 --&gt;    &lt;color name="seagreen"&gt;#2E8B57&lt;/color&gt;&lt;!--海绿色 --&gt;    &lt;color name="forestgreen"&gt;#228B22&lt;/color&gt;&lt;!--森林绿 --&gt;    &lt;color name="lightseagreen"&gt;#20B2AA&lt;/color&gt;&lt;!--亮海蓝色 --&gt;    &lt;color name="dodgerblue"&gt;#1E90FF&lt;/color&gt;&lt;!--闪兰色 --&gt;    &lt;color name="midnightblue"&gt;#191970&lt;/color&gt;&lt;!--中灰兰色 --&gt;    &lt;color name="aqua"&gt;#00FFFF&lt;/color&gt;&lt;!--浅绿色 --&gt;    &lt;color name="cyan"&gt;#00FFFF&lt;/color&gt;&lt;!--青色 --&gt;    &lt;color name="springgreen"&gt;#00FF7F&lt;/color&gt;&lt;!--春绿色 --&gt;    &lt;color name="lime"&gt;#00FF00&lt;/color&gt;&lt;!--酸橙色 --&gt;    &lt;color name="mediumspringgreen"&gt;#00FA9A&lt;/color&gt;&lt;!--中春绿色 --&gt;    &lt;color name="darkturquoise"&gt;#00CED1&lt;/color&gt;&lt;!--暗宝石绿 --&gt;    &lt;color name="deepskyblue"&gt;#00BFFF&lt;/color&gt;&lt;!--深天蓝色 --&gt;    &lt;color name="darkcyan"&gt;#008B8B&lt;/color&gt;&lt;!--暗青色 --&gt;    &lt;color name="teal"&gt;#008080&lt;/color&gt;&lt;!--水鸭色 --&gt;    &lt;color name="green"&gt;#008000&lt;/color&gt;&lt;!--绿色 --&gt;    &lt;color name="darkgreen"&gt;#006400&lt;/color&gt;&lt;!--暗绿色 --&gt;    &lt;color name="blue"&gt;#0000FF&lt;/color&gt;&lt;!--蓝色 --&gt;    &lt;color name="mediumblue"&gt;#0000CD&lt;/color&gt;&lt;!--中兰色 --&gt;    &lt;color name="darkblue"&gt;#00008B&lt;/color&gt;&lt;!--暗蓝色 --&gt;    &lt;color name="navy"&gt;#000080&lt;/color&gt;&lt;!--海军色 --&gt;    &lt;color name="black"&gt;#000000&lt;/color&gt;&lt;!--黑色 --&gt;&lt;/resources&gt;</code></pre><br><br></div><h1>6    结果预览</h1></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code>   <img src="https://img-blog.csdn.net/20130911142250734" alt="">         </code></strong></span></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code>   <img src="https://img-blog.csdn.net/20130911142206437" alt=""></code></strong></span></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code><br></code></strong></span></div><div></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code>   </code></strong></span></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code><br></code></strong></span></div><div><span style="font-family:monospace;font-size:24px;color:#ff0000;"><strong>转载请注明出处！</strong></span></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code><br></code></strong></span></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code><br></code></strong></span></div><div><span style="font-size:10pt;font-family:'Courier New';color:#e79e3c;"><strong><code><br></code></strong></span></div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖11〗】Fragment</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A811_Fragment/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A811_Fragment/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p></p><h2>一  左侧列表展示</h2><p></p><h4>1.1  布局 left_fragment.xml</h4><p></p><pre><code class="language-html">&lt;ListView xmlns:android="http://schemas.android.com/apk/res/android"    android:id="@android:id/list"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:background="@android:color/darker_gray"    android:listSelector="@drawable/onitem_selected_bkcolor"/&gt;</code></pre><p></p><h4>1.2  ListSelector  <span style="color:rgb(255,0,0);">onitem_selected_bkcolor.xml</span></h4><p></p><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;    &lt;item         android:state_window_focused="false"        android:drawable="@android:color/holo_green_dark"/&gt;    &lt;item        android:state_window_focused="true"        android:drawable="@android:color/holo_green_light"/&gt;&lt;/selector&gt;</code></pre><br><h4>1.3  自定义 ListItem 布局 代替  android.R.layout.simple_list_item_1 </h4><p></p><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"    android:layout_width="match_parent"    android:layout_height="30dp"    android:gravity="center_vertical"    android:paddingLeft="10dp"    android:textColor="@android:color/black"/&gt;</code></pre><br><h4>1.4  自定义 LeftFragment</h4><p></p><pre><code class="language-java">package com.example.myfragments;import android.app.Activity;import android.app.ListFragment;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ListView;//自定义回调函数interface onItemSeletedListener{    public void onItemSeleted(int position); }public class LeftFragment extends ListFragment {    onItemSeletedListener mCallback;        String[] data = {"item0","item1","item2","item3","item4","item5","item6","item7","item8","item9","item10","item11","item12","item13","item14","item15","item16"};         @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,            Bundle savedInstanceState) {        // TODO 自动生成的方法存根        return inflater.inflate(R.layout.left_fragment, container,false);    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        // TODO 自动生成的方法存根        setListAdapter(new ArrayAdapter&lt;String&gt;(getActivity(),                     R.layout.listitem, data));         super.onActivityCreated(savedInstanceState);    }    @Override    public void onListItemClick(ListView l, View v, int position, long id) {        // TODO 自动生成的方法存根        mCallback.onItemSeleted(position);            }        @Override    public void onAttach(Activity activity) {        // TODO 自动生成的方法存根        super.onAttach(activity);        // This makes sure that the container activity has implemented          // the callback interface. If not, it throws an exception          try {              mCallback = (onItemSeletedListener) activity;          } catch (ClassCastException e) {              throw new ClassCastException("必须实现 onItemSeletedListener");        }      }}</code></pre><br><h2>二  右侧内容展示</h2><h4>2.1  布局 right_fragment.xml  </h4><p></p><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:background="@android:color/background_dark"    android:orientation="vertical"    tools:ignore="HardcodedText,UselessParent" &gt;    &lt;ScrollView         android:scrollbars="vertical"        android:layout_width="match_parent"        android:layout_height="match_parent"&gt;        &lt;TextView            android:id="@+id/textview"            android:layout_width="match_parent"            android:layout_height="wrap_content"            android:text="请选择左侧边栏 :)"            android:textColor="@android:color/holo_orange_dark"            android:textSize="30sp" /&gt;    &lt;/ScrollView&gt;&lt;/LinearLayout&gt;</code></pre><br><h4>2.1  自定义 RightFragment    </h4><p></p><pre><code class="language-java">package com.example.myfragments;import android.app.Fragment;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;public class RightFragment extends Fragment {    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,            Bundle savedInstanceState) {        // TODO 自动生成的方法存根        return inflater.inflate(R.layout.right_fragment, container,false);    }        //更新数据    public void update(int position)    {        TextView textview=(TextView)getActivity().findViewById(R.id.textview);        textview.setText("您选择了：" + String.valueOf(position)+"\n--------------"                +"\n大江东去浪淘尽，\n千古风流人物，\n故垒西边，\n人道是，\n三国周郎赤壁，\n乱石穿空，\n惊涛拍岸，\n卷起千堆雪，\n江山如画，\n一时多少豪杰。"                +"\n遥想公瑾当年，\n小乔初嫁了，\n雄姿英发，\n羽扇纶巾，\n谈笑间，\n樯橹灰飞烟灭，\n故国神游，\n多情应笑我，\n早生华发，\n人间如梦，\n一樽还酹江月。");    }}</code></pre><br><h2>三  添加到 main_layout.xml 中，附着于 Activity 显示</h2><h4>3.1  布局 main_layout.xml</h4><p></p><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:orientation="horizontal"    tools:ignore="DisableBaselineAlignment" &gt;    &lt;fragment        android:id="@+id/left_fragment"        android:name="com.example.myfragments.LeftFragment"        android:layout_width="70dp"        android:layout_height="match_parent"/&gt;    &lt;View         android:layout_width="2dp"        android:layout_height="match_parent"        android:background="@android:color/background_dark"/&gt;    &lt;fragment        android:id="@+id/right_fragment"        android:name="com.example.myfragments.RightFragment"        android:layout_width="wrap_content"        android:layout_height="match_parent"/&gt;&lt;/LinearLayout&gt;</code></pre><br><h4>3.2  MainActivity</h4><p></p><pre><code class="language-java">package com.example.myfragments;import android.app.Activity;import android.os.Bundle;import android.view.Window;import android.view.WindowManager;public class MainActivity extends Activity implements onItemSeletedListener{    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);           requestWindowFeature(Window.FEATURE_NO_TITLE);           setContentView(R.layout.main_layout);             //        //添加//        FragmentManager fragmentmanager=getFragmentManager();//        FragmentTransaction fragmenttransaction=fragmentmanager.beginTransaction();//        LeftFragment leftfragment=new LeftFragment();//        fragmenttransaction.add(R.id.left_fragment, leftfragment);//        fragmenttransaction.commit();//        //删除//        FragmentManager fragmentmanager=getFragmentManager();//        FragmentTransaction fragmenttransaction=fragmentmanager.beginTransaction();//        Fragment leftfragment=fragmentmanager.findFragmentById(R.id.left_fragment);//        fragmenttransaction.remove(leftfragment);//        fragmenttransaction.commit();//        //替换//        FragmentManager fragmentmanager=getFragmentManager();//        FragmentTransaction fragmenttransaction=fragmentmanager.beginTransaction();//        fragmenttransaction.replace(R.id.left_fragment, new LeftFragment());//        fragmenttransaction.commit();    }    @Override    public void onItemSeleted(int position) {        RightFragment rightFragment=(RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);                if(rightFragment != null)            rightFragment.update(position);    }}</code></pre> <br><h2>四  结果展示</h2><div><br></div><div><span></span>      <img src="https://img-blog.csdn.net/20130909145229984" alt=""></div><div> </div><div>    </div><div><span style="font-size:18px;color:rgb(255,0,0);"><u><strong>转载请注明出处 :)</strong></u></span></div><div><br></div><div><br></div><div> </div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖7〗】SurfaceView坦克大战之世界地图</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A87_SurfaceView%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E4%B9%8B%E4%B8%96%E7%95%8C%E5%9C%B0%E5%9B%BE/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A87_SurfaceView%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E4%B9%8B%E4%B8%96%E7%95%8C%E5%9C%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1  自定义 SurfaceView</h1><p>WarView.java  (世界战场)           </p><pre><code class="language-java">package com.mytank;import java.util.Vector;import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Paint.Style;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;public class WarView extends SurfaceView implements SurfaceHolder.Callback {    SurfaceHolder mholder;    boolean run_flag;    Canvas canvas;    DrawThread thread;        Vector&lt;Wall&gt;walllist=new Vector&lt;Wall&gt;();        int row;//行    int col;//列    int warmap[][];        float x=10,y=10;        public WarView(Context context, AttributeSet attrs) {        super(context, attrs);        mholder=this.getHolder();                if(mholder!=null)            mholder.addCallback(this);    }        //初始化地图    public void initmap()    {        //0 空， 1 墙        for(int i=0;i&lt;col;i++)        {            warmap[0][i]=1;            warmap[1][i]=1;            Wall wall=new Wall(0,i);            walllist.add(wall);            wall=new Wall(1,i);            walllist.add(wall);        }        for(int i=0;i&lt;10;i++)        {            warmap[i][10]=1;            warmap[i][11]=1;            Wall wall=new Wall(i,10);            walllist.add(wall);            wall=new Wall(i,11);            walllist.add(wall);        }    }    @Override    public void surfaceCreated(SurfaceHolder holder) {        run_flag=true;        row=this.getHeight()/Common.CELL_LENGTH;        col=this.getWidth()/Common.CELL_LENGTH;        warmap=new int[row][col];        thread=new DrawThread();        initmap();        thread.start();    }        @Override    public boolean onTouchEvent(MotionEvent event) {        // TODO 自动生成的方法存根        x=event.getX();        y=event.getY();                        /*  备注:  一定要将return super.onTouchEvent(event)修改为return true         *  原因：          *        1: 父类的onTouchEvent(event)方法没有做任何处理，并且返回了false。;         *        2: 一旦返回false，将不再收到 MotionEvent.ACTION_MOVE 及 MotionEvent.ACTION_UP 事件;         */        return true;    }     //自定义 界面绘制 线程    class DrawThread extends Thread    {        @Override        public void run() {                        //画刷            Paint paint=new Paint();            paint.setStyle(Style.FILL);            paint.setColor(Color.rgb(255, 0, 0));    //红绿蓝                        Paint bkpaint=new Paint();            bkpaint.setStyle(Style.FILL);            //设置填充方式            bkpaint.setColor(Color.rgb(2,17,17));    //红绿蓝                        while(run_flag)            {                //锁定画布                canvas=mholder.lockCanvas();                if (canvas == null)                    continue;                                //绘制背景                canvas.drawRect(0, 0, Common.CELL_LENGTH*col, Common.CELL_LENGTH*row, bkpaint);                                //绘制手势跟踪                canvas.drawCircle(x, y, 15, paint);                                //绘制墙壁                for(int i=0;i&lt;walllist.size();i++)                    walllist.get(i).Draw(canvas);                                //取消锁定                mholder.unlockCanvasAndPost(canvas);            }        }    }        @Override    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {    }    @Override    public void surfaceDestroyed(SurfaceHolder holder) {        run_flag=false;        //关闭界面绘制线程    }}</code></pre><p></p><h1>2  在布局中使用自定义的 WarView</h1><p>main_layout.xml</p><p></p><pre><code class="language-html">&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"    android:layout_width="match_parent"    android:layout_height="match_parent"&gt;    &lt;com.mytank.WarView        android:layout_width="match_parent"        android:layout_height="match_parent"/&gt;&lt;/FrameLayout&gt;</code></pre><p></p><h1>3  封装的 墙块类</h1><p>Wall.java</p><p></p><pre><code class="language-java">package com.mytank;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Rect;import android.graphics.Paint.Style;/** * @author michael.mao * @description 封装的 墙块类，包含自绘制方法 */public class Wall {        public int mrow;    //该墙壁所在行    public int mcol;    Paint inPaint;        //墙壁内边框画刷    Paint outPaint;    Rect inRect;    Rect outRect;        public Wall(int row, int col)    {        this.mrow=row;        this.mcol=col;                inPaint=new Paint();        inPaint=new Paint();        inPaint.setStyle(Style.FILL);        inPaint .setColor(Color.rgb(86, 53, 35));//红绿蓝                outPaint=new Paint();        outPaint=new Paint();        outPaint.setStyle(Style.STROKE);        outPaint.setColor(Color.rgb(98, 98, 98));                inRect=new Rect( mcol*Common.CELL_LENGTH+1,mrow*Common.CELL_LENGTH+1,                       ( mcol+1)*Common.CELL_LENGTH-1,(mrow+1)*Common.CELL_LENGTH-1);        outRect=new Rect( mcol*Common.CELL_LENGTH,mrow*Common.CELL_LENGTH,                        ( mcol+1)*Common.CELL_LENGTH,(mrow+1)*Common.CELL_LENGTH);    }        public void Draw(Canvas canvas)    {        canvas.drawRect(inRect,inPaint);        canvas.drawRect(outRect,outPaint);    }}</code></pre><br><p></p><h1>4  常量值</h1><p>Common.java</p><p></p><pre><code class="language-java">package com.mytank;public class Common {    public static int CELL_LENGTH=10;    //块宽    战场被分成 M行 N 列, CELL_LENGTH==行高==列宽}</code></pre><p></p><h1>5  主类</h1><div dir="ltr">MainActivity.java</div><div dir="ltr"><pre><code class="language-java">package com.mytank;import android.os.Bundle;import android.app.Activity;public class MainActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.main_layout);    }}</code></pre></div><h1>6    结果展示</h1><div> </div><div><div>             <img src="https://img-blog.csdn.net/20130913152228015" alt="" width="368" height="319"></div></div><div>             <img src="https://img-blog.csdn.net/20131027162839640" width="240" height="427" alt=""></div><div><br></div><div><br></div><div><br></div><div><span style="font-size:18px;color:#ff0000;"><strong><u>转载请注明出处 :)</u></strong></span></div><div><br></div><div><br></div><div><br></div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖12〗】滑动菜单SlidingMenu</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A812_%E6%BB%91%E5%8A%A8%E8%8F%9C%E5%8D%95SlidingMenu/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A812_%E6%BB%91%E5%8A%A8%E8%8F%9C%E5%8D%95SlidingMenu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><strong><span style="font-size:18px;">注：本篇文章基于我以前发表的文章 <a href="http://blog.csdn.net/mkrcpp/article/details/11478011" rel="noopener" target="_blank"><span style="color:#ff0000;">Android 之 Fragment</span></a> 之上，稍作修改即可达到 炫酷的 滑动效果 :)</span></strong></p><p></p><div><span style="background-color:#c7edcc;"></span> </div><div><span style="color:#ff0000;background-color:#c7edcc;"><strong><u>具体步骤如下:</u></strong></span></div><h1>NO.1:    新建一个 内容布局，用于显示文章</h1><div>            <span style="background-color:#c7edcc;">之所以要新建一个而不是用 right_fragment.xml  是因为 RightFragment 需要被实例化啊，哈哈，这是个重点哦。</span></div><div><span style="background-color:#c7edcc;">            因为我们已不再使用之前的 main_layout.xml 了。</span></div><div>            <span style="background-color:#c7edcc;">contentlayout.xml</span></div><div><span style="background-color:#c7edcc;"></span><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;fragment xmlns:android="http://schemas.android.com/apk/res/android"    android:id="@+id/right_fragment"    android:name="com.example.myfragments.RightFragment"    android:layout_width="match_parent"    android:layout_height="match_parent"/&gt;</code></pre></div><h1>NO.2:    新建一个 菜单布局，用于显示菜单</h1><div>            <span style="background-color:#c7edcc;">原因与第一步的原因相同 :)</span></div><div>            <span style="background-color:#c7edcc;">menulayout.xml</span></div><div><span style="background-color:#c7edcc;"></span><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;fragment xmlns:android="http://schemas.android.com/apk/res/android"    android:id="@+id/left_fragment"    android:name="com.example.myfragments.LeftFragment"    android:layout_width="match_parent"    android:layout_height="match_parent"/&gt;</code></pre></div><h1>NO.3:    下载并安装 SlidingMenu</h1><div>            下载地址 <a href="https://github.com/jfeinstein10/SlidingMenu" rel="noopener" target="_blank">https://github.com/jfeinstein10/SlidingMenu</a> </div><div><span></span>    打开 Eclipse ，将 SlidingMenu 导入。<br></div><div>            <img src="https://img-blog.csdn.net/20130924172748015" alt=""></div><div>            <img src="https://img-blog.csdn.net/20130924172823500" alt=""></div><div><span></span>    <img src="https://img-blog.csdn.net/20130924172828937" alt=""></div><div><span></span>    </div><div>            设置 项目 library 的属性，勾选 Is Library 。</div><div>            <img src="https://img-blog.csdn.net/20130924172946890" alt=""></div><div>            </div><div>            在自己的项目中引用 library 库，我的项目为 MyFragments</div><div>            <img src="https://img-blog.csdn.net/20130924172937390" alt=""></div><div>            <img src="https://img-blog.csdn.net/20130924173043187" alt=""></div><div>            <img src="https://img-blog.csdn.net/20130924173115390" alt=""></div><div>            </div><div> </div><div>            由于 SlidingMenu 自带了 android-support-v4.jar，所以需要将自己项目中原有的 android-support-v4.jar 删掉。</div><div>            成功导入后的截图为:</div><div>            <img src="https://img-blog.csdn.net/20130924173121328" alt=""></div><div>            ok，至此 SlidingMenu 已经成功引入，下面就开始使用吧 :)</div><div> </div><h1>NO.4:    使用 SlidingMenu</h1><div>            只需要将 原 MainActivity.java 改写成如下代码即可</div><div><pre><code class="language-java">package com.example.myfragments;import android.app.Activity;import android.os.Bundle;import android.view.Window;import android.view.WindowManager;import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;public class MainActivity extends Activity implements onItemSeletedListener{    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);           requestWindowFeature(Window.FEATURE_NO_TITLE);                   //开始设置滑动菜单        setContentView(R.layout.contentlayout);                     //设置正文的显示布局        //-------------------------------------------------------------------------------------        //NO.1    继承 SlidingActivity 方式        //setBehindContentView(R.layout.menulayout);                //设置左侧菜单的布局        //SlidingMenu menu = getSlidingMenu();        //-------------------------------------------------------------------------------------        //NO.2    非继承 SlidingActivity 方式        SlidingMenu menu = new SlidingMenu(this);        menu.attachToActivity(this, SlidingMenu.SLIDING_CONTENT);        menu.setMenu(R.layout.menulayout);                            //添加菜单        //-------------------------------------------------------------------------------------                        menu.setMode(SlidingMenu.LEFT);                                //设置菜单位置        menu.setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);        //设置菜单打开方式                                                                    //TOUCHMODE_FULLSCREEN     全屏模式                                                                    //TOUCHMODE_MARGIN         边缘模式                                                                    //TOUCHMODE_NONE         不能通过手势打开                        menu.setShadowWidth(12);                                    //设置渐变效果宽度    位于菜单 与 内容 之间        menu.setShadowDrawable(R.drawable.shadow);                    //设置菜单渐变效果        menu.setFadeDegree(0.9f);                                    //设置淡入程度       当滑出菜单时，渐变效果由0.9 - 0 淡入         menu.setBehindOffset(250);                                    //设置菜单滑出后 距离屏幕右边的长度(直接设置 dp)        //-------------------------------------------------------------------------------------        //设置结束                                                //Fragment 一些代码增删改        //添加        //FragmentManager fragmentmanager=getFragmentManager();        //FragmentTransaction fragmenttransaction=fragmentmanager.beginTransaction();        //LeftFragment leftfragment=new LeftFragment();        //fragmenttransaction.add(R.id.left_fragment, leftfragment);        //fragmenttransaction.commit();        //删除        //FragmentManager fragmentmanager=getFragmentManager();        //FragmentTransaction fragmenttransaction=fragmentmanager.beginTransaction();        //Fragment leftfragment=fragmentmanager.findFragmentById(R.id.left_fragment);        //fragmenttransaction.remove(leftfragment);        //fragmenttransaction.commit();        //替换        //FragmentManager fragmentmanager=getFragmentManager();        //FragmentTransaction fragmenttransaction=fragmentmanager.beginTransaction();        //fragmenttransaction.replace(R.id.left_fragment, new LeftFragment());        //fragmenttransaction.commit();    }    @Override    public void onItemSeleted(int position) {        RightFragment rightFragment=(RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);                if(rightFragment != null)            rightFragment.update(position);    }}</code></pre></div><br><div>        上述代码中用到的 渐变设置为 R.drawable.shadow   该配置文件用到的颜色值见 文章  <a href="http://blog.csdn.net/mkrcpp/article/details/11563083" rel="noopener" target="_blank">Android ListView 之 SimpleAdapter 二 (包含 item 中按钮监听)</a> 中 第五节 color.xml 颜色值。</div><div><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;    &lt;gradient        android:endColor="@color/darkblue"        android:centerColor="@color/darkgray"        android:startColor="@color/black" /&gt;&lt;/shape&gt;</code></pre></div><h1>NO.5:    滑动菜单效果展示</h1><div>        <img src="https://img-blog.csdn.net/20130924173158859" alt=""></div><div>        注意此处的渐变淡入效果</div><div>        <img src="https://img-blog.csdn.net/20130924173209000" alt=""></div><div>        渐变效果为 由 黑色-深灰色-深蓝色 渐变。</div><div>        <img src="https://img-blog.csdn.net/20130924173248656" alt=""></div><div>        </div><br><p></p><p><br></p><p><span style="font-size:18px;color:#ff0000;"><strong><u>注：转载请注明出处 :)   毕竟代码是一个一个敲出来的啊，O(∩_∩)O~</u></strong></span></p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖5〗】四大组件之BroadcastReceiver</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A85_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BBroadcastReceiver/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A85_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BBroadcastReceiver/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>0  简介</h1><div><div>       BroadcastReceiver也就是“广播接收者”的意思，顾名思义，它就是用来接收来自系统和应用中的 </div><div>广播。</div><div>       在Android系统中，广播体现在方方面面，例如当开机完成后系统会产生一条广播，接收到这条广播 </div><div>就能实现开机启动服务的功能；当网络状态改变时系统会产生一条广播，接收到这条广播就能及时地做出提 </div><div>示和保存数据等操作；当电池电量改变时，系统会产生一条广播，接收到这条广播就能在电量低时告知用户 </div><div>及时保存进度，等等。</div><div>       Android中的广播机制设计的非常出色，很多事情原本需要开发者亲自操作的，现在只需等待广播告 </div><div>知自己就可以了，大大减少了开发的工作量和开发周期。</div><div><hr></div></div><h1>1  普通广播</h1><div><div>       普通广播对于多个接收者来说是完全异步的，通常每个接收者都无需等待即可以接收到广播，接收者相互之 </div><div>间不会有影响。对于这种广播，接收者无法终止广播，即无法阻止其他接收者的接收动作。</div><div><span style="color:#ff0000;"><strong>动态接收器高优先级 &gt; 动态接收器低优先级 &gt; 静态接收器高优先级 &gt; 静态接收器低优先级</strong></span></div><div> </div></div><h3>    1.1 自定义广播 MyReceiver.java</h3><div><pre><code class="language-java">package com.broadcastreceiver;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.widget.Toast;public class MyReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        // TODO 自动生成的方法存根        Toast.makeText(context, intent.getAction()+intent.getStringExtra("message"), Toast.LENGTH_SHORT).show();    }}</code></pre><br><br></div><h3>    1.2 注册广播</h3><div><pre><code class="language-html">&lt;receiver android:name="com.broadcastreceiver.MyReceiver"&gt;    &lt;intent-filter &gt;        &lt;action android:name="michael.FIRSTRECEIVER"/&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><br></div><h3>    1.3 发送广播</h3><div><pre><code class="language-java">package com.broadcastreceiver;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;public class MainActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);                Button btn_send=(Button)findViewById(R.id.btn_send);        btn_send.setOnClickListener(new OnClickListener() {                        @Override            public void onClick(View v) {                Intent intent=new Intent();                intent.setAction("michael.FIRSTRECEIVER");                intent.putExtra("message", "我是神奇的广播消息！");                sendBroadcast(intent);            }        });    }}</code></pre><br><br></div><h1>2  有序广播</h1><div><div>       有序广播比较特殊，它每次只发送到优先级较高的接收者那里，然后由优先级高的接受者再传播到优先级低 </div><div>的接收者那里，优先级高的接收者有能力终止这个广播</div><div><strong><span style="color:#ff0000;">如果静态接收器的优先级高于动态接收器的优先级，那么还是静态接收器先接收到广播（比如接收短信）</span></strong></div><div> </div></div><h3>    2.1 在前一节的基础上再新建个 广播 YourReceiver.java</h3><div><pre><code class="language-java">package com.broadcastreceiver;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.widget.Toast;public class YourReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Bundle bundle=getResultExtras(true);        String first=bundle.getString("first");        Toast.makeText(context, "上一个接收器转播的数据为："+first, Toast.LENGTH_LONG).show();    }}</code></pre><br><br></div><div>   <strong> <span style="font-size:12px;">2.2 代码注册广播</span></strong></div><div><br></div><div><pre><code class="language-java">package com.broadcastreceiver;import android.app.Activity;import android.content.Intent;import android.content.IntentFilter;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;public class MainActivity extends Activity {    YourReceiver yourreceiver=null;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);                yourreceiver=new YourReceiver();        Button btn_send=(Button)findViewById(R.id.btn_send);        btn_send.setOnClickListener(new OnClickListener() {                        @Override            public void onClick(View v) {                Intent intent=new Intent();                intent.setAction("michael.FIRSTRECEIVER");                intent.putExtra("message", "我是神奇的广播消息！");                sendBroadcast(intent);            }        });                //代码动态注册广播        IntentFilter filter=new IntentFilter();        filter.addAction("michael.FIRSTRECEIVER");        filter.setPriority(10);        registerReceiver(yourreceiver, filter);    }    @Override    protected void onDestroy() {        //程序退出前取消注册广播        unregisterReceiver(yourreceiver);        super.onDestroy();    }}</code></pre><br></div><div><strong>广播的发送不局限于当前应用程序，其它程序发送广播的话也可接收到。</strong></div><h1><span style="color:rgb(255,0,0);">2.3  接收优先级</span></h1><div><div>       静态接收器优先级低于动态接收器，也就是说，无论多么高级别的静态接收器和多么低级别的动态接收器都 </div><div>接收同一广播，永远都是动态接收器先接收到(相对于普通广播)</div><div>       动态接收器也可以设置优先级，高优先级的接收器会在低优先级的接收器之前接收到广播，同样优先级的动 </div><div>态接收器,谁先注册到系统，谁就抢先接收到广播。</div><div> </div><div><strong><span style="color:#ff0000;"><u>举例：</u></span></strong></div><div><div>假设有如下优先级的5个接收器</div><div>1.动态A（优先级=1）</div><div>2.动态B（优先级=2）</div><div>3.动态C（优先级=2）</div><div>4.静态D（优先级=1）</div><div>5.静态E（优先级=2）并且B先于C注册</div><div> </div><div><strong>普通广播接收的顺序</strong></div><div><strong>B C A E D    (动态接收器高优先级 &gt; 动态接收器低优先级 &gt; 静态接收器高优先级 &gt; 静态接收器低优先级 )</strong></div><div><strong>有序广播接收的顺序</strong></div><div><strong>B C E A D    (如果静态接收器的优先级高于动态接收器的优先级，那么还是静态接收器先接收到广播)</strong></div><div> </div></div></div><div>这是在一片博客上看到的图，忘记原创地址了，罪过啊</div><div><br></div><div> </div><div> <img src="https://img-blog.csdn.net/20130924224724921" alt=""></div><div> </div><div> </div><div> </div><div><strong> <span style="color:rgb(255,0,0);font-family:Arial;font-size:17.77777862548828px;line-height:25.98958396911621px;"><u>注：转载请注明出处 :)   毕竟代码是一个一个敲出来的啊，O(∩_∩)O~</u></span></strong></div><div> </div><div> </div><div> </div><div> </div><div> </div><div> </div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖4〗】四大组件之Service</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A84_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A84_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1  生命周期图</h1><div></div><div> <img src="https://img-blog.csdn.net/20130924230320328" alt=""></div><h1>2 第一种 非绑定方式 startService</h1><h2>2.1 自定义 Service</h2><div><pre><code class="language-java">package com.demoservice;import android.app.Service;import android.content.Intent;import android.media.MediaPlayer;import android.os.Binder;import android.os.IBinder;import android.util.Log;public class FirstService extends Service {    MediaPlayer mplayer;    Binder binder=new Binder();    @Override    public IBinder onBind(Intent intent) {        // TODO 自动生成的方法存根        return binder;    }    @Override    public void onCreate() {        // TODO 自动生成的方法存根        super.onCreate();        mplayer=MediaPlayer.create(this, R.raw.music12);        Log.i("demo", "onCreate");    }    @Override    public int onStartCommand(Intent intent, int flags, int startId) {        // TODO 自动生成的方法存根        Log.i("demo", "onStartCommand");        mplayer.start();        return super.onStartCommand(intent, flags, startId);    }    @Override    public void onDestroy() {        // TODO 自动生成的方法存根        Log.i("demo", "onDestroy");        mplayer.stop();        super.onDestroy();    }}</code></pre><br><h2>2.2 注册 Service</h2></div><p></p><pre><code class="language-html">&lt;service    android:name="com.demoservice.FirstService"&gt;    &lt;intent-filter &gt;        &lt;action android:name="michael.FIRSTSERVICE"/&gt;    &lt;/intent-filter&gt;&lt;/service&gt;</code></pre><br><h2>2.3 开启/关闭 Service</h2><p></p><p></p><pre><code class="language-java">package com.demoservice;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;public class MainActivity extends Activity {    Button btn_start,btn_stop;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        btn_start=(Button)findViewById(R.id.btn_start);        btn_stop=(Button)findViewById(R.id.btn_stop);                final Intent intent=new Intent();        intent.setAction("michael.FIRSTSERVICE");                OnClickListener listener=new OnClickListener() {                        @Override            public void onClick(View v) {                // TODO 自动生成的方法存根                if(v == btn_start)                {                    startService(intent);                }else if(v==btn_stop)                {                    stopService(intent);                }            }        };            btn_start.setOnClickListener(listener);        btn_stop.setOnClickListener(listener);    }}</code></pre><br><br><p></p><h1>3 第二种 绑定方式 bindService</h1><h2>3.1 自定义 Service</h2><p></p><pre><code class="language-java">package com.SecondService;import com.demoservice.R;import android.app.Service;import android.content.Intent;import android.media.MediaPlayer;import android.os.Binder;import android.os.IBinder;import android.util.Log;public class SecondService extends Service {    int count;    boolean quit=false;    MediaPlayer mplayer;    MyBinder binder=new MyBinder();    @Override    public IBinder onBind(Intent intent) {        // TODO 自动生成的方法存根        Log.i("demo", "onBind");        mplayer.start();                new Thread()        {            @Override            public void run() {                while(!quit)                {                    try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}                    count++;                    Log.i("demo", String.valueOf(count));                }            }        }.start();        return binder;    }    @Override    public boolean onUnbind(Intent intent) {        Log.i("demo", "onUnbind");        quit=true;        return super.onUnbind(intent);    }    @Override    public void onRebind(Intent intent) {        Log.i("demo", "onRebind");        mplayer.start();        super.onRebind(intent);    }    @Override    public void onCreate() {        super.onCreate();        quit=false;        mplayer=MediaPlayer.create(this, R.raw.music12);        Log.i("demo", "onCreate");    }    @Override    public void onDestroy() {        Log.i("demo", "onDestroy");        mplayer.stop();        quit=true;        super.onDestroy();    }        class MyBinder extends Binder    {        public SecondService getService()        {            return SecondService.this;        }        public int getCount()        {            return count;        }    }}</code></pre><br><h2>3.2 注册 Service</h2><p></p><p></p><pre><code class="language-html">&lt;service    android:name="com.SecondService.SecondService"&gt;    &lt;intent-filter &gt;        &lt;action android:name="michael.SECONDSERVICE"/&gt;    &lt;/intent-filter&gt;&lt;/service&gt;</code></pre><br><h2>3.3 绑定/解绑Service</h2><p></p><p></p><pre><code class="language-java">package com.SecondService;import com.demoservice.R;import android.app.Activity;import android.content.ComponentName;import android.content.Intent;import android.content.ServiceConnection;import android.os.Bundle;import android.os.IBinder;import android.util.Log;import android.view.Menu;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;public class MainActivity extends Activity {    SecondService mservice;    ServiceConnection conn=new ServiceConnection() {                @Override        public void onServiceDisconnected(ComponentName name) {            // TODO 自动生成的方法存根            Log.i("demo", "onServiceDisconnected");            mservice=null;        }                @Override        public void onServiceConnected(ComponentName name, IBinder service) {            // TODO 自动生成的方法存根            Log.i("demo", "onServiceConnecteds");            mservice = ((SecondService.MyBinder)service).getService();        }    };        Button btn_start,btn_stop,btn_get;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        btn_start=(Button)findViewById(R.id.btn_start);        btn_get=(Button)findViewById(R.id.btn_get);        btn_stop=(Button)findViewById(R.id.btn_stop);        final Intent intent=new Intent();        intent.setAction("michael.SECONDSERVICE");                OnClickListener listener=new OnClickListener() {                        @Override            public void onClick(View v) {                // TODO 自动生成的方法存根                if(v == btn_start)                {                    bindService(intent, conn, BIND_AUTO_CREATE);                }else if(v==btn_stop)                {                    unbindService(conn);                }else if(v==btn_get)                {                    btn_get.setText(String.valueOf(mservice.binder.getCount()));                }            }        };            btn_start.setOnClickListener(listener);        btn_stop.setOnClickListener(listener);        btn_get.setOnClickListener(listener);    }}</code></pre><p></p><p><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><strong><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u>转载请注明出处!</u></span></strong></span></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖3〗】四大组件之Activity</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A83_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BActivity/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A83_%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BActivity/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1 简介</h1><div>Activity (活动) 即应用程序 显示的 界面。可以通过两种方式 设置显示的内容 1：纯代码方式<span></span>2：xml 布局方式</div><div>无论哪一种方式，都是通过 setContentView 来设置显示的内容。</div><div><br></div><div>使用步骤</div><div>基本上四大组件创建步骤都一样</div><div>1：自定义 组件（Activity）</div><div>2：注册</div><div>3：使用</div><div><br></div><h1>2 生命周期图</h1><div><br></div><p><img src="https://img-blog.csdn.net/20130924222051921" alt=""></p><p><br></p><h1>3  新建一个自定义的Activity</h1><div>index.java</div><div><pre><code class="language-java">package com.demo;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.widget.TextView;public class index extends Activity{    @Override    protected void onCreate(Bundle savedInstanceState) {        // TODO 自动生成的方法存根        super.onCreate(savedInstanceState);        Intent intent=this.getIntent();        TextView text=new TextView(this);        text.setText(intent.getStringExtra("str"));        setContentView(text);//设置显示的内容，这里是代码生成的 TextView 对象    }    @Override    public void onBackPressed() {        // 拦截返回按钮        Intent intent=new Intent();创建 intent 绑定要传送的数据        Bundle bundle=new Bundle();        bundle.putString("s1", "恭喜你跳成功了");        bundle.putString("s2", "然后赶紧回家睡觉吧");        intent.putExtra("bundle", bundle);        setResult(0, intent);//通过 intent 返回数据        this.finish();    }}</code></pre></div><h3></h3><div><h1>4  注册Activity</h1></div><div><span style="font-weight:normal;">AndroidManifest.xml</span></div><div><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"    package="com.myprovider"    android:versionCode="1"    android:versionName="1.0" &gt;    &lt;uses-sdk        android:minSdkVersion="11"        android:targetSdkVersion="18" /&gt;    &lt;application        android:allowBackup="true"        android:icon="@drawable/ic_launcher"        android:label="@string/app_name"        android:theme="@style/AppTheme" &gt;        &lt;activity            android:name="com.myprovider.MainActivity"            android:label="@string/app_name" &gt;            &lt;intent-filter&gt;                &lt;action android:name="android.intent.action.MAIN" /&gt;                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;        &lt;provider            android:name="com.myprovider.MyProvider"            android:authorities="com.michael"            android:exported="true"/&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><br></div><h1>5  MainActivity (主 Activity)</h1><div>MainActivity.java</div><div><pre><code class="language-java">package com.demo; import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;public class MainActivity extends Activity {    EditText edit1;    String str;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);                edit1=(EditText)findViewById(R.id.edit1);        edit1.setText(str);                Button btn=(Button)findViewById(R.id.btn1);        btn.setOnClickListener(new OnClickListener() {                        @Override            public void onClick(View v) {                // TODO 自动生成的方法存根                Intent intent=new Intent();                intent.putExtra("str", "我跳跃成功！哈哈");                intent.setClass(MainActivity.this, index.class);                //startActivity(intent);                startActivityForResult(intent, 0);            }        });    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        // TODO 自动生成的方法存根        super.onActivityResult(requestCode, resultCode, data);        Bundle bundle=data.getBundleExtra("bundle");        edit1.setText(bundle.getString("s1")+bundle.getString("s2"));    }        @Override    protected void onStart() {        // TODO 自动生成的方法存根        super.onStart();        Log.i("demo", "onStart");    }    @Override    protected void onRestart() {        // TODO 自动生成的方法存根        super.onRestart();        Log.i("demo", "onRestart");    }    @Override    protected void onResume() {        // TODO 自动生成的方法存根        super.onResume();        Log.i("demo", "onResume");    }    @Override    protected void onPause() {        // TODO 自动生成的方法存根        super.onPause();        Log.i("demo", "onPause");    }    @Override    protected void onStop() {        // TODO 自动生成的方法存根        super.onStop();        Log.i("demo", "onStop");    }    @Override    protected void onDestroy() {        // TODO 自动生成的方法存根        super.onDestroy();        Log.i("demo", "onDestroy");                str=edit1.getText().toString();    }}</code></pre><br></div><div><br></div><p><span style="color:rgb(255,0,0);font-family:Arial;font-size:17.77777862548828px;line-height:25.98958396911621px;"><u><strong>注：转载请注明出处 :)   毕竟代码是一个一个敲出来的啊，O(∩_∩)O~</strong></u></span><br></p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Django基础入门】Ckeditor Wins7下图片上传及显示的路径问题</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_Ckeditor_Wins7%E4%B8%8B%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%98%BE%E7%A4%BA%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_Ckeditor_Wins7%E4%B8%8B%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%98%BE%E7%A4%BA%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>1：在 virtualenv 库里 安装 django-ckeditor<br><br></p><p>      F:\workspace\fx_lib 是我的 第三方库的路径，也可用  pip install django-ckeditor<strong> </strong>进行安装<span></span></p><p></p><pre><code class="language-python">pypm -E F:\workspace\fx_lib install django-ckeditor</code></pre><br><p>2：设置 settings.py</p><p></p><pre><code class="language-python">CKEDITOR_MEDIA_PREFIX="/site_media/media/ckeditor/"CKEDITOR_UPLOAD_PATH = os.path.join(PROJECT_ROOT,"site_media" , "media/uploads").replace("\\",'/')CKEDITOR_UPLOAD_PREFIX=os.path.join(PROJECT_ROOT,"/site_media/media/uploads").replace("/","\\")CKEDITOR_CONFIGS = {    'default': {        'toolbar':[                    ['Source','-','Save','NewPage','Preview','-','Templates'],                    ['Cut','Copy','Paste','PasteText','PasteFromWord','-','Print','SpellChecker','Scayt'],                    ['Undo','Redo','-','Find','Replace','-','SelectAll','RemoveFormat'],                    ['Form','Checkbox','Radio','TextField','Textarea','Select','Button', 'ImageButton','HiddenField'],             ['Bold','Italic','Underline','Strike','-','Subscript','Superscript'],                    ['NumberedList','BulletedList','-','Outdent','Indent','Blockquote'],                    ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'],                    ['Link','Unlink','Anchor'],                    ['Image','Flash','Table','HorizontalRule','Smiley','SpecialChar','PageBreak'],                    ['Styles','Format','Font','FontSize'],                    ['TextColor','BGColor'],                    ['Maximize','ShowBlocks','-','About']                ],        'width': 650,        'height': 200,        'toolbarCanCollapse': False,    },}</code></pre><p><br></p><p>3：发布之前部署静态文件</p><p></p><pre><code class="language-python">python manage.py collectstatic</code></pre><p></p><p><br></p><p>4：在 admin 里使用 ckeditor</p><p>models.py</p><p></p><pre><code class="language-python">from ckeditor.fields import RichTextField class Course(models.Model):    coursecontent = RichTextField(verbose_name=_('coursecontent'))</code></pre><br><p>5：在网页中使用 ckeditor</p><p>forms.py</p><p></p><pre><code class="language-python">from ckeditor.widgets import CKEditorWidgetclass AddCourseForm(forms.ModelForm):    coursecontent = forms.CharField(label=_('coursecontent')   ,widget=CKEditorWidget())</code></pre><p>如图：</p><p><img src="http://my.csdn.net/uploads/201207/10/1341884122_4262.jpg" alt="" style="font-family:monospace;background-color:rgb(240,240,240);"></p><p><br></p><p>6：问题</p><p>在 windows 下 会出现 下图 的问题 ，图片能上传 但是不能预览显示 ，查看 图片 的html代码 发现 路劲有问题 </p><p><img src="http://my.csdn.net/uploads/201207/10/1341884434_5440.jpg" alt="" style="font-family:monospace;background-color:rgb(240,240,240);"><br></p><p>研究了好长时间 发现 如下信息：<br><a href="https://github.com/brentrojas/django-ckeditor/commit/ce41e5219c9cd8f4ea1d7d339499ca61bdab7d65" rel="noopener" target="_blank">https://github.com/brentrojas/django-ckeditor/commit/ce41e5219c9cd8f4ea1d7d339499ca61bdab7d65</a><br>原来这是 windows下的bug<br>那么我们只要 在库中做出相应的修改即可<br>如下图：<br></p><p><img src="http://my.csdn.net/uploads/201207/10/1341884685_5863.jpg" alt="" style="font-family:monospace;background-color:rgb(240,240,240);"></p><p>在模板中 去掉 ckeditor 造成的 html 标签：<br>只需要做出如下修改：</p><pre><code class="language-html">{% autoescape off %}{{courseinfo.coursecontent}}{% endautoescape %}</code></pre><p>至此，在django中可以正常使用 ckeditor了。</p><p><br></p><p><span style="font-family:'KaiTi_GB2312';font-size:18px;color:#ff0000;background-color:rgb(255,255,204);">转载请注明出处!</span></p><p><br></p><p><br></p><pre></pre><pre></pre><pre></pre><pre></pre>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖10〗】BaseAdapter中convertView回收的机制</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A810_BaseAdapter%E4%B8%ADconvertView%E5%9B%9E%E6%94%B6%E7%9A%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A810_BaseAdapter%E4%B8%ADconvertView%E5%9B%9E%E6%94%B6%E7%9A%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>以前一直在用BaseAdapter，对于其中的getview方法的重写一直不太清楚。今天终于得以有空来探究它的详细机制。</p><p></p><p></p><h3>下面先讲讲我遇到的几个问题：</h3><strong>一.View getview(int position, View convertview, ViewGroup parent )中的第二个参数是什么含义；<br>二.View的SetTag和getTag方法的用途；</strong><p></p><p><br></p><h3>先来解决第一个问题:</h3><p><em><strong>android SDK中这样讲参数 convertview ：</strong></em></p><p><span style="color:#ff0000;">the old view to reuse, if possible. Note: You should check that this view is non-null and of an appropriate type before using. If it is not possible to convert this view to display the correct data, this method can create a new view.</span></p><p><br>翻译：<br>如果可以的话，这是旧View（这里不便翻译有的人翻成视图）的重用。 建议：在用之前，你应该检查这个View是不是非空，是不是一个合适的类型。<br>如果不可能让这个VIew去显示一个恰当的数据，这个方法会创建一个新的View。</p><p><br></p><p><strong>案例：</strong></p><p>如果我们要做的是一个ListView，在手机上显示的只有那么几条Item，而整个ListView可能有很长，可能是100条<br>甚至是上万条，总不能让这么多条Item都驻留在内存中，所以android为你准备了一套机制，就是Recycler(反复循<br>环器)，他的具体工作原理可以到 <a href="http://www.cnblogs.com/xiaowenji/archive/2010/12/08/1900579.html" rel="noopener" target="_blank">http://www.cnblogs.com/xiaowenji/archive/2010/12/08/1900579.html</a>去看。<br>但是有些地方他没有讲清，所以我再讲一下。先把代码贴出来<br></p><p><strong>布局文件main.xml</strong></p><p><span></span></p><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;  &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"      android:layout_width="fill_parent"      android:layout_height="fill_parent"      android:orientation="vertical" &gt;      &lt;ListView          android:id="@+id/result"          android:layout_width="fill_parent"          android:layout_height="fill_parent"          android:cacheColorHint="#00000000" &gt;  &lt;/ListView&gt;  &lt;/LinearLayout&gt;</code></pre><br><p></p><p>此处注意ListView的 <strong><span style="color:#000099;">android:layout_height </span></strong>属性值为"<strong>fill_paternt</strong>",<span style="color:#ff0000;"><strong>如果为“wrap_content"将会是另一种情况</strong></span></p><p><span style="color:#ff0000;"><strong><br></strong></span></p><p></p><p><strong>adapter的代码 ListViewAdapter.java </strong></p><p style="font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"></p><pre><code class="language-java">class ListViewAdapter extends BaseAdapter  {      private Context mContext;      int i=0;      public ListViewAdapter (Context context)      {          this.mContext=context;      }      @Override      public int getCount()      {          return 30;                    }      @Override      public Object getItem(int position)      {          return position;      }      @Override      public long getItemId(int position)      {          return 0;      }      @Override      public View getView(int position, View convertView, ViewGroup parent)      {          System.out.println("getView " + position + " " + convertView);//调试语句          Holder holder;          if(null==convertView)          {              holder=new Holder();              convertView=LayoutInflater.from(mContext).inflate(R.layout.textview, null); //mContext指的是调用的Activtty              holder.textView=(TextView)convertView.findViewById(R.id.textview);              convertView.setTag(holder);          }          else          {              holder=(Holder)convertView.getTag();          }          holder.textView.setText("position: "+position);          return convertView;               }      class Holder      {          public TextView textView;      }  } </code></pre><br><p></p><p>运行程序之后发现屏幕上显示出的Item的convertview都为空，向下滑动新产生的Item的convetview都不为空。到此为止和上面链接中讲的是一致的，但是如果设置ListView的android:layout_height属性值为“wrap_content</p><p>之后，发现只有第一个Item的convertview为null其他的不为空。</p><p>虽然两种设置不同，结果也不同，但是convertview的机制没有变。</p><p><br></p><p>其实到此为止我们可以总结出 <span style="font-size:24px;"><strong><em><u>convertview的机制</u> </em></strong></span>了，</p><p><br></p><p><span style="font-size:14px;background-color:rgb(255,255,255);"><strong><u><span style="color:#ff0000;">就是在初始显示的时候，每次显示一个item都调用一次getview方法但是每次调用的时候covertview为空（因为还没有旧的view），当显示完了之后。如果屏幕移动了之后，并且导致有些Item（也可以说是view）跑到屏幕外面，此时如果还有新的item需要产生，则这些item显示时调用的getview方法中的convertview参数就不是null，而是那些移出屏幕的view（旧view），我们所要做的就是将需要显示的item填充到这些回收的view（旧view）中去，最后注意convertview为null的不仅仅是初始显示的那些item，还有一些是已经开始移入屏幕但是还没有view被回收的那些item。</span></u></strong></span></p><p><br></p><p>最终我们用亲手写的代码实现了Recycler(反复循环器).</p><p><br></p><p><span style="font-size:24px;"><strong><u>第二个问题 </u></strong></span>其实应该在第一个问题中嵌套来讲，但是为了思路清晰我分开了：</p><p>view的setTag和getTag方法其实很简单，在实际编写代码的时候一个view不仅仅是为了显示一些字符串、图片，有时我们还需要他们携带一些其他的数据以便我们对该view的识别或者其他操作。于是android 的设计者们就创造了setTag(Object)方法来存放一些数据和view绑定，我们可以理解为这个是view 的标签也可以理解为view 作为一个容器存放了一些数据。而这些数据我们也可以通过getTag() 方法来取出来。</p><p>到这里setTag和getTag大家应该已经明白了。再回到上面的话题，</p><p><br></p><p><span style="font-size:14px;"><strong><u><span style="color:#ff0000;">我们通过convertview的setTag方法和getTag方法来将我们要显示的数据来绑定在convertview上。如果convertview 是第一次展示我们就创建新的Holder对象与之绑定，并在最后通过return convertview 返回，去显示；如果convertview 是回收来的那么我们就不必创建新的holder对象，只需要把原来的绑定的holder取出加上新的数据就行了。</span></u></strong></span></p><p><br></p><p>至此我的问题讲完了，你的问题解决了么？</p><div><br></div><div><strong><br></strong></div><div><strong><br></strong></div><div><strong>本篇文章转自 <a href="http://blog.csdn.net/pkxiuluo01/article/details/7380974" rel="noopener" target="_blank"><span style="color:#ff0000;">http://blog.csdn.net/pkxiuluo01/article/details/7380974</span></a></strong></div><div><strong><br></strong></div><div><strong><br></strong></div><div><strong><br></strong></div><div><strong><br></strong></div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖15〗】Shape圆角输入框</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A815_Shape%E5%9C%86%E8%A7%92%E8%BE%93%E5%85%A5%E6%A1%86/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A815_Shape%E5%9C%86%E8%A7%92%E8%BE%93%E5%85%A5%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1 简介</h1><div>本文主要介绍通过 shape 来设置 EditText 的圆角。</div><div> </div><h1>2 shape 的设置</h1><div> </div><p>shape_life_search.xml <strong>放在 res/drawable 文件夹内</strong></p><p></p><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;    &lt;!-- 角度 --&gt;    &lt;corners android:radius="100dp"/&gt;    &lt;!-- 填充色 --&gt;    &lt;solid android:color="#ffffff"/&gt;    &lt;!-- 描边 设置线宽及颜色 --&gt;    &lt;stroke android:color="#cccacb"        android:width="1dp"/&gt;&lt;/shape&gt;</code></pre><br><br><p></p><div><span style="font-size:10pt;font-family:'Courier New';color:#008080;"><code></code></span></div><h1>3 shape 的使用</h1><div> </div><div>在 activity_main.xml 主布局中如此使用</div><div><br></div><div><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:orientation="vertical"    android:background="#f5f5f5"    tools:ignore="HardcodedText,ContentDescription" &gt;        &lt;!-- Head start --&gt;    &lt;LinearLayout        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:orientation="horizontal"        android:padding="10dp"        android:background="#ff5a54"&gt;        &lt;ImageView            android:layout_width="wrap_content"            android:layout_height="match_parent"            android:src="@drawable/head_left" /&gt;        &lt;TextView            android:layout_width="0dp"            android:layout_height="match_parent"            android:layout_weight="1"            android:gravity="center"            android:text="周边生活"            android:textStyle="bold"            android:textSize="20sp"            android:textColor="@android:color/white"/&gt;        &lt;ImageView            android:layout_width="wrap_content"            android:layout_height="match_parent"            android:src="@drawable/head_right" /&gt;    &lt;/LinearLayout&gt;    &lt;!-- Head end   --&gt;    &lt;!-- Search start--&gt;    &lt;LinearLayout        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:orientation="vertical"         android:layout_margin="10dp"&gt;        &lt;EditText            android:id="@+id/search_edit"            android:layout_width="match_parent"            android:layout_height="wrap_content"            android:drawableLeft="@drawable/search_left"              android:background="@drawable/shape_life_search"              android:hint="请输入商户或地址"            android:padding="10dp"            android:textColorHint="#b7b7b7"            android:textStyle="bold"/&gt;    &lt;/LinearLayout&gt;    &lt;!-- Search end  --&gt;    &lt;LinearLayout        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:orientation="vertical" &gt;        &lt;ImageView            android:layout_width="match_parent"            android:layout_height="match_parent" /&gt;    &lt;/LinearLayout&gt;&lt;/LinearLayout&gt;</code></pre><br><br></div><h1>4 用到的资源</h1><div> </div><div>head_left.png</div><div><img src="https://img-blog.csdn.net/20130926084900312" alt=""><br></div><div><div></div></div><div>head_right.png</div><div><img src="https://img-blog.csdn.net/20130926084952109" alt=""><br></div><div><div></div></div><div>search_left.png</div><div><img src="https://img-blog.csdn.net/20130926084910609" alt=""><br></div><div><div></div><div> </div></div><div> </div><h1>5 隐藏标题栏</h1><div> <pre><code class="language-java">package com.ui;import android.app.Activity;import android.os.Bundle;import android.view.Window;public class MainActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);                //隐藏应用程序标题栏    (能看到手机通知栏)         requestWindowFeature(Window.FEATURE_NO_TITLE);                                                                                     //设置全屏            (手机通知栏也被隐藏)        //this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);                setContentView(R.layout.activity_main);    }}</code></pre><br></div><h1>6 结果预览</h1><div> </div><div><strong><span style="color:#ff0000;">注：在 eclipse 的 layout 布局预览功能中，圆角不是很明显，但是安装到模拟器后就正常显示了，具体原因未知。</span></strong></div><div> </div><div>在 eclipse 中预览结果</div><div></div><div> <img src="https://img-blog.csdn.net/20130926084707343" alt=""></div><div>在模拟器中的结果</div><div></div><div> <img src="https://img-blog.csdn.net/20130926084714546" alt=""></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="font-size:14.44444465637207px;line-height:25.98958396911621px;"><strong> <span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u>注：转载请注明出处 :)   毕竟代码是一个一个敲出来的啊，O(∩_∩)O~</u></span></strong></span></span><br></div><div><br></div><div><br></div><div> </div><div> </div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖18〗】新浪微博项目总结</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A818_%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A818_%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><strong><span style="font-size:14px;">历经</span></strong>两周时间，新浪微博项目是时候终止了。</p><p><span style="color:#ff6600;">将遇到的所有知识点记录在为知笔记上，似乎心里终于可以放下了一些事。</span></p><p><span style="color:#009900;"><strong>一直在路上 :)</strong></span></p><p><span style="color:#009900;"><strong><br></strong></span></p><p><span style="color:#009900;"><strong>源码地址 <span style="color:rgb(79,79,79);font-family:'Microsoft YaHei';font-size:14px;line-height:20px;">http://download.csdn.net/detail/mkr127/9580536</span></strong></span></p><p><br></p><p>运行效果图：</p><p><img src="https://img-blog.csdn.net/20131024120612859" alt="" width="240" height="427"><img src="https://img-blog.csdn.net/20131024120624078" alt="" width="240" height="427"></p><p><img src="https://img-blog.csdn.net/20131024120635562" alt="" width="240" height="427"><img src="https://img-blog.csdn.net/20131024120648250" alt="" width="240" height="427"></p><p><img src="https://img-blog.csdn.net/20131024120659203" alt="" width="240" height="427"><img src="https://img-blog.csdn.net/20131024120708234" alt="" width="240" height="427"></p><p><img src="https://img-blog.csdn.net/20131024120721312" alt="" width="240" height="427"><img src="https://img-blog.csdn.net/20131024120730218" alt="" width="240" height="427"></p><p><img src="https://img-blog.csdn.net/20131024120740265" alt="" width="240" height="427"><img src="https://img-blog.csdn.net/20131024120750312" alt="" width="240" height="427"><img src="https://img-blog.csdn.net/20131024120800265" alt="" width="240" height="427"></p><h5>代码总结图：</h5><p><strong>图片有点看不清？右击另存为保存到本地再打开试试 :)</strong></p><p><img src="https://img-blog.csdn.net/20131024115538312" alt=""><br></p><p><br></p><p><br></p><p><strong><span style="font-size:14px;color:#ff0000;background-color:rgb(255,255,255);"><u>转载请注明出处！</u></span></strong></p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖13〗】Gallery</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A813_Gallery/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A813_Gallery/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1    在 xml 布局中添加 Gallery</h1><div>activity_main.xml</div><div><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    android:layout_width="match_parent"    android:layout_height="match_parent"&gt;    &lt;Gallery        android:id="@+id/gallery"        android:layout_width="match_parent"        android:layout_height="match_parent"/&gt;&lt;/LinearLayout&gt;</code></pre><br><br></div><h1>2    自定义 ImageAdapter</h1><div>ImageAdapter.java</div><div><pre><code class="language-java">package com.example.gallery;import java.util.List;import android.content.Context;import android.content.res.TypedArray;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.Gallery;import android.widget.ImageView;@SuppressWarnings("deprecation")public class ImageAdapter extends BaseAdapter {        private Context context;    private List&lt;Integer&gt; list;    private TypedArray typedArray;    private int item_background;        public ImageAdapter(Context context ,List&lt;Integer&gt; list)    {        this.context=context;        this.list=list;        this.typedArray = context.obtainStyledAttributes(R.styleable.gallery_style);        item_background=typedArray.getResourceId(R.styleable.gallery_style_android_galleryItemBackground, 0);        typedArray.recycle();    }    @Override    public int getCount() {        return list.size();    }    @Override    public Object getItem(int position) {        return position;    }    @Override    public long getItemId(int position) {        return position;    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        ImageView imageView = new ImageView(context);        //设置显示的图片        imageView.setImageResource(list.get(position));                //设置伸缩规格        imageView.setScaleType(ImageView.ScaleType.FIT_XY);                //设置布局参数        imageView.setLayoutParams(new Gallery.LayoutParams(150,100));                //设置背景边框        imageView.setBackgroundResource(item_background);                return imageView;    }}</code></pre><br><br></div><div><br></div><h1>3    每个 ImageView 的背景参数</h1><div>res/values/attrs.xml</div><div><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt;    &lt;declare-styleable name="gallery_style"&gt;        &lt;attr name="android:galleryItemBackground" /&gt;    &lt;/declare-styleable&gt;&lt;/resources&gt;</code></pre><br><br></div><h1>4    在 MainActivity 中绑定数据与设置监听</h1><div>MainActivity.java</div><div><pre><code class="language-java">package com.example.gallery;import java.util.ArrayList;import android.app.Activity;import android.os.Bundle;import android.view.View;import android.widget.AdapterView;import android.widget.Gallery;import android.widget.Toast;@SuppressWarnings("deprecation")public class MainActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Gallery gallery=(Gallery)findViewById(R.id.gallery);                ArrayList&lt;Integer&gt;list=new ArrayList&lt;Integer&gt;();        list.add(R.drawable.img1);        list.add(R.drawable.img2);        list.add(R.drawable.img3);        list.add(R.drawable.img4);        list.add(R.drawable.img5);        list.add(R.drawable.img6);        list.add(R.drawable.img7);                ImageAdapter adapter=new ImageAdapter(this,list);        gallery.setAdapter(adapter);                gallery.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {              @Override              public void onItemSelected(AdapterView&lt;?&gt; parent, View v,int position, long id) {                  Toast.makeText(getApplicationContext(), "选择了:  "+                                String.valueOf(position), Toast.LENGTH_SHORT).show();            }                          @Override              public void onNothingSelected(AdapterView&lt;?&gt; arg0) {              //这里不做响应              }          });     }}</code></pre><br><br></div><h1>5    图片资源</h1><div><span style="color:#ff0000;"><strong>注：图片最好为 png 格式的图片，由于jpg是压缩后的图片，在android 中解压缩有可能导致内存溢出错误。</strong></span></div><div> <img src="https://img-blog.csdn.net/20130924231254109" alt=""></div><h1>6    结果展示</h1><div> <img src="https://img-blog.csdn.net/20130924231259031" alt=""></div><div><br></div><div><br></div><div><br></div><div><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><strong><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u>转载请注明出处!</u></span></strong></span><br></div><div><br></div><div><br></div><div><br></div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖14〗】SharedPreferences</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A814_SharedPreferences/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A814_SharedPreferences/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1 简介</h1><div><p>SharedPreferences是一种轻量级的数据存储方式,它可以用键值对的方式把简单数据类型（boolean、int、float、long和String）存储在应用程序的私有目录下(data/data/[包名] /shared_prefs/)自己定义的xml文件中</p></div><div><strong>SharedPreferences 创建时可选的模式</strong></div><div><hr></div><div><strong><span style="font-size:12px;color:#333399;">MODE_PRIVATE</span></strong>                          //该文件只能被应用本身访问，写入的内容会覆盖原文件的内容</div><div><div><strong><span style="color:#333399;"><del>MODE_WORLD_READABLE</del></span></strong>     //该文件可以被其他应用读取 (<span style="color:#ff0000;">不推荐使用，不安全</span>)<br><strong><span style="color:#333399;"><del>MODE_WORLD_WRITEABLE</del></span></strong>    //该文件可以被其他应用写入(<span style="color:#ff0000;">不推荐使用，不安全</span>)<br><strong><span style="color:#333399;">MODE_APPEND</span></strong>                         //该模式会检查文件是否存在，存在就往文件追加内容，否则就创建新文件</div><div><hr></div></div><div> </div><h1>2 具体实现如下：</h1><div><br></div><h2>2.1 主要代码</h2><div><br></div><div>MainActivity.java</div><div><pre><code class="language-java">package com.michael.mysharedpreferences;import android.app.Activity;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.os.Bundle;import android.widget.TextView;public class MainActivity extends Activity {    public static final String SETTINGS_NAME="mysettings";        @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);                //开始配置 SharedPreferences        //---------------------------------------        //第一个参数为 配置文件名        SharedPreferences spref = getSharedPreferences(SETTINGS_NAME, MODE_PRIVATE);        Editor editor=spref.edit();                //保存数据至配置文件        editor.putString("user1", "michael");        editor.putInt("user1_age", 24);        editor.putString("user1_sex", "男");                editor.commit();        //---------------------------------------        //结束                                //现在开始测试获取数据        //---------------------------------------        String str;        str=spref.getString("user1", "default");        str+='\n';        str+=spref.getInt("user1_age", 0);        str+='\n';        str+=spref.getString("user1_sex", "default");        str+='\n';                TextView textview=(TextView)findViewById(R.id.textview);        textview.setText(str);        //---------------------------------------    }}</code></pre></div><br><h2>2.2 布局文件</h2><div><br></div><div>activity_main.xml</div><div><br></div><div><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent" &gt;    &lt;TextView        android:id="@+id/textview"        android:layout_width="wrap_content"        android:layout_height="wrap_content"/&gt;&lt;/LinearLayout&gt;</code></pre><br><br></div><h1>3 运行结果</h1><div><br></div><div> <img src="https://img-blog.csdn.net/20130925224927218" alt=""></div><div></div><div> <img src="https://img-blog.csdn.net/20130925224854281" alt=""></div><div> <img src="https://img-blog.csdn.net/20130925224903734" alt=""></div><div></div><div> </div><div></div><div> </div><div>参考 ：<a href="http://www.oschina.net/question/54100_31831" rel="noopener" target="_blank">http://www.oschina.net/question/54100_31831</a></div><div> </div><div><strong><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u>转载请注明出处!</u></span></span></strong></div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖17〗】自定义标签 和 自定义组件</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A817_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE_%E5%92%8C_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A817_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE_%E5%92%8C_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h1>1    自定义标签</h1><div><div>这是我的模板项目目录</div><div><br></div><div> <img src="https://img-blog.csdn.net/20130930005121484" alt=""></div><div></div><div> </div></div><div>既然想像 android:text  那样使用自己的标签，那么首先得有标签。</div><div>在 res/values/ 下我新建了个 <span style="color:#ff0000;"><strong>mm_tag.xml</strong></span> (切记不可出现大写，只能是 小写字母、数字、下划线)</div><h2>第一步:    自定义 标签    </h2><div>mm_tag.xml</div><div><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt;    &lt;declare-styleable name="GridItem"&gt;        &lt;attr name="bkground" format="reference|color"/&gt;        &lt;attr name="text1"    format="string"/&gt;        &lt;attr name="text2"    format="string"/&gt;        &lt;attr name="image"    format="reference|integer"/&gt;    &lt;/declare-styleable&gt;    &lt;/resources&gt;</code></pre><br></div><div>format 参考:</div><div><strong>1. reference：参考某一资源ID</strong></div><div><strong>2. color：颜色值</strong></div><div><strong>3. boolean：布尔值</strong></div><div><strong>4. dimension：尺寸值</strong></div><div><strong>5. float：浮点值</strong></div><div><strong>6. integer：整型值</strong></div><div><strong>7. string：字符串</strong></div><div><strong>8. fraction：百分数</strong></div><div><strong>9. enum：枚举值</strong></div><div><pre><code class="language-html">//属性定义：&lt; declare -styleable name = "名称" &gt;    &lt;attr name = "orientation" &gt;        &lt;enum name = "horizontal" value = "0" /&gt;        &lt;enum name = "vertical" value = "1" /&gt;    &lt;/attr&gt;                      &lt;/ declare -styleable&gt;//属性使用：&lt;LinearLayout    xmlns:android = "http://schemas.android.com/apk/res/android"    android:orientation = "vertical"    android:layout_width = "fill_parent"    android:layout_height = "fill_parent"&gt;&lt;/LinearLayout&gt;</code></pre><br></div><div><div></div><div><strong>10. flag：位或运算</strong></div><div><pre><code class="language-html">//属性定义：&lt; declare -styleable name = "名称" &gt;    &lt;attr name = "windowSoftInputMode" &gt;        &lt;flag name = "stateUnspecified" value = "0" /&gt;        &lt;flag name = "stateUnchanged" value = "1" /&gt;        &lt;flag name = "stateHidden" value = "2" /&gt;    &lt;/attr&gt;                &lt;/ declare -styleable&gt;//属性使用：&lt;activity    android: name = ".StyleAndThemeActivity"    android:label = "@string/app_name"    android:windowSoftInputMode = "stateUnspecified | stateUnchanged　|　stateHidden" &gt;    &lt;intent-filter&gt;        &lt; action android: name = "android.intent.action.MAIN" /&gt;        &lt;category android: name = "android.intent.category.LAUNCHER" /&gt;    &lt;/intent-filter&gt;&lt;/activity&gt;</code></pre><br></div><div><code></code></div><div><strong>11.注意：属性定义时可以指定多种类型值。</strong></div><div><pre><code class="language-html">//属性定义：&lt; declare -styleable name = "名称" &gt;    &lt;attr name = "background" format = "reference|color" /&gt;&lt;/ declare -styleable&gt;//属性使用：&lt;ImageView    android:layout_width = "42dip"    android:layout_height = "42dip"    android: background = "@drawable/图片ID|#00FF00" /&gt;</code></pre></div><h2><strong>第二步:    在自定义组件中获得标签传回的数据</strong></h2></div><div>比如我们在布局中使用自定义组件 GridItem:</div><div>首先 声明好 标签的命名空间</div><div><pre><code class="language-html">xmlns:griditem = "http://schemas.android.com/apk/res/com.mm.template"//对比下 android 的命名空间:xmlns:android = "http://schemas.android.com/apk/res/android"</code></pre></div><div>发现只有 res/后面的不同，<strong>com.mm.template</strong> 是我的应用程序包名，通过<span style="color:#ff0000;"><strong>上文中的 项目目录图片</strong></span>可以看出来，</div><div>griditem 是我随便想的一个命名空间的名字。</div><div>接下来就是使用自定义组件</div><div><code></code><div><pre><code class="language-html">&lt; com.mm.template.GridItem     griditem:image = "@drawable/mm_1"     android:padding = "5dp"     android:layout_width = "wrap_content"     android:layout_height = "wrap_content"     android:layout_weight = "1"     griditem:bkground = "@color/orange"     griditem:text1 = "Android"       griditem:text2 = "手机开发" /&gt;</code></pre></div></div><div>其中 用到了我们的自定义标签：</div><div><pre><code class="language-html">griditem:image = "@drawable/mm_1"griditem:bkground = "@color/orange"griditem:text1 = "Android"griditem:text2 = "手机开发"</code></pre></div><div>怎么获取标签传回的数据呢呢？</div><div>在自定义组件 GridItem 的实现代码中使用如下方法即可</div><div><pre><code class="language-java">public GridItem(Context context, AttributeSet attrs) {super(context, attrs);TypedArray typedarray=context.obtainStyledAttributes(attrs, R.styleable.GridItem);bk_color =typedarray.getResourceId(R.styleable.GridItem_bkground, R.color.burlywood);text1 =typedarray.getString(R.styleable.GridItem_text1);text2 =typedarray.getString(R.styleable.GridItem_text2);image=typedarray.getDrawable(R.styleable.GridItem_image);typedarray.recycle();view=LayoutInflater.from(context).inflate(R.layout.mm_grid_item, this,true);layout=(LinearLayout)view.findViewById(R.id.item_layout);textview1=(TextView)view.findViewById(R.id.text1);textview2=(TextView)view.findViewById(R.id.text2);imageview=(ImageView)view.findViewById(R.id.imageview);layout.setBackgroundResource(bk_color);//设置背景色textview1.setText(text1);//设置第一行文字textview2.setText(text2);//设置第二行文字imageview.setImageDrawable(image);//设置图标}</code></pre><br><br></div><div><br></div><div>即可获得 我们自定义标签传过来的数据，并且正确的在界面中显示出来。</div><div>下面我将结合自定义 组件 GridItem 来一起讲。</div><h1>2    自定义组件</h1><div>我想实现一个组件，类似于这样的</div><div> <img src="https://img-blog.csdn.net/20130930005131953" alt=""></div><div></div><div> </div><div>方法有很多种，自定义布局即可，现在我想让它以组件的形式在 布局中直接 像 TextView 一样使用，</div><div><br></div><div><img src="https://img-blog.csdn.net/20130930005129125" alt=""><br></div><div><br></div><div></div><div>那么就用到自定义组件。</div><div>下面我将实现一个自定义组件 GridItem 实现。</div><div> </div><div><strong>一般都是继承于 Layout（我用继承于View时出现问题 ~~!）</strong></div><div>GridItem.java</div><div><pre><code class="language-java">package com.mm.template;import android.content.Context;import android.content.res.TypedArray;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;public class GridItem extends LinearLayout {privateint bk_color;//背景色private String text1;//第一行文字private String text2;//第二行文字private Drawable image;//图标private LinearLayout layout;private TextView textview1;private TextView textview2;private ImageView imageview;private View view;public GridItem(Context context, AttributeSet attrs) {super(context, attrs);TypedArray typedarray=context.obtainStyledAttributes(attrs, R.styleable.GridItem);bk_color =typedarray.getResourceId(R.styleable.GridItem_bkground, R.color.burlywood);text1 =typedarray.getString(R.styleable.GridItem_text1);text2 =typedarray.getString(R.styleable.GridItem_text2);image=typedarray.getDrawable(R.styleable.GridItem_image);typedarray.recycle();view=LayoutInflater.from(context).inflate(R.layout.mm_grid_item, this,true);layout=(LinearLayout)view.findViewById(R.id.item_layout);textview1=(TextView)view.findViewById(R.id.text1);textview2=(TextView)view.findViewById(R.id.text2);imageview=(ImageView)view.findViewById(R.id.imageview);layout.setBackgroundResource(bk_color);//设置背景色textview1.setText(text1);//设置第一行文字textview2.setText(text2);//设置第二行文字imageview.setImageDrawable(image);//设置图标}}</code></pre><br><span style="font-weight:bold;">这个自定义组件 GridItem 用到的布局文件</span></div><div>mm_grid_item.xml</div><div><pre><code class="language-html">&lt;? xml   version = "1.0"    encoding = "utf-8" ?&gt;&lt; LinearLayout   xmlns:android = "http://schemas.android.com/apk/res/android"     xmlns:tools = "http://schemas.android.com/tools"     android: id = "@+id/item_layout"     android:layout_width = "match_parent"     android:layout_height = "match_parent"     android:orientation = "vertical"     android: background = "@color/black"     android:padding = "3dp"     android:paddingLeft = "6dp"     tools:ignore = "HardcodedText,ContentDescription"    &gt;     &lt; TextView         android: id = "@+id/text1"         android:layout_weight = "1"          style = "@style/MM_TextView" /&gt;     &lt; TextView         android: id = "@+id/text2"         android:layout_weight = "1"         android:textSize = "12sp"          style = "@style/MM_TextView" /&gt;     &lt; ImageView         android: id = "@+id/imageview"         android:layout_width = "wrap_content"         android:layout_height = "0dp"         android:layout_gravity = "right"         android: src = "@drawable/mm_title_1"            android:layout_weight = "2"         android:layout_marginTop = "10dp"         android:scaleType = "fitCenter" /&gt;          &lt;!--图片缩放        android:scaleX="0.8"        android:scaleY="0.8" --&gt; &lt;/ LinearLayout &gt;</code></pre></div><h1>3    使用方法</h1><div>在 <strong>main_layout.xml </strong>(我的主布局文件)中使用</div><div><pre><code class="language-html">&lt; LinearLayout   xmlns:android = "http://schemas.android.com/apk/res/android"     xmlns:tools = "http://schemas.android.com/tools"     xmlns:griditem = "http://schemas.android.com/apk/res/com.mm.template"     android:layout_width = "match_parent"     android:layout_height = "match_parent"     android: background = "@color/white"     android:orientation = "vertical"     tools:ignore = "HardcodedText,ContentDescription,NestedWeights"    &gt;          &lt;!-- Head start --&gt;     &lt; LinearLayout         android:layout_width = "match_parent"         android:layout_height = "44dp"         android:orientation = "horizontal"         android:padding = "10dp"         android: background = "@color/red" &gt;         &lt; ImageView             android:layout_width = "wrap_content"             android:layout_height = "match_parent"             android: src = "@drawable/mm_title_1"    /&gt;         &lt; TextView             android:layout_width = "0dp"             android:layout_height = "match_parent"             android:layout_weight = "1"             android:gravity = "center"             android: text = "测试案例"             android:textStyle = "bold"             android:textSize = "16sp"             android:textColor = "@android:color/white" /&gt;         &lt; ImageView             android:layout_width = "wrap_content"             android:layout_height = "match_parent"             android: src = "@drawable/mm_title_2"    /&gt;     &lt;/ LinearLayout &gt;      &lt;!-- Head end   --&gt;          &lt;!-- Search start--&gt;     &lt; LinearLayout         android:layout_width = "match_parent"         android:layout_height = "36dp"         android:orientation = "vertical"         android:paddingTop = "3dp"            android:layout_margin = "8dp" &gt;         &lt; EditText             android: id = "@+id/search_edit"             android:layout_width = "match_parent"             android:layout_height = "match_parent"             android:drawableLeft = "@drawable/mm_search"               android: background = "@drawable/mm_shape_editview"               android:hint = "请输入关键字"             android:textSize = "16sp"             android:textColorHint = "@color/darkgray"             android:textStyle = "bold"             android:padding = "6dp" /&gt;     &lt;/ LinearLayout &gt;      &lt;!-- Search end  --&gt;      &lt;!-- GridItem start  --&gt;     &lt; LinearLayout             android:layout_width = "match_parent"           android:layout_height = "0dp"           android:layout_weight = "1"           android:orientation = "horizontal"         android:layout_margin = "10dp" &gt;         &lt; com.mm.template.GridItem             griditem:image = "@drawable/mm_1"             android:padding = "5dp"               android:layout_width = "wrap_content"               android:layout_height = "wrap_content"               android:layout_weight = "1"               griditem:bkground = "@color/orange"               griditem:text1 = "Android"               griditem:text2 = "手机开发" /&gt;         &lt; com.mm.template.GridItem             griditem:image = "@drawable/mm_2"             android:padding = "5dp"               android:layout_width = "wrap_content"               android:layout_height = "wrap_content"               android:layout_weight = "1"               griditem:bkground = "@color/blueviolet"               griditem:text1 = "C++"               griditem:text2 = "编程语言" /&gt;         &lt; com.mm.template.GridItem             griditem:image = "@drawable/mm_3"             android:padding = "5dp"               android:layout_width = "wrap_content"               android:layout_height = "wrap_content"               android:layout_weight = "1"               griditem:bkground = "@color/blue"               griditem:text1 = "服务端"               griditem:text2 = "后台开发" /&gt;     &lt;/ LinearLayout &gt;      &lt;!-- GridItem end  --&gt; &lt;/ LinearLayout &gt;</code></pre></div><div><div><div><div><div><div><div><span style="color:#ff0000;"><strong>也就是 &lt;com /&gt; 标签为我们自定义的 GridItem 组件。</strong></span></div></div></div></div></div></div></div><h1>4    结果展示</h1><div> </div><div></div><div> <img src="https://img-blog.csdn.net/20130930005132812" alt=""></div><div> </div><div> </div><div> </div><div>参考<span style="font-size:12px;">来源： &lt;</span><a href="http://blog.sina.com.cn/s/blog_62ef2f14010105vi.html" rel="noopener" target="_blank"><span style="font-size:12px;">http://blog.sina.com.cn/s/blog_62ef2f14010105vi.html</span></a><small><span style="font-size:10px;">&gt;</span></small></div><div> </div><div> </div><div><span style="font-weight:bold;"><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u>注：转载请注明出处 :)   毕竟代码是一个一个敲出来的啊，O(∩_∩)O~</u></span></span></span></span></div><div><span style="font-weight:bold;"><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u><br></u></span></span></span></span></div><div><span style="font-weight:bold;"><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u><br></u></span></span></span></span></div><div><span style="font-weight:bold;"><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u><br></u></span></span></span></span></div><div> </div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Django基础入门】ManyToManyField跨越中间表查询</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_ManyToManyField%E8%B7%A8%E8%B6%8A%E4%B8%AD%E9%97%B4%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_ManyToManyField%E8%B7%A8%E8%B6%8A%E4%B8%AD%E9%97%B4%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>1：在 Course 表中用到了 manytomany 生成了中间表 org_course_age_choice</p><p></p><pre><code class="language-python">class Course(models.Model):    org = models.ForeignKey(Org)    name = models.CharField(max_length=200)    age_choice = models.ManyToManyField(Category,verbose_name=_('course_age_choices'), related_name='course_age_choices', blank=True)</code></pre><p></p><p><br></p>2：生成的 中间表 org_course_age_choice<p><br><img src="http://my.csdn.net/uploads/201207/09/1341813376_7220.jpg" alt=""><br></p><p><br></p><p>3：我想通过course_id 获得 category 中的数据，原先一直在怎么使用中间表这个问题上，一直搞不会，现在明白了，原来 结果集 courseinfo 本身也可以作对象，那么，问题简单了</p><p><br></p><p></p><pre><code class="language-python">def course_details(request,id):    courseinfo = Course.objects.get(id=id)    age_choices = courseinfo.age_choice.all()</code></pre>age_choices 为 category 中的数据！<br><br><p></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【有趣的面试题】有人邀请ABCDEF六人参加一项会议</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%9C%89%E8%B6%A3%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98_%E6%9C%89%E4%BA%BA%E9%82%80%E8%AF%B7ABCDEF%E5%85%AD%E4%BA%BA%E5%8F%82%E5%8A%A0%E4%B8%80%E9%A1%B9%E4%BC%9A%E8%AE%AE/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%9C%89%E8%B6%A3%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98_%E6%9C%89%E4%BA%BA%E9%82%80%E8%AF%B7ABCDEF%E5%85%AD%E4%BA%BA%E5%8F%82%E5%8A%A0%E4%B8%80%E9%A1%B9%E4%BC%9A%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                有人邀请ABCDEF六人参加一项会议，这六个人有些奇怪因为他们有很多要求，已知：<br>（1）AB两人至少有一人参加会议<br>（2）AEF三人中有两人参加会议<br>（3）B和C两人一致决定要么两人都去，要么两人都不去。<br>（4）AD两人中只有一人参加会议<br>（5）CD两人中也只有一人参加会议<br>（6）如果D不去，那么E也决定不去<br><p>那么最后究竟有几个人参加会议？</p><p><br></p><p></p><pre><code class="language-cpp">#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;void main(){map&lt;char,int&gt;Person;Person['A']=0;Person['B']=0;Person['C']=0;Person['D']=0;Person['E']=0;Person['F']=0;cout&lt;&lt;"参加会议的人有 ："&lt;&lt;endl&lt;&lt;endl;for(Person['A']=0;Person['A']&lt;2;Person['A']++)for(Person['B']=0;Person['B']&lt;2;Person['B']++)for(Person['C']=0;Person['C']&lt;2;Person['C']++)for(Person['D']=0;Person['D']&lt;2;Person['D']++)for(Person['E']=0;Person['E']&lt;2;Person['E']++)for(Person['F']=0;Person['F']&lt;2;Person['F']++){//1 ：AB至少一人去  A!B   !AB  ABif(Person['A'] || Person['B']){//2 ：AEF只有两人去if((Person['A']&amp;&amp;Person['E'] &amp;&amp; !Person['F'])||(Person['A']&amp;&amp;Person['F']&amp;&amp;!Person['E'])||(Person['E']&amp;&amp;Person['F']&amp;&amp;!Person['A'])){                                                                   //3 : BC要么都去，要么都不去if( (Person['B'] &amp;&amp;  Person['C']) || (!Person['B'] &amp;&amp; !Person['C']))         {//4 ：AD只有一人参加会议if( (Person['A'] ^  Person['D']) ){//5 ：CD只有一人参加会议if( (Person['C'] ^  Person['D']) ){//6 : 如果D不去，E也决定不去   DE  D!E  !D!Eif( (Person['D'] &amp;&amp; Person['E']) ||(Person['D'] &amp;&amp; !Person['E']) || (!Person['D'] &amp;&amp; !Person['E']) )                 {int n=0;if((Person['A'])){n++;cout&lt;&lt;"A"&lt;&lt;" ";}if((Person['B'])){n++;cout&lt;&lt;"B"&lt;&lt;" ";}if((Person['C'])){n++;cout&lt;&lt;"C"&lt;&lt;" ";}if((Person['D'])){n++;cout&lt;&lt;"D"&lt;&lt;" ";}if((Person['E'])){n++;cout&lt;&lt;"E"&lt;&lt;" ";}if((Person['F'])){n++;cout&lt;&lt;"F"&lt;&lt;" "&lt;&lt;endl&lt;&lt;"共有"&lt;&lt;n&lt;&lt;"个人参加会议！"&lt;&lt;endl;}}}}}}}}    cout&lt;&lt;endl;}</code></pre><br><p><img src="http://img.my.csdn.net/uploads/201303/03/1362290823_3600.png" alt=""></p><p><br></p><p><strong><span style="font-size:24px;color:#ff0000;">转载请注明出处！</span></strong></p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖2〗】Eclipse 导入 Android 源码</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A82_Eclipse_%E5%AF%BC%E5%85%A5_Android_%E6%BA%90%E7%A0%81/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A82_Eclipse_%E5%AF%BC%E5%85%A5_Android_%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <div>很多人都下载过下图中的 <strong>Sources for Android SDK</strong>，但是很少人知道怎么用 </div><div> </div><div><a href="http://images.cnblogs.com/cnblogs_com/xiaobo68688/201212/201212031435209268.png" rel="noopener" target="_blank"></a></div><div> <img src="https://img-blog.csdn.net/20130927133653515" alt=""></div><div> </div><div>下载完毕后可以再 Android SDK 根目录下看到 sources 文件夹内 有 android-18 的文件夹，里边就是 Android 4.3 的源码，如下图</div><div> <img src="https://img-blog.csdn.net/20130927133706093" alt=""></div><div><a href="http://images.cnblogs.com/cnblogs_com/xiaobo68688/201212/201212031435339899.png" rel="noopener" target="_blank"></a></div><div></div><div> </div><div>我们需要做的就是把 <strong><u>android-18 目录下的所有文件</u></strong> 拷贝 到  <strong>Adt-Bundle\sdk\platforms\android-18</strong>中新建的<strong><u>sources</u></strong><u> 文件夹内</u></div><div> <img src="https://img-blog.csdn.net/20130927133704312" alt=""></div><div></div><div> </div><div><strong><span style="color:#3333ff;">如果还不行，直接在提示找不到源码的页面，attach 到源码文件夹即可！</span></strong></div><div><br></div><div>ok,that's all :)</div><div><br></div><div><br></div><div><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="color:rgb(255,0,0);font-size:17.77777862548828px;line-height:25.98958396911621px;"><u><strong>注：转载请注明出处 :)   毕竟代码是一个一个敲出来的啊，O(∩_∩)O~</strong></u></span></span><br></div><div><br></div><div><br></div><div><br></div><div> </div>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【MFC基础入门】LabJack的研究</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_MFC%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_LabJack%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_MFC%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_LabJack%E7%9A%84%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>MyLabJackDlg.h</p><p></p><pre><code class="language-cpp">// MyLabJackDlg.h : 头文件//#pragma once#include "afxwin.h"#include &lt;stdio.h&gt;#include &lt;windows.h&gt;#include "C:\Program Files (x86)\LabJack\Drivers\LabJackUD.h"// CMyLabJackDlg 对话框class CMyLabJackDlg : public CDialogEx{// 构造public:CMyLabJackDlg(CWnd* pParent = NULL);// 标准构造函数// 对话框数据enum { IDD = IDD_MYLABJACK_DIALOG };protected:virtual void DoDataExchange(CDataExchange* pDX);// DDX/DDV 支持// 实现protected:HICON m_hIcon;// 生成的消息映射函数virtual BOOL OnInitDialog();afx_msg void OnSysCommand(UINT nID, LPARAM lParam);afx_msg void OnPaint();afx_msg HCURSOR OnQueryDragIcon();DECLARE_MESSAGE_MAP()public:CString Edit_AIN0;CString Edit_AIN1;CString Edit_AIN2;CString Edit_AIN3;CButton bt_start;CButton bt_stop;double StartAIN0;double StartAIN1;bool setvalue;bool timerstate;LJ_ERROR lngErrorcode;LJ_HANDLE lngHandle;double dblValue;long lngValue;long lngBinary;afx_msg void OnTimer(UINT_PTR nIDEvent);afx_msg void OnBnClickedButton1();afx_msg void OnBnClickedButton2();afx_msg void OnBnClickedButton3();CString Edit_SAIN0;CString Edit_SAIN1;CString Edit_Arcsin0;CString Edit_Arcsin1;CButton bt_setvalue;void ErrorHandler (LJ_ERROR lngErrorcode, long lngLineNumber, long lngIteration);};</code></pre><p></p><p>MyLabJackDlg.cpp</p><pre><code class="language-cpp">// MyLabJackDlg.cpp : 实现文件//#include "stdafx.h"#include "MyLabJack.h"#include "MyLabJackDlg.h"#include "afxdialogex.h"#include &lt;math.h&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;using namespace std;#ifdef _DEBUG#define new DEBUG_NEW#endif// 用于应用程序“关于”菜单项的 CAboutDlg 对话框class CAboutDlg : public CDialogEx{public:CAboutDlg();// 对话框数据enum { IDD = IDD_ABOUTBOX };protected:virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持// 实现protected:DECLARE_MESSAGE_MAP()};CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD){}void CAboutDlg::DoDataExchange(CDataExchange* pDX){CDialogEx::DoDataExchange(pDX);}BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)ON_WM_MOVING()END_MESSAGE_MAP()// CMyLabJackDlg 对话框CMyLabJackDlg::CMyLabJackDlg(CWnd* pParent /*=NULL*/): CDialogEx(CMyLabJackDlg::IDD, pParent), Edit_SAIN0(_T("")), Edit_SAIN1(_T("")), Edit_Arcsin0(_T("")), Edit_Arcsin1(_T("")){m_hIcon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME);Edit_AIN0 = _T("");}void CMyLabJackDlg::DoDataExchange(CDataExchange* pDX){CDialogEx::DoDataExchange(pDX);DDX_Control(pDX, IDC_BUTTON1, bt_start);DDX_Control(pDX, IDC_BUTTON2, bt_stop);DDX_Text(pDX, IDC_EDIT1, Edit_AIN0);DDV_MaxChars(pDX, Edit_AIN0, 30);DDX_Text(pDX, IDC_EDIT2, Edit_AIN1);DDV_MaxChars(pDX, Edit_AIN1, 30);DDX_Text(pDX, IDC_EDIT3, Edit_AIN2);DDV_MaxChars(pDX, Edit_AIN2, 30);DDX_Text(pDX, IDC_EDIT4, Edit_AIN3);DDV_MaxChars(pDX, Edit_AIN3, 30);DDX_Text(pDX, IDC_EDIT5, Edit_SAIN0);DDV_MaxChars(pDX, Edit_SAIN0, 30);DDX_Text(pDX, IDC_EDIT6, Edit_SAIN1);DDV_MaxChars(pDX, Edit_SAIN1, 30);DDX_Text(pDX, IDC_EDIT7, Edit_Arcsin0);DDV_MaxChars(pDX, Edit_Arcsin0, 30);DDX_Text(pDX, IDC_EDIT8, Edit_Arcsin1);DDX_Control(pDX, IDC_BUTTON3, bt_setvalue);}BEGIN_MESSAGE_MAP(CMyLabJackDlg, CDialogEx)ON_WM_SYSCOMMAND()ON_WM_PAINT()ON_WM_QUERYDRAGICON()ON_BN_CLICKED(IDC_BUTTON1, &amp;CMyLabJackDlg::OnBnClickedButton1)ON_WM_TIMER()ON_BN_CLICKED(IDC_BUTTON2, &amp;CMyLabJackDlg::OnBnClickedButton2)ON_BN_CLICKED(IDC_BUTTON3, &amp;CMyLabJackDlg::OnBnClickedButton3)END_MESSAGE_MAP()//This is our simple error handling function that is called after every UD//function call.  This function displays the errorcode and string description//of the error.  It also has a line number input that can be used with the//macro __LINE__ to display the line number in source code that called the//error handler.  It also has an iteration input is useful when processing//results in a loop (getfirst/getnext).void CMyLabJackDlg::ErrorHandler (LJ_ERROR lngErrorcode, long lngLineNumber, long lngIteration){char err[255];if (lngErrorcode != LJE_NOERROR){ErrorToString(lngErrorcode,err);CString str;str.Format("Error number = %d\nError string = %s\nSource line number = %d\nIteration = %d\n\n",lngErrorcode ,err ,lngLineNumber ,lngIteration);MessageBox(str.GetString());if(lngErrorcode &gt; LJE_MIN_GROUP_ERROR){exit(0);}   }}// CMyLabJackDlg 消息处理程序BOOL CMyLabJackDlg::OnInitDialog(){CDialogEx::OnInitDialog();// 将“关于...”菜单项添加到系统菜单中。// IDM_ABOUTBOX 必须在系统命令范围内。ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX);ASSERT(IDM_ABOUTBOX &lt; 0xF000);CMenu* pSysMenu = GetSystemMenu(FALSE);if (pSysMenu != NULL){BOOL bNameValid;CString strAboutMenu;bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);ASSERT(bNameValid);if (!strAboutMenu.IsEmpty()){pSysMenu-&gt;AppendMenu(MF_SEPARATOR);pSysMenu-&gt;AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);}}// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动//  执行此操作SetIcon(m_hIcon, TRUE);// 设置大图标SetIcon(m_hIcon, FALSE);// 设置小图标// TODO: 在此添加额外的初始化代码double dblValue=0;long lngValue=0;LJ_HANDLE lngHandle=0;setvalue=false;timerstate=false;CString tmp;StartAIN0=2.482;StartAIN1=2.472;UpdateData(1);tmp.Format("%f",StartAIN0);Edit_SAIN0=tmp;tmp.Format("%f",StartAIN1);Edit_SAIN1=tmp;UpdateData(0);fstream out;out.open("e:\\test.txt",ios::app|ios::in);out.seekg(ios::beg);if(out.rdbuf()-&gt;sgetc()==char_traits&lt;char&gt;::eof())out&lt;&lt;"systemtime"&lt;&lt;'\t'&lt;&lt;"arcsin(AIN0)"&lt;&lt;'\t'&lt;&lt;"arcsin(AIN1)"&lt;&lt;endl;out.close();return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE}void CMyLabJackDlg::OnSysCommand(UINT nID, LPARAM lParam){if ((nID &amp; 0xFFF0) == IDM_ABOUTBOX){CAboutDlg dlgAbout;dlgAbout.DoModal();}else{CDialogEx::OnSysCommand(nID, lParam);}}// 如果向对话框添加最小化按钮，则需要下面的代码//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，//  这将由框架自动完成。void CMyLabJackDlg::OnPaint(){if (IsIconic()){CPaintDC dc(this); // 用于绘制的设备上下文SendMessage(WM_ICONERASEBKGND, reinterpret_cast&lt;WPARAM&gt;(dc.GetSafeHdc()), 0);// 使图标在工作区矩形中居中int cxIcon = GetSystemMetrics(SM_CXICON);int cyIcon = GetSystemMetrics(SM_CYICON);CRect rect;GetClientRect(&amp;rect);int x = (rect.Width() - cxIcon + 1) / 2;int y = (rect.Height() - cyIcon + 1) / 2;// 绘制图标dc.DrawIcon(x, y, m_hIcon);}else{CDialogEx::OnPaint();}}//当用户拖动最小化窗口时系统调用此函数取得光标//显示。HCURSOR CMyLabJackDlg::OnQueryDragIcon(){return static_cast&lt;HCURSOR&gt;(m_hIcon);}void CMyLabJackDlg::OnBnClickedButton1() //开启定时器1{// TODO: 在此添加控件通知处理程序代码if(timerstate==false){SetTimer(1,60,NULL);//启动定时器1,定时时间是60mstimerstate=true;}}void CMyLabJackDlg::OnTimer(UINT_PTR nIDEvent){// TODO: 在此添加消息处理程序代码和/或调用默认值//写入文件ofstream out;out.open("e:\\test.txt",ios::app);CString strtime;SYSTEMTIME st;GetLocalTime(&amp;st);strtime.Format("%2d%2d%2d%3d",st.wHour,st.wMinute,st.wSecond,st.wMilliseconds);out&lt;&lt;strtime&lt;&lt;'\t';//Open the first found LabJack U3.lngErrorcode = OpenLabJack (LJ_dtU3, LJ_ctUSB, "1", 1, &amp;lngHandle);ErrorHandler(lngErrorcode, __LINE__, 0);//Start by using the pin_configuration_reset IOType so that all//pin assignments are in the factory default condition.lngErrorcode = ePut (lngHandle, LJ_ioPIN_CONFIGURATION_RESET, 0, 0, 0);ErrorHandler(lngErrorcode, __LINE__, 0);CString ss;UpdateData(1);/*****************************************************************************///Take a single-ended measurement from AIN0.lngBinary = 0;lngErrorcode = eAIN (lngHandle, 0, 31, &amp;dblValue, -1, -1, -1, lngBinary, 0, 0);ErrorHandler(lngErrorcode, __LINE__, 0);ss.Format(TEXT("%f"),dblValue);Edit_AIN0=ss;//反正弦dblValue=asin((dblValue-StartAIN0)/1.2);if(dblValue&gt;1){dblValue=1;}else if(dblValue&lt;-1){dblValue=-1;}ss.Format(TEXT("%f"),dblValue);Edit_Arcsin0=ss;out&lt;&lt;ss&lt;&lt;'\t';lngErrorcode = eAIN (lngHandle, 1, 31, &amp;dblValue, -1, -1, -1, lngBinary, 0, 0);ErrorHandler(lngErrorcode, __LINE__, 0);ss.Format(TEXT("%f"),dblValue);Edit_AIN1=ss;//反正弦dblValue=asin((dblValue-StartAIN1)/1.2);if(dblValue&gt;1){dblValue=1;}else if(dblValue&lt;-1){dblValue=-1;}ss.Format(TEXT("%f"),dblValue);Edit_Arcsin1=ss;out&lt;&lt;ss&lt;&lt;'\t'&lt;&lt;endl;lngErrorcode = eAIN (lngHandle, 2, 31, &amp;dblValue, -1, -1, -1, lngBinary, 0, 0);ErrorHandler(lngErrorcode, __LINE__, 0);ss.Format(TEXT("%f"),dblValue);Edit_AIN2=ss;lngErrorcode = eAIN (lngHandle, 3, 31, &amp;dblValue, -1, -1, -1, lngBinary, 0, 0);ErrorHandler(lngErrorcode, __LINE__, 0);ss.Format(TEXT("%f"),dblValue);Edit_AIN3=ss;UpdateData(0);/*****************************************************************************/CDialogEx::OnTimer(nIDEvent);out.close();}void CMyLabJackDlg::OnBnClickedButton2()//关闭定时器1。{// TODO: 在此添加控件通知处理程序代码if(timerstate==true){KillTimer(1); //关闭定时器1。timerstate=false;}}void CMyLabJackDlg::OnBnClickedButton3()//设置初值{// TODO: 在此添加控件通知处理程序代码//Open the first found LabJack U3.if(timerstate==true){KillTimer(1); //关闭定时器1。timerstate=false;}bt_start.EnableWindow(false);bt_stop.EnableWindow(false);bt_setvalue.EnableWindow(false);bt_setvalue.SetWindowTextA("请等待10s...");lngErrorcode = OpenLabJack (LJ_dtU3, LJ_ctUSB, "1", 1, &amp;lngHandle);ErrorHandler(lngErrorcode, __LINE__, 0);double A0[10],A1[10];for(int i=0;i&lt;10;i++){//Take a single-ended measurement from AIN0.lngBinary = 0;lngErrorcode = eAIN (lngHandle, 0, 31, &amp;dblValue, -1, -1, -1, lngBinary, 0, 0);ErrorHandler(lngErrorcode, __LINE__, 0);A0[i]=dblValue;//Take a single-ended measurement from AIN1.lngErrorcode = eAIN (lngHandle, 1, 31, &amp;dblValue, -1, -1, -1, lngBinary, 0, 0);ErrorHandler(lngErrorcode, __LINE__, 0);A1[i]=dblValue;Sleep(1000);}for(int i=0;i&lt;10;i++){StartAIN0+=A0[i];StartAIN1+=A1[i];}StartAIN0 /= 10.0;StartAIN1 /= 10.0;setvalue=true;CString tmp;UpdateData(1);tmp.Format("%f",StartAIN0);Edit_SAIN0=tmp;tmp.Format("%f",StartAIN1);Edit_SAIN1=tmp;UpdateData(0);bt_start.EnableWindow(true);bt_stop.EnableWindow(true);bt_setvalue.EnableWindow(true);bt_setvalue.SetWindowTextA("重设初值(10s)");}</code></pre><br>结果：<p></p><p><img src="http://img.my.csdn.net/uploads/201212/25/1356411205_8771.png" alt=""><br></p><p><br></p><strong><span style="font-size:24px;color:#ff0000;">转载请注明出处！</span></strong><p><br><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Django基础入门】Aptana提示功能和shell设置</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_Aptana%E6%8F%90%E7%A4%BA%E5%8A%9F%E8%83%BD%E5%92%8Cshell%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_Aptana%E6%8F%90%E7%A4%BA%E5%8A%9F%E8%83%BD%E5%92%8Cshell%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>1：以前用Aptana 开发 Django 一直没有代码提示功能，很不方便，今天无意间找到解决方案：</p><p><span></span>在 自己的项目上 右击--&gt;Properties--&gt;PyDev - PYTHONPATH</p><p><span></span>在 右边 Source Folders 中 点击 Add source folder ，选中自己的项目即可，重启eclipse。</p><p>2：shell设置：</p><p><span></span>在自己的项目上 右击--&gt;Django--&gt;Shell with django environment </p><p><span></span>如果出现 ImportError: No module named myappname.settings 错误，</p><p><span></span>做如下修改：</p><p><span>在 自己的项目上 右击--&gt;Properties</span>--&gt;PyDev - Django</p><p><span></span>在 Django settings module 的值 myappname.settings 修改为 settings 即可，重启eclipse。</p><p>（如果没有成功，可能项目设置各有区别，我的建议是问题估计就在这，多多尝<span></span>试修改。）</p><p>注：出现这个错误后，研究了好长时间，通过浏览国外的网站 说要 添加设置 DJANGO_SETTINGS_MODULE ，PYTHONPATH 等环境变量</p><p><span></span>都没有成功，最后把 DJANGO_SETTINGS_MODULE ，PYTHONPATH 等环境变量删了，做如上第二步修改成功了。</p><p><span></span>介于国内关于Django+Aptana(或者 Eclipse) 问题的资料甚少，特此记下，以供同道中人参考。</p><p><span></span></p><p><span></span> </p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Django基础入门】空间数据库查询</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>1 ：在views.py中</p><p>//阿里云地图之地址转地理坐标    <a href="http://ditu.aliyun.com/jsdoc/geocode_api.html" rel="noopener" target="_blank">http://ditu.aliyun.com/jsdoc/geocode_api.html</a>  里面有返回的数据格式。<br></p><p>//参考geopy</p><p></p><pre><code class="language-python">address = smart_str(city.name + address).replace(' ','')import tracebackimport xml.dom.minidomfrom urllib2 import urlopenfrom sys import version_infofrom apps.address.models import Cityfrom apps.org.models import Vresourcefrom django.utils.encoding import smart_strfrom xml.parsers.expat import ExpatError################################Quick Search###########################################def search(request):    qs = Vresource.objects.all()    q = request.GET.get('q', '')    result = util.ali_getlocation(q)    result = simplejson.loads(result)    distance = request.GET.get('distance', '1')        if q != '':        myfilter = Q()        q = q.split(" ")                for i in q:            myfilter = myfilter|Q(name__icontains=i)|Q(address__icontains=i)|Q(traffic_info__icontains=i)                    if result['level'] != -1:            geom = fromstr("POINT(%s %s)" % (result['lon'],result['lat']))            distance_from_point = {'km':distance}            qs = qs.filter(geometry__distance_lte=(geom, D(**distance_from_point)))                     myfilter = myfilter|Q(geometry__distance_lte=(geom, D(**distance_from_point)))                        qs = qs.filter(myfilter)    return render_to_response('org/search.html', {'results':qs}, context_instance=RequestContext(request))###############################ali_getlocation##########################################def ali_getlocation(address, city_id=1):    try:        city = City.objects.get(id=city_id)        address = smart_str(city.name + address).replace(' ','').replace(' ','')        page = urlopen('http://gc.ditu.aliyun.com/geocoding?a=%s' %address)        page = decode_page(page)        return page    except:        print "Unexpected error:"        tb = traceback.format_exc()        print tb        def get_encoding(page, contents=None):    # TODO: clean up Py3k support    if version_info &lt; (3, 0):        charset = page.headers.getparam("charset") or None    else:        charset = page.headers.get_param("charset") or None    if charset:        return charset    if contents:        try:            return xml.dom.minidom.parseString(contents).encoding        except ExpatError:            passdef decode_page(page):    contents = page.read()    # HTTP 1.1 defines iso-8859-1 as the 'implied' encoding if none is given    encoding = get_encoding(page, contents) or 'iso-8859-1'    # TODO: clean up Py3k support    if version_info &lt; (3, 0):        return unicode(contents, encoding=encoding).encode('utf-8')    else:        return str(contents, encoding=encoding)        ########################################################################################    </code></pre><p>2 ：输出</p><pre><code class="language-python">{"cityName":"","address":"江苏省,苏州市,虎丘区,","level":5,"alevel":2,"lat":31.28723,"lon":120.55216}</code></pre><h3><span style="font-family:'KaiTi_GB2312';font-size:18px;color:#ff0000;font-weight:normal;background-color:rgb(255,255,204);">转载请注明出处！</span></h3>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android框架进阶】我有一个愿望</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B6_%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%84%BF%E6%9C%9B/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B6_%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%84%BF%E6%9C%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><u><strong><span style="font-size:12px;">我有一个愿望：</span></strong></u></p><strong></strong><ul><li>短期：能有一个我想回的家</li><li>长期：有一天能达到某一门技术领域的巅峰，或者一名出色的技术总监</li></ul><p><span style="color:#ff0000;"><strong><u>我还有好多愿望：</u></strong></span></p><ul><li><strong>比如</strong>有一位相爱的老婆，不因没钱而看不起我，在我穷困失意时陪伴我，而不是有所成就时才看的上我的那些女人</li><li>我还希望将来不会驼背</li></ul><span></span><p><span style="color:rgb(102,102,102);"><strong>愿望终究是愿望：</strong></span></p><ul><li>既没有绝影的才华，也没有黄晓明的帅气，没有左右逢源的气质，没有洞察商机的本领，没有丰富的人脉</li></ul><p><strong>是啊，既然什么都不是，活着是为了什么呢？</strong><br></p><p></p><ul><li>“<span><strong>活着就是为了改变世界，难道还有其他原因吗?</strong></span>”这是<strong>乔布斯</strong>的话</li></ul><span></span><p></p><p><br></p><p></p><blockquote style="border:none;"><p><img src="https://img-blog.csdn.net/20131027173414640" alt=""></p></blockquote><p></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖16〗】XML解析</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A816_XML%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A816_XML%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>====================================================================================================================================</p><p>Sax 解析之初见：</p><p>1，准备一个books.xml 内容可以在下文看到，我的目的就是解析它并在屏幕上打印出来。</p><p>2，新建一个book 类 ，其属性 (id,name,price,publisher)  与 books.xml 里面的的标签  (id,name,price,publisher)  相一致。为了简单容易理解的获取books.xml里面的数据。           当然，并不是必须的，只是为了赋值方便，通俗易懂。</p><p>3，实现一个处理器 class SaxParseXml extends DefaultHandler  。</p><p>      a, 在 DefaultHandler 中重写了 startDocument ，用于开始解析 books.xml，可以在此新建一个List&lt;Book&gt;，以便获取各个book对象数据。 </p><p>      b, 在 startElement     中开始解析 books.xml中 的元素 ，例如，每次 解析到 id 或者 name 时 都会触发一次 characters 进行解析，在characters 中 将获得数据 赋值给 book               类，从而得到数据，</p><p>      c, endElement 结束一个元素(标签)的解析，将book对象加入List&lt;Book&gt;。</p><p>      d, 在endDocument 中结束对 books.xml的解析。</p><p>4，在MainActivity 中 </p><p></p><pre><code class="language-java">InputStream stream =getAssets().open("books.xml");SAXParser parser=SAXParserFactory.newInstance().newSAXParser();SaxParseXml parsexml=new SaxParseXml();parser.parse(stream,parsexml);</code></pre>读取books.xml进入 输入流对象 stream<p></p><p>新建一个解析器对象 parser </p><p>实例化自己的处理器 parsexml</p><p>通过parser.parse(stream,parsexml) 实现用我们自己的处理器来解析xml</p><p>====================================================================================================================================<br></p><p>Dom 解析之初见：</p><p>根据资料可以知道Dom解析将booksxml文件加载进内存中再进行遍历xml节点获取数据。基本的步骤大致如下：</p><p>1，  创建一个 文档构造器 </p><p></p><pre><code class="language-java">DocumentBuilder documentbuider = DocumentBuilderFactory.newInstance().newDocumentBuilder();//用来获取 xml 数据流。</code></pre><p></p><p><br></p><p>2， 将获得 xm l数据流赋值给Document 文档对象document。</p><p></p><pre><code class="language-java">Document document = documentbuider.parse(stream);</code></pre><br><p></p><p>3， 获取 xml 的 所有节点，并获取根节点</p><p><span></span></p><pre><code class="language-java">Element element = document.getDocumentElement(); NodeList booknodes = element.getElementsByTagName("book");</code></pre><br><p></p><p>4,    遍历根节点，从每一个根节点中获得该根节点的所有子节点，再遍历该根节点的所有子节点，即两个嵌套循环。<span></span></p><p><span></span></p><pre><code class="language-java">Element element = document.getDocumentElement();NodeList booknodes = element.getElementsByTagName("book");//获取所有根节点for(int i =0; i &lt; booknodes.getLength(); i++){Element bookelement = (Element)booknodes.item(i);Book book = new Book();NodeList childnodes = bookelement.getChildNodes();//获取该根节点的所有子节点for(int j=0;j&lt;childnodes.getLength();j++){if(childnodes.item(j).getNodeType() == Node.ELEMENT_NODE){if("id".equals(childnodes.item(j).getNodeName())){book.id=childnodes.item(j).getFirstChild().getNodeValue();//获取数据}else if("name".equals(childnodes.item(j).getNodeName())){book.name=childnodes.item(j).getFirstChild().getNodeValue();}else if("price".equals(childnodes.item(j).getNodeName())){book.price=childnodes.item(j).getFirstChild().getNodeValue();}else if("publisher".equals(childnodes.item(j).getNodeName())){book.publisher=childnodes.item(j).getFirstChild().getNodeValue();}}}list.add(book);}</code></pre><p></p><p>====================================================================================================================================<br></p><p>Pull 解析之初见：</p><p>在我查阅所有的资料中，有一句话最为贴切：</p><p>Pull解析与Sax解析很是接近，区别在于：Sax解析从进行到结束不受自己控制，属于把所有数据硬塞给你；Pull解析则不同，每解析一个book 都将需要手动 转到下一个解析事件，属于自己去要。</p><p>基本的步骤大致如下：</p><p>1，  创建一个 pull 解析器实例，并获取 xml 数据流，同时设置字符编码为 “UTF-8”<br></p><p></p><pre><code class="language-java">XmlPullParser pullparse = XmlPullParserFactory.newInstance().newPullParser();pullparse.setInput(stream, "UTF-8");</code></pre><br>2，  获得 pull 解析需要的事件类型，因为触发下一次xml解析需要自己手动进行<p></p><p></p><pre><code class="language-java">int eventype = pullparse.getEventType();</code></pre><br>3，  遍历每一个事件类型，进行相应的解析操作<p></p><p></p><pre><code class="language-java">List&lt;Book&gt; books = null;Book book = null;while(XmlPullParser.END_DOCUMENT!=eventype){String str = pullparse.getName();switch (eventype) {case XmlPullParser.START_DOCUMENT:books = new ArrayList&lt;Book&gt;();break;                case XmlPullParser.START_TAG:                      if(str.equals("book")){                          book = new Book();                      }                    else if(str.equals("id")){                      book.id=pullparse.nextText();                      }                    else if(str.equals("name")){                      book.name=pullparse.nextText();                      }                      else if(str.equals("price")){                      book.price=pullparse.nextText();                      }                      else if(str.equals("publisher")){                      book.publisher=pullparse.nextText();                      }                    break;                                    case XmlPullParser.END_TAG:                      if(str.equals("book")&amp;&amp;book!=null){                      books.add(book);                      }                                            break; default:break;}eventype = pullparse.next();}</code></pre><p></p><p>====================================================================================================================================<br></p><p>具体代码实现如下：</p><p><br>目录结构：</p><p style="text-align:left;"><img src="http://my.csdn.net/uploads/201207/20/1342778019_1485.jpg" width="200" height="400" border="1" alt=""><br></p><p><br></p><p>第一步： Books.xml</p><p></p><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;books&gt;&lt;book&gt;&lt;id&gt;1001&lt;/id&gt;&lt;name&gt;Thinking In Java&lt;/name&gt;&lt;price&gt;80.00&lt;/price&gt;&lt;publisher&gt;人民邮电出版社&lt;/publisher&gt;&lt;/book&gt;&lt;book&gt;&lt;id&gt;1002&lt;/id&gt;&lt;name&gt;Python核心编程&lt;/name&gt;&lt;price&gt;89.00&lt;/price&gt;&lt;publisher&gt;宝哥出版社&lt;/publisher&gt;&lt;/book&gt;&lt;book&gt;&lt;id&gt;1003&lt;/id&gt;&lt;name&gt;C++程序设计语言&lt;/name&gt;&lt;price&gt;99.00&lt;/price&gt;&lt;publisher&gt;机械工业出版社&lt;/publisher&gt;&lt;/book&gt;&lt;book&gt;&lt;id&gt;1004&lt;/id&gt;&lt;name&gt;HTML5&lt;/name&gt;&lt;price&gt;35.00&lt;/price&gt;&lt;publisher&gt;Matt出版社&lt;/publisher&gt;&lt;/book&gt;&lt;book&gt;&lt;id&gt;1005&lt;/id&gt;&lt;name&gt;JavaScript高级编程&lt;/name&gt;&lt;price&gt;85.00&lt;/price&gt;&lt;publisher&gt;清华大学出版社&lt;/publisher&gt;&lt;/book&gt;&lt;book&gt;&lt;id&gt;1006&lt;/id&gt;&lt;name&gt;C++沉思录&lt;/name&gt;&lt;price&gt;91.00&lt;/price&gt;&lt;publisher&gt;苏州职业大学出版社&lt;/publisher&gt;&lt;/book&gt;&lt;/books&gt;</code></pre><br>activity_main.xml<p></p><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="fill_parent"    android:layout_height="fill_parent"    android:baselineAligned="false"    android:orientation="vertical" &gt;    &lt;LinearLayout        android:layout_width="fill_parent"        android:layout_height="wrap_content"        android:layout_weight="2000"        android:orientation="vertical" &gt;        &lt;TextView            android:id="@+id/text"            android:layout_width="fill_parent"            android:layout_height="wrap_content"            android:maxLines="22"            android:scrollbars="vertical"            android:text="@string/hello_world"            tools:context=".MainActivity" /&gt;    &lt;/LinearLayout&gt;    &lt;LinearLayout        android:layout_width="fill_parent"        android:layout_height="wrap_content"        android:layout_weight="1"        android:orientation="horizontal" &gt;        &lt;Button            android:id="@+id/bt_sax"            android:layout_width="wrap_content"            android:layout_height="fill_parent"            android:layout_weight="1"            android:text="@string/sax_parse" /&gt;        &lt;Button            android:id="@+id/bt_dom"            android:layout_width="wrap_content"            android:layout_height="fill_parent"            android:layout_weight="1"            android:text="@string/dom_parse" /&gt;        &lt;Button            android:id="@+id/bt_pull"            android:layout_width="wrap_content"            android:layout_height="fill_parent"            android:layout_weight="1"            android:text="@string/pull_parse" /&gt;    &lt;/LinearLayout&gt;&lt;/LinearLayout&gt;</code></pre><p><br></p>第二步：Book.java<p></p><pre><code class="language-java">package com.example.matt;public class Book {public String id;public String name;public String price;public String publisher;}</code></pre><br>第三步：SaxParseXml.java<br><p></p><pre><code class="language-java">package com.example.matt;import java.util.ArrayList;import java.util.List;import org.xml.sax.Attributes;import org.xml.sax.SAXException;import org.xml.sax.helpers.DefaultHandler;public class SaxParseXml extends DefaultHandler {public List&lt;Book&gt; list;public Book book;public String str;public void startDocument() throws SAXException {list = new ArrayList&lt;Book&gt;();}public void startElement(String uri, String localName, String qName,Attributes attributes) throws SAXException {if (qName.equals("book")) {book = new Book();}this.str = qName;}public void endElement(String uri, String localName, String qName)throws SAXException {if (qName.equals("book")) {this.list.add(book);}this.str = null;}public void endDocument() throws SAXException {}public void characters(char[] ch, int start, int length)throws SAXException {if (this.str != null) {String data = new String(ch, start, length);if (this.str.equals("id")) {this.book.id = data;} else if (this.str.equals("name")) {this.book.name = data;} else if (this.str.equals("price")) {this.book.price = data;} else if (this.str.equals("publisher")) {this.book.publisher = data;}}}}</code></pre><p><br></p><p>第四步：DomParseXml.java<br></p><p></p><pre><code class="language-java">package com.example.matt;import android.annotation.SuppressLint;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;@SuppressLint("ParserError")public class DomParseXml {@SuppressLint("ParserError")public List&lt;Book&gt;getbooks(InputStream stream) throws Exception{List&lt;Book&gt;list = new ArrayList&lt;Book&gt;();DocumentBuilder documentbuider = DocumentBuilderFactory.newInstance().newDocumentBuilder();Document document = documentbuider.parse(stream);Element element = document.getDocumentElement();NodeList booknodes = element.getElementsByTagName("book");for(int i =0; i &lt; booknodes.getLength(); i++){Element bookelement = (Element)booknodes.item(i);Book book = new Book();NodeList childnodes = bookelement.getChildNodes();for(int j=0;j&lt;childnodes.getLength();j++){if(childnodes.item(j).getNodeType() == Node.ELEMENT_NODE){if("id".equals(childnodes.item(j).getNodeName())){book.id=childnodes.item(j).getFirstChild().getNodeValue();}else if("name".equals(childnodes.item(j).getNodeName())){book.name=childnodes.item(j).getFirstChild().getNodeValue();}else if("price".equals(childnodes.item(j).getNodeName())){book.price=childnodes.item(j).getFirstChild().getNodeValue();}else if("publisher".equals(childnodes.item(j).getNodeName())){book.publisher=childnodes.item(j).getFirstChild().getNodeValue();}}}list.add(book);}stream.close();return list;}}</code></pre><p></p><p><br></p>第五步：PullParseXml.java<br><pre><code class="language-java">package com.example.matt;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import org.xmlpull.v1.XmlPullParser;import org.xmlpull.v1.XmlPullParserFactory;public class PullParseXml {public List&lt;Book&gt;getbooks(InputStream stream) throws Exception{XmlPullParser pullparse = XmlPullParserFactory.newInstance().newPullParser();pullparse.setInput(stream, "UTF-8");int eventype = pullparse.getEventType();    List&lt;Book&gt; books = null;Book book = null;while(XmlPullParser.END_DOCUMENT!=eventype){String str = pullparse.getName();switch (eventype) {case XmlPullParser.START_DOCUMENT:books = new ArrayList&lt;Book&gt;();break;                case XmlPullParser.START_TAG:                      if(str.equals("book")){                          book = new Book();                      }                    else if(str.equals("id")){                      book.id=pullparse.nextText();                      }                    else if(str.equals("name")){                      book.name=pullparse.nextText();                      }                      else if(str.equals("price")){                      book.price=pullparse.nextText();                      }                      else if(str.equals("publisher")){                      book.publisher=pullparse.nextText();                      }                    break;                                    case XmlPullParser.END_TAG:                      if(str.equals("book")&amp;&amp;book!=null){                      books.add(book);                      }                                            break; default:break;}eventype = pullparse.next();}stream.close();return books;}}</code></pre><br><p>第六步：MainActivity.java</p><p></p><pre><code class="language-java">package com.example.matt;import java.io.IOException;import java.io.InputStream;import java.util.List;import javax.xml.parsers.FactoryConfigurationError;import javax.xml.parsers.ParserConfigurationException;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import org.xml.sax.SAXException;import android.os.Bundle;import android.app.Activity;import android.text.method.ScrollingMovementMethod;import android.view.KeyEvent;import android.view.Menu;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;public class MainActivity extends Activity {public int back_count = 1;public Button bt_sax;public Button bt_dom;public Button bt_pull;public InputStream stream;public void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);back_count = 1;bt_sax = (Button) findViewById(R.id.bt_sax);bt_dom = (Button) findViewById(R.id.bt_dom);bt_pull = (Button) findViewById(R.id.bt_pull);bt_sax.setOnClickListener(bt_listener);bt_dom.setOnClickListener(bt_listener);bt_pull.setOnClickListener(bt_listener);}public OnClickListener bt_listener = new OnClickListener() {public void onClick(View v) {TextView text = (TextView) findViewById(R.id.text);text.setMovementMethod(ScrollingMovementMethod.getInstance());List&lt;Book&gt; books=null;try {stream = getAssets().open("books.xml");} catch (IOException e1) {e1.printStackTrace();}switch (v.getId()) {case R.id.bt_sax:try {SAXParser parser = SAXParserFactory.newInstance().newSAXParser();SaxParseXml saxparse = new SaxParseXml();parser.parse(stream, saxparse);stream.close();books = saxparse.list;String str = "";for (Book book : books) {str += "&gt;&gt;&gt;id:" + book.id + "\n&gt;&gt;&gt;name:" + book.name+ "\n&gt;&gt;&gt;price:" + book.price + "\n&gt;&gt;&gt;publisher:"+ book.publisher + "\n\n";}text.setText("Sax解析:\n"+str);} catch (IOException e) {// TODO Auto-generated catch blocke.printStackTrace();} catch (ParserConfigurationException e) {// TODO Auto-generated catch blocke.printStackTrace();} catch (SAXException e) {// TODO Auto-generated catch blocke.printStackTrace();} catch (FactoryConfigurationError e) {// TODO Auto-generated catch blocke.printStackTrace();}break;case R.id.bt_dom:DomParseXml domparse = new DomParseXml();try {books = domparse.getbooks(stream);} catch (Exception e) {// TODO Auto-generated catch blocke.printStackTrace();}String str = "";for (Book book : books) {str += "---id:" + book.id + "\n---name:" + book.name+ "\n---price:" + book.price + "\n---publisher:"+ book.publisher + "\n\n";}text.setText("Dom解析:\n"+str);break;case R.id.bt_pull:PullParseXml pullparse = new PullParseXml();try {books = pullparse.getbooks(stream);} catch (Exception e) {// TODO Auto-generated catch blocke.printStackTrace();}String booklist = "";for (Book book : books) {booklist += "***id:" + book.id + "\n***name:" + book.name+ "\n***price:" + book.price + "\n***publisher:"+ book.publisher + "\n\n";}text.setText("Pull解析:\n"+booklist);break;}}};public boolean onCreateOptionsMenu(Menu menu) {getMenuInflater().inflate(R.menu.activity_main, menu);return true;}public boolean onKeyDown(int keyCode, KeyEvent event) {if (keyCode == KeyEvent.KEYCODE_BACK) {if (back_count == 1) {Toast.makeText(this, "再按一次退出", 2000).show();back_count++;} else if (back_count == 2) {finish();}return true;} else {return super.onKeyDown(keyCode, event);}}}</code></pre><br><br><p></p><p><br></p>运行效果：<p><br></p><p><img src="http://my.csdn.net/uploads/201207/20/1342778347_8604.jpg" width="230" height="390" alt=""><img src="http://my.csdn.net/uploads/201207/20/1342778370_3862.jpg" width="230" height="390" alt=""><img src="http://my.csdn.net/uploads/201207/20/1342778461_2104.jpg" width="230" height="390" alt=""><img src="http://my.csdn.net/uploads/201207/20/1342778409_9692.jpg" width="230" height="390" alt=""></p><p><br></p><p><img src="http://my.csdn.net/uploads/201207/20/1342778428_3086.jpg" width="230" height="390" alt=""></p><p><br></p><p>That's all .</p><p><span style="color:rgb(54,46,43);font-family:Arial;font-size:14.44444465637207px;line-height:25.98958396911621px;"><span style="color:rgb(255,0,0);"><u><strong>转载请注明出处！</strong></u></span></span><br><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【数据结构与算法】二叉树</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><br></p><p><strong><span style="color:#009900;">头文件 BTree.h</span></strong></p><p></p><pre><code class="language-cpp">#ifndef BTREE_H#define BTREE_H#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;template&lt;class T&gt;                                     //树节点类class BNode{public:    BNode&lt;T&gt;():left(NULL),right(NULL),data(T()){}    BNode&lt;T&gt; *left;    BNode&lt;T&gt; *right;    T data;};template&lt;class T&gt;                                     //二叉树类class BTree{public:    BNode&lt;T&gt; *root;    BTree&lt;T&gt;():root(NULL){}    ~BTree&lt;T&gt;()    {        DestoryBTree(root);    }    void CreateBTree(BNode&lt;T&gt;* &amp;mBTree);              //构造二叉树    void PreorderDisplay(BNode&lt;T&gt;* &amp;mBTree);          //前序遍历    void InorderDisplay(BNode&lt;T&gt;* &amp;mBTree);           //中序遍历    void PostorderDisplay(BNode&lt;T&gt;* &amp;mBTree);         //后序遍历    void LevelorderDisplay(BNode&lt;T&gt;* &amp;mBTree);        //层次遍历    void DestoryBTree(BNode&lt;T&gt;* &amp;mBTree);             //毁灭二叉树};template&lt;class T&gt;void BTree&lt;T&gt;::CreateBTree(BNode&lt;T&gt; *&amp;mBTree){    BNode&lt;T&gt; *tmpNode=new BNode&lt;T&gt;();    cout&lt;&lt;"Input:\t";    cin&gt;&gt;tmpNode-&gt;data;    if(tmpNode-&gt;data=="#")    {        delete tmpNode;        mBTree=NULL;        return;    }    mBTree=tmpNode;    CreateBTree(mBTree-&gt;left);    CreateBTree(mBTree-&gt;right);}template&lt;class T&gt;void BTree&lt;T&gt;::PreorderDisplay(BNode&lt;T&gt; *&amp;mBTree)     //前序遍历{    if(mBTree)    {        cout&lt;&lt;mBTree-&gt;data&lt;&lt;" ";        PreorderDisplay(mBTree-&gt;left);        PreorderDisplay(mBTree-&gt;right);    }}template&lt;class T&gt;void BTree&lt;T&gt;::InorderDisplay(BNode&lt;T&gt; *&amp;mBTree)      //中序遍历{    if(mBTree)    {        InorderDisplay(mBTree-&gt;left);        cout&lt;&lt;mBTree-&gt;data&lt;&lt;" ";        InorderDisplay(mBTree-&gt;right);    }}template&lt;class T&gt;void BTree&lt;T&gt;::PostorderDisplay(BNode&lt;T&gt; *&amp;mBTree)    //后序遍历{    if(mBTree)    {        PostorderDisplay(mBTree-&gt;left);        PostorderDisplay(mBTree-&gt;right);        cout&lt;&lt;mBTree-&gt;data&lt;&lt;" ";    }}template&lt;class T&gt;void BTree&lt;T&gt;::LevelorderDisplay(BNode&lt;T&gt; *&amp;mBTree)   //层次遍历{    if(mBTree)    {        BNode&lt;T&gt; *p=NULL;        queue&lt;BNode&lt;T&gt; *&gt;BNodeQueue;        BNodeQueue.push(mBTree);        while(!BNodeQueue.empty())        {            p=BNodeQueue.front();            cout&lt;&lt;p-&gt;data&lt;&lt;" ";            BNodeQueue.pop();            if(p-&gt;left)                BNodeQueue.push(p-&gt;left);            if(p-&gt;right)                BNodeQueue.push(p-&gt;right);        }    }}template&lt;class T&gt;void BTree&lt;T&gt;::DestoryBTree(BNode&lt;T&gt; *&amp;mBTree)        //毁灭二叉树{    if(mBTree)    {        DestoryBTree(mBTree-&gt;left);        DestoryBTree(mBTree-&gt;right);        delete mBTree;    }}#endif // BTREE_H</code></pre><p><strong><span style="color:#009900;"><br></span></strong></p><p><strong><span style="color:#009900;">主函数 main.cpp</span></strong></p><pre><code class="language-cpp">#include &lt;iostream&gt;#include "BTree.h"using namespace std;int main(){    cout&lt;&lt;"Create A BinaryTree Now :"&lt;&lt;endl;    BTree&lt;string&gt; mBTree;    mBTree.CreateBTree(mBTree.root);    cout&lt;&lt;endl&lt;&lt;"PreorderDisplay"&lt;&lt;endl;    mBTree.PreorderDisplay(mBTree.root);    cout&lt;&lt;endl&lt;&lt;"InorderDisplay"&lt;&lt;endl;    mBTree.InorderDisplay(mBTree.root);    cout&lt;&lt;endl&lt;&lt;"PostorderDisplay"&lt;&lt;endl;    mBTree.PostorderDisplay(mBTree.root);    cout&lt;&lt;endl&lt;&lt;"LevelorderDisplay"&lt;&lt;endl;    mBTree.LevelorderDisplay(mBTree.root);    return 0;}</code></pre><br><span style="color:#009900;"><strong>结果</strong></span><br><p><img src="" alt=""></p><p><img src="http://img.my.csdn.net/uploads/201304/23/1366704968_7137.png" alt=""><br></p><p><span style="color:#009900;"><strong>持续更新。</strong></span></p><p><strong><span style="color:#ff0000;">转载请注明出处！</span></strong></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Django基础入门】Breadcrumbs导航栏</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_Breadcrumbs%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_Breadcrumbs%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                1：添加 django-breadcrumbs<p></p><pre><code class="language-plain">pip install django-breadcrumbs</code></pre><br>2：a，在 MIDDLEWARE_CLASSES 添加 breadcrumbs.middleware.BreadcrumbsMiddleware<br><p>      b，如果在 TEMPLATE_CONTEXT_PROCESSORS 没有添加 context processor，那么就添上它，如下：</p><pre><code class="language-python">TEMPLATE_CONTEXT_PROCESSORS = (    "django.contrib.auth.context_processors.auth",    "django.core.context_processors.debug",    "django.core.context_processors.i18n",    "django.core.context_processors.media",    "django.contrib.messages.context_processors.messages",    'django.core.context_processors.request',)</code></pre><p><br></p><p>3：在模版中添加如下模块（可以先跳过这一步，待会回头在看）</p><p></p><pre><code class="language-html">{% for breadcrumb in request.breadcrumbs %}&lt;a href="{{ breadcrumb.url }}"&gt;{{ breadcrumb.name }}&lt;/a&gt;{% if not forloop.last %} » {% endif %}{% endfor %}</code></pre><br>4：在view.py中添加如下信息<p></p><p></p><pre><code class="language-python">def activity(request):        request.breadcrumbs([(_("homepage"),'/'),                         (_("activity"),'/activity/')                         ])    activities = Activity.objects.all()    return render_to_response('org/activity.html' , {'activities':activities} , context_instance=RequestContext(request)) </code></pre><p></p><p><br></p>即：将 <pre><code class="language-python"> request.breadcrumbs([(_("homepage"),'/'),                         (_("activity"),'/activity/')                         ])</code></pre>放到任何与页面显示有关的 view 中（比如 render_to_response 返回了一个模版），它不会影响你的代码，所以，添加上后可以忽视它，<p>然后在相应的模版里加上 如上 第三步 代码，即可显示 导航栏。</p><p><br></p><p>优化：</p><p>当然，一般模版有继承关系，例如导航栏放在所有模版的公共模块（header.html），其它所有子模版集成header.html ，那么仅仅需要在 header.html 中添加如上第三步代码即可。<br><br></p><p></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android基础入门〖19〗】ExpandableListView酷我音乐界面的下拉菜单</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A819_ExpandableListView%E9%85%B7%E6%88%91%E9%9F%B3%E4%B9%90%E7%95%8C%E9%9D%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A819_ExpandableListView%E9%85%B7%E6%88%91%E9%9F%B3%E4%B9%90%E7%95%8C%E9%9D%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><span style="font-weight:bold;"><span style="color:#330000;"></span></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<span style="color:#6a3906;"></span><a href="http://blog.csdn.net/mkrcpp/article/details/13170649" rel="noopener" target="_blank"><span style="color:#6a3906;">http://blog.csdn.net/mkrcpp/article/details/</span><span style="color:#6a3906;">13170649</span></a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p><p style="color:rgb(54,46,43);line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"></span></span></p><p style="color:rgb(54,46,43);font-family:Arial;line-height:25.98958396911621px;"><span style="font-size:14px;"></span></p><p><strong><span style="color:#330000;"><span style="font-size:14px;"><u>研究</u></span>了一夜</span><span style="color:#330000;">，</span><span style="color:#009900;">终于完毕，有一种成就感，虽然没什么成就......</span></strong></p><p></p><ul><li><strong>本以为那种下拉菜单方式是通过嵌套 ExpandableListView 搞定，甚是麻烦，最后因为子 ExpandableListView  的布局总是莫名其妙的多一点而止步。</strong><span style="font-weight:bold;">无奈之下，突然意识到我钻了牛角尖，这是好事 :)</span></li><li><span style="color:rgb(255,102,0);font-size:14px;"><strong><u>非常珍惜</u></strong></span><span style="color:rgb(255,102,0);"><strong>这些自己研究出来的东西，但是想想这点不过沧海一粟，重在分享，避免后来人再慢慢的研究，熬夜。</strong></span></li></ul><p></p><p><strong><span style="color:#ff0000;">点睛之笔：</span></strong></p><p></p><ul><li>用一个 ExpandableListView ，在其 Child 布局中设置好<strong><u>功能</u></strong>布局，事先<strong><u>隐藏</u></strong>，当我点击右侧的更多按钮时，在显示出来。</li><li>事实证明这是多么<strong><u>正确，省事，省时</u></strong>的思想，哈哈。</li></ul><p></p><p><strong>靓照：</strong></p><p></p><ul><li><img src="https://img-blog.csdn.net/20131028100335187" width="240" height="427" alt=""><img src="https://img-blog.csdn.net/20131028100349828" width="240" height="427" alt=""></li><li><img src="https://img-blog.csdn.net/20131028100343093" width="240" height="427" alt=""><br></li></ul><div><br></div><div><br></div><h2><u>详细步骤：</u></h2><div><div><strong></strong><div style="background-color:rgb(204,204,204);">这里就已上面第二张图为例吧，PlayList（播放列表）</div></div><div><span style="background-color:rgb(204,204,204);">功能描述：</span></div><div><ul><li><span style="background-color:rgb(204,204,204);">点击播放列表时，出现该列表下的所有歌曲</span></li><li><span style="background-color:rgb(204,204,204);">每一首歌曲都可以点击右侧的“更多”按钮，出现下面的功能菜单（有“喜欢”，“添加到”...的那一个）</span></li></ul></div></div><h5><span style="color:#ff0000;">NO.1 主布局文件</span></h5><div>playlist_fragment.xml</div><div><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    android:orientation="vertical"    android:layout_width="match_parent"    android:layout_height="match_parent"     android:background="#191c1f"    xmlns:tools="http://schemas.android.com/tools" &gt;        &lt;ExpandableListView    android:id="@+id/playlist_list"    android:layout_width="match_parent"    android:layout_height="wrap_content"    android:cacheColorHint="#00000000"    android:childDivider="#00000000"    android:dividerHeight="1dp"    android:groupIndicator="@null"    android:fastScrollEnabled="true"/&gt;&lt;/LinearLayout&gt;</code></pre><h5></h5><h5><span style="color:rgb(255,0,0);">NO.2  ExpandableListView的</span>父布局<span style="color:rgb(255,0,0);">文件</span></h5><p><span style="font-weight:normal;">playlist_listitem_parent.xml<br></span></p><p></p><pre><code class="language-html"><span style="font-weight:normal;">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="40dp"    android:background="@drawable/playlist_listitem_selector"    tools:ignore="HardcodedText" &gt;&lt;TextView    android:id="@+id/playlist_parent_text"    android:layout_width="match_parent"    android:layout_height="40dp"    android:paddingLeft="3dp"    android:gravity="left|center_vertical"    android:layout_gravity="left|center_vertical"    android:text="M"    android:textColor="@color/whitesmoke"    android:textSize="15sp"    android:textStyle="bold"    tools:ignore="HardcodedText" /&gt;&lt;/LinearLayout&gt;</span></code></pre><span style="font-weight:normal;"></span><h5><span style="color:rgb(255,0,0);">NO.3  ExpandableListView的</span>子布局<span style="color:#ff0000;">文件</span></h5><p>default_listitem_child.xml<br></p><p></p><pre><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="50dp"android:orientation="vertical"android:background="#00000000"android:paddingLeft="3dp"    tools:ignore="HardcodedText" &gt;    &lt;LinearLayout        android:layout_width="match_parent"    android:layout_height="wrap_content"    android:orientation="horizontal"    android:background="@drawable/default_listitem_selector"android:paddingLeft="10dp"android:paddingTop="10dp"android:paddingBottom="10dp"&gt;    &lt;LinearLayout        android:layout_width="wrap_content"        android:layout_height="wrap_content"        android:orientation="vertical" &gt;        &lt;TextView            android:id="@+id/default_music_name"            android:layout_width="match_parent"            android:layout_height="wrap_content"            android:layout_weight="1"            android:text="大城小爱"            android:textSize="15sp"            android:textStyle="bold"            android:gravity="center_vertical|left"            android:textColor="@color/whitesmoke" /&gt;                &lt;TextView            android:id="@+id/default_singer_name"            android:layout_width="match_parent"            android:layout_height="wrap_content"            android:layout_weight="1"            android:text="王力宏"            android:textSize="12sp"            android:gravity="center_vertical|left"            android:textColor="#8d8d8d" /&gt;    &lt;/LinearLayout&gt;    &lt;View android:layout_height="match_parent" android:layout_width="0dp" android:layout_weight="1"/&gt;    &lt;ImageView        android:id="@+id/default_more"        android:layout_width="wrap_content"        android:layout_height="wrap_content"        android:layout_gravity="right|center_vertical"        android:contentDescription="rightbtn"        android:scaleType="fitCenter"        android:focusable="false"        android:clickable="true"        android:src="@drawable/default_item_more_selector"/&gt;    &lt;/LinearLayout&gt;&lt;LinearLayout    android:id="@+id/settings_layout"android:layout_width="match_parent"  android:layout_height="wrap_content"  android:visibility="gone"  android:background="@color/black"  android:orientation="horizontal"&gt;    &lt;TextView        android:drawableTop="@drawable/settings_love_selector"android:layout_width="wrap_content"  android:layout_height="wrap_content"  android:layout_weight="1"  android:clickable="true"  android:focusable="false"  android:textColor="@color/whitesmoke"  android:gravity="center"  android:text="喜欢"/&gt;    &lt;TextView        android:layout_marginLeft="10dp"        android:drawableTop="@drawable/settings_add_selector"android:layout_width="wrap_content"  android:layout_height="wrap_content"  android:clickable="true"  android:focusable="false"  android:layout_weight="1"  android:textColor="@color/whitesmoke"  android:gravity="center"  android:text="添加到"/&gt;    &lt;TextView        android:layout_marginLeft="10dp"        android:drawableTop="@drawable/settings_del_selector"android:layout_width="wrap_content"  android:layout_height="wrap_content"  android:layout_weight="1"  android:clickable="true"  android:focusable="false"  android:textColor="@color/whitesmoke"  android:gravity="center"  android:text="删除"/&gt;    &lt;TextView        android:layout_marginLeft="10dp"        android:drawableTop="@drawable/settings_info_selector"android:layout_width="wrap_content"  android:layout_height="wrap_content"  android:layout_weight="1"  android:textColor="@color/whitesmoke"  android:clickable="true"  android:focusable="false"  android:gravity="center"  android:text="信息"/&gt;    &lt;TextView        android:layout_marginLeft="10dp"        android:drawableTop="@drawable/settings_set_selector"android:layout_width="wrap_content"  android:layout_height="wrap_content"  android:layout_weight="1"  android:textColor="@color/whitesmoke"  android:gravity="center"  android:clickable="true"  android:focusable="false"  android:text="设置"/&gt;&lt;/LinearLayout&gt;&lt;/LinearLayout&gt;</code></pre><p></p><h5><span style="color:#ff0000;">NO.4  自定义BaseExpandableListAdapter</span></h5><pre><code class="language-java">package com.supermusic.adapter;import java.util.ArrayList;import java.util.HashMap;import com.supermusic.R;import com.supermusic.util.Music;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.widget.BaseExpandableListAdapter;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;@SuppressWarnings("unchecked")public class Playlist_ExListAdapter extends BaseExpandableListAdapter {private Context context=null;private ArrayList&lt;HashMap&lt;String,Object&gt;&gt;allData=null;public Playlist_ExListAdapter(Context context, ArrayList&lt;HashMap&lt;String,Object&gt;&gt;allData){this.context=context;this.allData=allData;}@Overridepublic int getGroupCount() {// 返回组的数量return allData.size();}@Overridepublic int getChildrenCount(int groupPosition) {// 返回指定组的 Child 数量HashMap&lt;String,Object&gt;oneData=(HashMap&lt;String,Object&gt;)allData.get(groupPosition);ArrayList&lt;Music&gt;childData=(ArrayList&lt;Music&gt;)oneData.get("childData");return childData.size();}@Overridepublic Object getGroup(int groupPosition) {// 返回指定组的数据HashMap&lt;String,Object&gt;oneData=(HashMap&lt;String,Object&gt;)allData.get(groupPosition);String parentData=(String)oneData.get("parentData");return parentData;}@Overridepublic Object getChild(int groupPosition, int childPosition) {// 返回指定组之指定 Child 的数据HashMap&lt;String,Object&gt;oneData=(HashMap&lt;String,Object&gt;)allData.get(groupPosition);ArrayList&lt;Music&gt;childData=(ArrayList&lt;Music&gt;)oneData.get("childData");return childData.get(childPosition);}@Overridepublic long getGroupId(int groupPosition) {// 返回指定组的IDreturn groupPosition;}@Overridepublic long getChildId(int groupPosition, int childPosition) {// 返回指定组之指定 Child 的IDreturn childPosition;}@Overridepublic boolean hasStableIds() {// 组以及 Child 的ID是否是固定不变的？return false;}@Overridepublic View getGroupView(int groupPosition, boolean isExpanded,View convertView, ViewGroup parent) {// 返回组的布局convertView=LayoutInflater.from(context).inflate(R.layout.playlist_listitem_parent, null);HashMap&lt;String,Object&gt;oneData=(HashMap&lt;String,Object&gt;)allData.get(groupPosition);String parentData=(String)oneData.get("parentData");TextView textview=(TextView)convertView.findViewById(R.id.playlist_parent_text);textview.setText(parentData);return convertView;}@Overridepublic View getChildView(int groupPosition, final int childPosition,boolean isLastChild, View convertView, ViewGroup parent) {// 返回 Child 的布局convertView=LayoutInflater.from(context).inflate(R.layout.default_listitem_child, null);HashMap&lt;String,Object&gt;oneData=(HashMap&lt;String,Object&gt;)allData.get(groupPosition);ArrayList&lt;Music&gt;childData=(ArrayList&lt;Music&gt;)oneData.get("childData");Music music = childData.get(childPosition);TextView music_name=(TextView)convertView.findViewById(R.id.default_music_name);TextView singer_name=(TextView)convertView.findViewById(R.id.default_singer_name);ImageView btn_more=(ImageView)convertView.findViewById(R.id.default_more);final LinearLayout settings_layout=(LinearLayout)convertView.findViewById(R.id.settings_layout);music_name.setText(music.music_name);singer_name.setText(music.singer_name);btn_more.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {settings_layout.setVisibility(settings_layout.getVisibility()==View.GONE ? View.VISIBLE : View.GONE );}});return convertView;}@Overridepublic boolean isChildSelectable(int groupPosition, int childPosition) {// 指定的 Child 是否是可选择的return true;}}</code></pre><h5><span style="color:#ff0000;">NO.5  绑定数据</span></h5></div><div><pre><code class="language-java">ExpandableListView listview=(ExpandableListView)view.findViewById(R.id.playlist_list);ArrayList&lt;HashMap&lt;String,Object&gt;&gt;allData = new ArrayList&lt;HashMap&lt;String,Object&gt;&gt;();//所有数据HashMap&lt;String,Object&gt;oneData = new HashMap&lt;String,Object&gt;();ArrayList&lt;Music&gt;childData= new ArrayList&lt;Music&gt;();//模拟数据 startoneData = new HashMap&lt;String,Object&gt;();childData= new ArrayList&lt;Music&gt;();oneData.put("parentData", "夜的钢琴曲");for(int j=0;j&lt;4;j++){Music music=new Music();music.music_name="夜的钢琴曲第"+String.valueOf(j)+"首";music.singer_name="石进";childData.add(music);}oneData.put("childData", childData);allData.add(oneData);for(int i=1;i&lt;7;i++){oneData = new HashMap&lt;String,Object&gt;();childData= new ArrayList&lt;Music&gt;();oneData.put("parentData", "playlist:"+String.valueOf(i));for(int j=0;j&lt;4;j++){Music music=new Music();music.music_name="music:"+String.valueOf(j);music.singer_name="singer:"+String.valueOf(j);childData.add(music);}oneData.put("childData", childData);allData.add(oneData);}//模拟数据 endPlaylist_ExListAdapter adapter =new Playlist_ExListAdapter(getActivity(),allData);listview.setAdapter(adapter);for (int i = 0; i &lt; adapter.getGroupCount(); i++)//关闭所有listview.collapseGroup(i);//listview.collapseGroup(i);//展开所有</code></pre></div><div><span style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.984375px;"><strong></strong></span></div><br><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<span style="color:#6a3906;"></span><a href="http://blog.csdn.net/mkrcpp/article/details/13170649" rel="noopener" target="_blank"><span style="color:rgb(106,57,6);">http://blog.csdn.net/mkrcpp/article/details/</span><span style="color:rgb(106,57,6);">13170649</span></a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Django基础入门】生产环境搭建</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Django%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <strong><u>1 服务器安装和配置</u></strong><p><strong><u>1.1 安装 Centos6.3</u></strong></p><p><span><span></span>此处省略，与本文当无关。</span></p><p><strong><u>1.2 更新系统</u></strong></p><p><span></span>wget http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.i686.rpm</p><p><span></span>rpm –ivh rpmforge-release-0.5.2-2.el6.rf.i686.rpm //更新yum源</p><span></span>yum update //刚装好系统后，更新数据<br><p><span></span>yum clean all //清除缓存</p><p><strong><u>1.3 默认开机联网</u></strong></p><p><span></span><span>此处省略，与本文当无关。</span></p><p><strong><u>1.4 开放IP 端口</u></strong></p><p><span></span>yum install iptables</p><p><span></span>vi /etc/sysconfig/iptables</p><p></p><pre><code class="language-python"># Firewall configuration written by system-config-firewall# Manual customization of this file is not recommended.*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 5432 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 8000 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT</code></pre><p></p><p><span></span>service iptables restart</p><span></span>service iptables restart<br><p><span></span>service iptables status</p><p><strong><u>1.5 关闭 selinux</u></strong></p><p><span></span>vi /etc/selinux/config</p><span></span>//将SELINUX="" 修改为 SELINUX=disabled <br><span></span>//然后重启。如果不想重启系统，使用命令<br><span></span>setenforce 0<br><span></span>******************************************************************************************************<br><span></span>setenforce 1 //设置SELinux 成为enforcing模式<br><span></span>setenforce 0 //设置SELinux 成为permissive模式 <br><span></span>******************************************************************************************************<br><span></span>//或者<br><span></span>/usr/sbin/setenforce 0 立刻关闭 SELINUX<br><span></span>/usr/sbin/setenforce 1 立刻启用 SELINUX<br><p><span></span>echo "/usr/sbin/setenforce 0" &gt;&gt; /etc/rc.local 默认启动时关闭</p><p><strong><u>1.6 创建 www用户 </u></strong></p><div><span></span>useradd www </div><div>passwd www</div><span></span>vi /etc/sudoers<br><span></span>99 www ALL = (ALL) ALL<br> <br><p><strong><u>2 Python2.7.2 安装与配置</u></strong></p><p><strong><u>2.1 下载Python2.7.2</u></strong></p><span></span>wget http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tgz<br><span></span>tar xvfz Python-2.7.2.tgz <br><span></span>cd Python-2.7.2<br><br><span></span>yum -y install gcc gdbm-devel readline-devel ncurses-devel zlib-devel sqlite-devel db4-devel tk-devel bluez-libs-devel make //编译所需工具包<br><span></span>yum install bzip2-devel //no model named bz2<br><span></span>yum install gcc-c++<br><span></span>yum install openssl-devel<br><span></span>//yum -y install gcc automake autoconf libtool make //Centos5.7<br><br><span></span>Error:<br><span></span>kernel-2.6.32-220.13.1.el6.x86_64 has missing requires of kernel-firmware &gt;= ('0', '2.6.32', '220.13.1.el6')<br><p><span></span>修改文件vi /etc/yum.conf 将exclude=kernel*前加注释即可解决</p><p><strong><u>2.2 编译 Python2.7.2 并且包含openssl 模块</u></strong></p><span></span>vi Modules/Setup.dist<br><br><pre><code class="language-python">214 SSL=/usr/local/ssl215 _ssl _ssl.c \216 -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \217 -L$(SSL)/lib -lssl -lcrypto </code></pre><br><span></span>./configure --enable-shared <br><span></span>make<br><span></span>make install<br><br><span></span>// 需要时 重启计算机 reboot<br><span></span>libpython2.7.so.1.0的错误解决办法：<br><span></span>vi /etc/ld.so.conf 添加/usr/local/lib<br><span></span>/sbin/ldconfig<br><p><span></span>/sbin/ldconfig -v</p><p><strong><u>2.3 检测是否能成功导入bz2 包</u></strong></p><span></span>#python //此时默认的python应该是2.7.2<br><p></p><pre><code class="language-python">&gt;&gt;&gt; import bz2&gt;&gt;&gt; bz2.__doc__'The python bz2 module provides a comprehensive interface for\nthe bz2 compression library. It implements a complete file\ninterface, one shot (de<span></span>)compression functions, and types for\nsequential (de)compression.\n'&gt;&gt;&gt;</code></pre><p></p><p><strong><u>2.4 安装 virtualenv</u></strong></p><span></span>http://pypi.python.org/pypi/virtualenv#downloads //下载 virtualenv<br><span></span>******************************************************************************************************<br><span></span>wget http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.8.1.tar.gz#md5=3aebe32859aa4512e1e679834c10f7bf //快捷下载<br><span></span>******************************************************************************************************<br><span></span>tar -zxvf virtualenv-1.8.1.tar.gz<br><span></span>cd virtualenv-1.8.1<br><p><span></span>python setup.py install </p><p><strong><u>3 Git的安装与配置</u></strong></p><p><strong><u>3.1 安装git 并且下载仓库代码</u></strong></p><span></span>yum install git<br><span></span>git config --global user.name "****"<br><span></span>git config --global user.email ****<br><span></span>git clone  ****<br><br><span></span>Error:(gnome-ssh-askpass:3160): Gtk-WARNING **: cannot open display:<br><p><span></span>解决办法:unset SSH_ASKPASS</p><p><span><span></span>此处省略，与本文当无关。</span></p><p><strong><br></strong></p><p><strong><u>3.6 windows 下 Django 图片上传问题</u></strong></p><span></span>http://www.pythonware.com/products/pil/<br><p><span></span>下载安装对应的库，然后pip 重新安装PIL。</p><p><u><strong>3.7 Centos6.3 下 Django 图片上传问题</strong></u></p><span></span>echo $PATH<br><span></span>如果没有/usr/lib/<br><span></span>export PATH=/usr/lib/:$PATH<br><span></span>yum install libjpeg libjpeg-devel<br><span></span>ln -s /usr/lib64/libjpeg.so /usr/lib/libjpeg.so<br><span></span>打开virtualenv<br><span></span>pip uninstall PIL<br><span></span>pip install PIL<br><span></span>清除浏览器缓存，ok!<br><span></span>注：有的动态图片无法显示的话 pip install pillow<br> <br><p><strong><u>4 njinx 的安装与配置</u></strong></p><span></span>rpm –ivh <br><span></span>http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm<br><span></span>yum install nginx<br><span></span>service nginx start<br><br><span></span>wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz<br><span></span>解压后 make<br><span></span><p>cp uwsgi /usr/bin</p><p><br></p><p>配置nginx</p><p>/etc/nginx/nginx.conf 我没有做修改，记得文件最后会include /etc/nginx/conf.d 下面所有以 *.conf结尾的配置文件，所以我的配置文件放在这里。</p><p>vi /etc/nginx/conf.d/django_uwsgi.conf</p><p></p><pre><code class="language-python">server{    listen 80;    server_name  localhost;        location / {        uwsgi_pass 127.0.0.1:8000;        include uwsgi_params;        access_log off;    }    location ^~/admin/ {        uwsgi_pass 127.0.0.1:8000;        include uwsgi_params;        access_log off;    }}</code></pre><p>至于项目的静态文件，已存于阿里云的oss中，所以在nginx的配置文件里已经不需要包含static、site_media等静态文件了。只要在settings中设置访问云端oss中的静态文件即可。</p><p><br></p><p>wsgi.py(与项目settings同级目录)</p><p></p><pre><code class="language-python">from django.core.handlers.wsgi import WSGIHandlerimport osimport pinax.envos.environ['DJANGO_SETTINGS_MODULE'] = 'settings'# setup the environment for Django and Pinaxpinax.env.setup_environ(__file__)# set application for WSGI processingapplication = WSGIHandler()</code></pre><p></p><p><br></p><p>/your_path/uwsgi_config.ini</p><p></p><pre><code class="language-python">[uwsgi]uid = wwwmaster = trueprofiler = trueprocesses = 8logdate = trueenable-threads = truesocket = 127.0.0.1:8000module = yourproject.wsgivirtualenv=/var/www/virtualenv_libpythonpath = /var/www/pythonpath = /var/www/your_projectpythonpath = /var/www/your_project/appspidfile = /var/www/log/your_project.piddaemonize = /var/www/log/your_project.log</code></pre><br>启动uwsgi的脚本 fstart.sh<p></p><p></p><pre><code class="language-python">#!/bin/bashecho 'Start server Now ...'uwsgi --ini /your_path/uwsgi_config.iniecho 'Start server success !'</code></pre><br>关闭uwsgi脚本 fclose.sh<p></p><p></p><pre><code class="language-python">#!/bin/bashecho 'Close server Now ...'ps aux |grep uwsgi |grep -v grep |awk '{print $2}'|xargs -r kill -9echo 'Close server success !'</code></pre><p></p>重启uwsgi脚本 frestart.sh<p></p><pre><code class="language-python">#!/bin/bashecho 'Restart server Now ...'ps aux |grep uwsgi |grep -v grep |awk '{print $2}'|xargs -r kill -9uwsgi --ini /your_path/uwsgi_config.iniecho 'Restart server success !'</code></pre><br><p></p><p>service nginx restart</p><p>./fstart.sh</p><p>That’s all !</p><p><span style="font-size:18px;color:#ff0000;background-color:rgb(255,255,204);"><span style="font-family:'KaiTi_GB2312';">转载请注明出处！</span></span></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android框架进阶〖00〗】ThinkAndroid注解机制</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B600_ThinkAndroid%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B600_ThinkAndroid%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<a href="http://blog.csdn.net/mkrcpp/article/details/13509051" rel="noopener" target="_blank">http://blog.csdn.net/mkrcpp/article/details/13509051</a><a href="http://blog.csdn.net/mkrcpp/article/details/13509051" rel="noopener" target="_blank"></a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p><p style="color:rgb(54,46,43);line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"></span></p><p style="color:rgb(54,46,43);line-height:25.98958396911621px;"><span style="font-weight:bold;">由于项目需要，开始研究ThinkAndroid。</span></p><p style="color:rgb(54,46,43);line-height:25.98958396911621px;"><span style="font-weight:bold;">个人认为该框架的注解机制十分新颖，所以先研究这个，顺便学习下 Java 的annotation。</span></p><p><strong>粗略的看了看，该机制在BaseActivity中初始化。而BaseActivity是所有Activity的基类。</strong></p><p><strong>对BaseActivity进行了代码剖离，发现在BaseActivity中在onCreate函数里启动注解机制。</strong></p><p></p><ul><li>首先注入布局资源（绑定layout布局）</li><li>其次注入成员资源（绑定组件资源）</li><li>然后注入成员变量（初始化普通变量）</li></ul><p></p><p>暂时先搞清楚第二个，怎么绑定组件资源的：</p><p><strong>我写了个小demo，MyAnno</strong></p><p></p><ul><li><img src="" alt=""><img src="https://img-blog.csdn.net/20131029160827031" alt=""></li></ul><p></p><p><strong>InjectView.java</strong></p><p></p><pre><code class="language-java">package com.myanno;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;/** * 自定义注解，获取资源ID * @使用方法 * @InjectView(id = R.id.settingIv) * private ImageView imgSetting;  *  * @author michael.mao@sosino.com * @date2013-10-29 * @description @Retention: 定义注解的保留策略 *@Retention(RetentionPolicy.SOURCE) //注解仅存在于源码中，在class字节码文件中不包含 *@Retention(RetentionPolicy.CLASS)  //默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得， *@Retention(RetentionPolicy.RUNTIME)//注解会在class字节码文件中存在，在运行时可以通过反射获取到 *@Inherited//说明子类可以继承父类中的该注解 * *@Target(ElementType.TYPE)   //接口、类、枚举、注解 *@Target(ElementType.FIELD) //字段、枚举的常量 *@Target(ElementType.METHOD) //方法 * @Target(ElementType.PARAMETER) //方法参数 *@Target(ElementType.CONSTRUCTOR)  //构造函数 *@Target(ElementType.LOCAL_VARIABLE)//局部变量 *@Target(ElementType.ANNOTATION_TYPE)//注解 *@Target(ElementType.PACKAGE) //包    */@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)public @interface InjectView{/** View的ID */public int id() default -1;}</code></pre><br><strong>MainActivity.java</strong><p></p><p></p><pre><code class="language-java">package com.myanno;import java.lang.reflect.Field;import android.app.Activity;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.TextView;public class MainActivity extends Activity {/** 注解绑定UI元素 */@InjectView(id=R.id.myimgview)ImageView myimageview;@InjectView(id=R.id.mytext)TextView mytext;@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);//初始化注解绑定的成员变量injectView(this);//直接使用UI元素mytext.setText("Text0");myimageview.setImageResource(R.drawable.junny);}/** 实例化@InjectView 注解的成员*/public void injectView(Activity activity){Field[] fields = activity.getClass().getDeclaredFields();//得到Activity中的所有定义的字段if (fields != null &amp;&amp; fields.length &gt; 0){for (Field field : fields){if (field.isAnnotationPresent(InjectView.class))//方法返回true，如果指定类型的注解存在于此元素上{Log.i("Field", field.toString());InjectView mInjectView = field.getAnnotation(InjectView.class);//获得该成员的annotationint viewId = mInjectView.id();//获得该注解的idView view=activity.findViewById(viewId);//获得ID为viewID的组件对象Log.i("Field", String.valueOf(viewId));Log.i("Field", view.getClass().toString());try{field.setAccessible(true);//设置类的私有成员变量可以被访问field.set(activity, view);//field.set(object,value)===object.fieldValue = value} catch (Exception e) { e.printStackTrace();}}elseLog.i("Field", "该字段没有被注解");}}}}</code></pre><br><strong>布局文件 activity_main.xml</strong><p></p><p></p><pre><code class="language-html">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:background="#000000"    android:orientation="vertical"    tools:ignore="ContentDescription" &gt;    &lt;ImageView        android:id="@+id/myimgview"        android:layout_width="wrap_content"        android:layout_height="wrap_content"        android:layout_gravity="center"/&gt;    &lt;TextView        android:id="@+id/mytext"        android:layout_width="match_parent"        android:layout_height="0dp"        android:layout_weight="1"        android:gravity="center"        android:background="@android:color/darker_gray"        android:textSize="30sp" /&gt;&lt;/LinearLayout&gt;</code></pre><br><strong>实验结果</strong><p></p><p></p><ul><li><img src="https://img-blog.csdn.net/20131029160835046" width="240" height="427" alt=""><br></li></ul><p></p><p><span style="color:#009900;"><strong>即注入成功了</strong></span> <img alt="大笑" src="http://static.blog.csdn.net/xheditor/xheditor_emot/default/laugh.gif"></p><p><br></p><p>需要说下我遇到的问题，在以上的基础上，如果将布局文件里的TextView 和ImageView两个布局换个位置，这时候再运行下，会出现空指针异常。</p><p>将Log向上翻会发现一个警告</p><p></p><ul><li><img src="" alt=""><img src="https://img-blog.csdn.net/20131029160840859" alt=""></li></ul><p></p><p>即非法<strong><span style="color:#ff0000;">参数异常</span></strong></p><p>定位到这一行</p><p></p><pre><code class="language-java">field.set(activity, view);</code></pre><br>通过观察Log打印的日志<p></p><p></p><ul><li><img src="" alt=""><img src="https://img-blog.csdn.net/20131029160851984" alt=""></li></ul><p></p><p>发现<strong><u>第一二行</u></strong>是对的，即获得注解的<span style="color:#ff0000;"><strong>类型和ID(ImageView 2131230720)</strong></span>都是正确的，但是通过findViewById获取view的时候，Log<strong><u>第三行</u></strong>显示的<strong><span style="color:#ff0000;">却是TextView。</span></strong></p><p>百思不得其解，最后无赖之下，清理一下项目，搞定。</p><p>我不知道是怎么回事，暂且推测为资源缓存吧。</p><p></p><p style="line-height:25.98958396911621px;"></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<a href="http://blog.csdn.net/mkrcpp/article/details/13170649" rel="noopener" style="color:rgb(106,57,6);text-decoration:none;" target="_blank"></a><a href="http://blog.csdn.net/mkrcpp/article/details/13509051" rel="noopener" target="_blank"></a><a href="http://blog.csdn.net/mkrcpp/article/details/14166121" rel="noopener" style="font-family:'Microsoft YaHei';font-weight:bold;line-height:25.984375px;" target="_blank"></a><a href="http://blog.csdn.net/mkrcpp/article/details/13509051" rel="noopener" style="font-family:'Microsoft YaHei';font-weight:bold;line-height:25.984375px;" target="_blank">http://blog.csdn.net/mkrcpp/article/details/13509051</a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android框架进阶〖01〗】ThinkAndroid注解机制二</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B601_ThinkAndroid%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6%E4%BA%8C/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B601_ThinkAndroid%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<a href="http://blog.csdn.net/mkrcpp/article/details/14166121" rel="noopener" target="_blank">http://blog.csdn.net/mkrcpp/article/details/14166121</a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p><p>打开ThinkAndroid框架最显眼的莫过于根目录下的TAActivity和TAApplication。</p><p>看着阵势就是让我们以后写的Activity都继承于TAActivity，待研究一番后，确实如此。</p><p><strong>TAActivity</strong></p><p>最重要的就是其<strong>onCreate</strong>方法</p><p></p><pre><code class="language-java">@Overrideprotected void onCreate(Bundle savedInstanceState){notifiyApplicationActivityCreating();onPreOnCreate(savedInstanceState);super.onCreate(savedInstanceState);getTAApplication().getAppManager().addActivity(this);initActivity();onAfterOnCreate(savedInstanceState);notifiyApplicationActivityCreated();}</code></pre><span style="background-color:rgb(51,0,0);"><span style="color:#ff9900;"><strong>TAActivity</strong>提供了<strong>onPreOnCreate</strong>方法，<strong>onAfterOnCreate</strong>方法，以后继承的Activity只需重写这两个就能完成大部分任务。</span></span><p></p><p>在<strong>onPreOnCreate</strong>和<strong>onAfterOnCreate</strong>之间，调用了自己的 <strong>super.onCreate</strong>，但是还没有绑定布局，再下面有个<strong>initActivity</strong>方法，在这个方法里，<strong><span style="color:#6600cc;">自动完成了初始化注解元素，设置显示的布局等一系列动作。</span></strong><br></p><p></p><pre><code class="language-java">private void initActivity(){// 初始化模块名getModuleName();// 初始化布局名getLayouName();// 加载类注入器initInjector();// 自动加载默认布局loadDefautLayout();}</code></pre>代码注释的很清楚，首先通过<span style="color:#ff6600;"><strong>命名规范</strong></span>自动获取布局的名字，然后<strong>initInjector</strong>初始化<span style="color:#33cc00;"><strong>注解的属性</strong></span>，最后<strong>loadDefaultLayout</strong>来设置<strong>显示的布局</strong>，一切都自动化了，不需要自己写setContentView......<p>通过研究<strong>TAActivity</strong>，以后如果想用<strong>Fragment</strong>，那么完全可以自己写个<strong>TAFragment</strong>了，大同小异。</p><p></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<a href="http://blog.csdn.net/mkrcpp/article/details/14166121" rel="noopener" target="_blank">http://blog.csdn.net/mkrcpp/article/details/14166121</a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android框架进阶〖02〗】ThinkAndroid线程池机制</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B602_ThinkAndroid%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B602_ThinkAndroid%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<a href="http://blog.csdn.net/mkrcpp/article/details/14166627" rel="noopener" style="color:rgb(106,57,6);text-decoration:none;" target="_blank">http://blog.csdn.net/mkrcpp/article/details/14166627</a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p><p></p><p><strong>TAApplication</strong>是<strong>ThinkAndroid</strong>的灵魂，整个框架的初始化工作都在这里进行了。</p><p>其中有一个重要的工作，即<strong>初始化线程池机制 ，英文名为TACommandExecutor</strong>。</p><p>之所以称为机制，是因为这不仅仅是一个线程池。</p><p>通过观察代码可以看出，最最重要的代码是</p><p></p><pre><code class="language-java">public void ensureInitialized(){if (!initialized){initialized = true;TALogger.i(TACommandExecutor.this, "CommandExecutor初始化");TACommandQueueManager.getInstance().initialize();TALogger.i(TACommandExecutor.this, "CommandExecutor初始化");}}</code></pre><br>其中涉及到一个很重要的类，即 <strong>TACommandQueueManager</strong>，看名字就知道这是一个队列管理器 。<p></p><p>好，接下来我们就研究下<strong>TACommandQueueManager</strong>，</p><p>非常清晰的，我们看到连个重要的属性，<strong>TAThreadPool</strong>，<strong>TACommandQueue，</strong></p><p>看名字就知道一个是线程池，一个是指令队列。然后 TACommandQueueManager的作用就是初始化线程池和初始化队列。</p><p>通过研究线程池 <strong>TAThreadPool </strong>的代码可以知道，默认仅仅是创建了2个线程，并且在系统启动时运行起来。</p><p>通过研究指令队列<strong>TACommandQueue</strong>的代码可以知道它维护了一个<strong>LinkedBlockingQueue</strong>，一个阻塞队列，由链表实现。</p><p><strong><span style="color:#ff0000;">阻塞队列的好处就是：</span></strong></p><p></p><ul><li>当一个线程A申请从队列中取数据时，如果队列中没有数据，那么线程A就发生阻塞，直到队列中存在数据。</li><li>同样的，当线程B想向队列中存放数据时，如果队列已满，那么线程B阻塞，直到队列中被取走了一个值，这就是咱们熟悉的生产者消费者模式嘛。</li></ul><p></p><p><strong>OK，说了这么多，稍微整理下</strong></p><p></p><pre><code class="language-plain">------------------------------------TACommandQueueManager   初始化了    一个阻塞队列和一个线程池，线程池不断的从队列中取指令并执行TACommandExecutor       初始化了    TACommandQueueManager TAApplication           初始化了    TACommandExecutor------------------------------------</code></pre><p></p><p><span style="font-family:'Microsoft YaHei';">基本上搞清楚了，唯一不清楚的就是什么是Command，阻塞队列维护的是什么样的指令呢，线程池执行的到底是什么呢？</span></p><p><span style="font-family:'Microsoft YaHei';">我们来分析下</span></p><p></p><pre><code class="language-java">TAICommand:-getRequest()获得请求数据-setRequest(TARequest request)设置请求数据-getResponse()获得返回数据-setResponse(TAResponse response)设置赶回数据-execute()-getResponseListener()获得响应/返回监听器-setResponseListener(TAIResponseListener listener)设置响应/返回监听器-setTerminated(boolean terminated)设置是否终结/停止-isTerminated()判断状态是否停止----------------------------------------------------------------------------TABaseCommand:基础指令*getRequest()*setRequest(TARequest request)*getResponse()*setResponse(TAResponse response)*getResponseListener()*setResponseListener(TAIResponseListener responseListener)*setTerminated(boolean terminated)*isTerminated()TARequest: 请求提交的数据Tag标记Data数据activityKeyResIDactivityKeyTAResponse:返回的数据，结果Tag标记Data数据activityKeyResIDactivityKeyTAIResponseListener:数据返回的一个监听器onStart()onSuccess(TAResponse response)onRuning(TAResponse response)onFailure(TAResponse response)onFinish()----------------------------------------------------------------------------TACommand:TAIResponseListenerprivate Handler handler = new Handler(){public void handleMessage(Message msg){switch (msg.what){case command_start:listener.onStart();break;case command_runting:listener.onRuning(getResponse());break;case command_success:listener.onSuccess(getResponse());break;case command_failure:listener.onFailure(getResponse());break;case command_finish:listener.onFinish();break;default:break;}};};*public final void execute(){onPreExecuteCommand();//listener.onStart();executeCommand();//abstractonPostExecuteCommand();//null}----------------------------------------------------------------------------TestMVCCommand异步下载，发送信息通知 hanlder处理数据*protected void executeCommand() { 处理耗时任务 sendSuccessMessage(arrayList); }----------------------------------------------------------------------------</code></pre><p></p><p style="font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"></span></p><div style="color:rgb(54,46,43);font-size:14px;font-family:'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, '宋体', PMingLiU, serif;line-height:21px;">应用初始化时，初始化了线程池，和Command 阻塞队列，那么由此可知，上面的一系列代码只是为了实现统一管理 <u>处理耗时任务的</u> 线程，</div><div style="font-size:14px;font-family:'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, '宋体', PMingLiU, serif;line-height:21px;"><span style="color:#ff0000;background-color:rgb(255,255,255);">再简而言之，Command即类似于 AsynTask 中的 doInBackground()执行的内容。</span></div><div style="font-size:14px;font-family:'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, '宋体', PMingLiU, serif;line-height:21px;"><strong><span style="color:#ff0000;background-color:rgb(255,255,255);"><br></span></strong></div><p></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************************************************************************</strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<a href="http://blog.csdn.net/mkrcpp/article/details/14166627" rel="noopener" target="_blank">http://blog.csdn.net/mkrcpp/article/details/14166627</a></span></strong></span></p><p style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【数据结构与算法 00】二分插入排序</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_00_%E4%BA%8C%E5%88%86%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_00_%E4%BA%8C%E5%88%86%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h3><span style="font-family:'Microsoft YaHei';">算法思想（从小到大排序）</span></h3><div><ul><li><span style="font-family:SimHei;">所谓二分插入排序，即插入排序基础上的优化算法，依然是将待排序数组看左右两个序列，左序列有序，有序列无序。</span></li><li><span style="font-family:SimHei;">假设第一个数array[0]为有序列，那么array[1,N-1]为无序列.循环遍历无序列，找出array[i]在有序列中应该插入的位置,插入。</span></li><li><span style="font-family:SimHei;">例如一个乱序数组为{1,3,2,4 ， 假如有序列为 { 1,3 } 无序列循环到2时 ，那么2在有序列中的位置应该是1 - 3 中间 ， 所以 [ 3. . .2 ) 之间的所有数据右移 ， 即3右移的2的位置 ， 腾出了3原先所在的位置 ， 由2替代</span><br></li></ul></div><p><strong></strong></p><p style="width:700px;z-index:0;overflow:hidden;clear:right;"></p><h3>排序算法稳定性</h3><ul><li><span style="font-family:SimHei;">假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，ri=rj，且ri在rj之前，而在排序后的序列中，ri仍在rj之前，则称这种排序算法是稳定的；否则称为不稳定的</span></li></ul><p></p><p style="width:700px;z-index:0;overflow:hidden;clear:right;"><a href="http://blog.csdn.net/mkrcpp/article/details/39153951" rel="noopener" style="font-family:'Microsoft YaHei';font-weight:bold;" target="_blank">博客地址：http://blog.csdn.net/mkrcpp/article/details/39153951</a></p><p></p><pre><code class="language-java">import java.util.Arrays;public class Main{// 循环测试次数public static int LOOP_COUNT = 100;public static int ARRAY_SIZE = 10000;public static void main(String[] args){int[] mArray = Common.getArray(ARRAY_SIZE);int allTime = 0;for (int i = 0; i &lt; LOOP_COUNT; i++){// 拷贝数组int[] tmpArray = Arrays.copyOf(mArray, ARRAY_SIZE);long tmpTime = System.currentTimeMillis();execute(tmpArray);allTime += System.currentTimeMillis() - tmpTime;}System.err.println("数组大小为(" + ARRAY_SIZE + ")的" + LOOP_COUNT + "次二分插入排序的平均耗时为：" + allTime / (float) LOOP_COUNT);}/*** * @title 二分插入排序 * @description 所谓二分插入排序，即插入排序基础上的优化算法，依然是将待排序数组看左右两个序列，左序列有序，有序列无序。 *              假设第一个数array[0]为有序列，那么array[1,N-1]为无序列.循环遍历无序列，找出array[i] *              在有序列中应该插入的位置,插入。&lt;br/&gt; *              例如一个乱序数组为{1,3,2,4 ， 假如有序列为 { 1,3 } 无序列循环到2时 ， *              那么2在有序列中的位置应该是1 - 3 中间 ， 所以 [ 3. . .2 ) 之间的所有数据右移 ， 即3 *              右移的2的位置 ， 腾出了3原先所在的位置 ， 由2替代 * @author michael.mao * @date 2014年9月5日 下午2:42:29 * @version V1.0 */public static void execute(int[] array){for (int i = 1; i &lt; array.length; i++){int tmpV = array[i];int mid = 0, left = 0, right = i - 1;// 在有序列中找出，当前无序列元素(tmpV=array[i])应该插入的位置while (right &gt;= left){mid = (left + right) / 2;// 中if ( tmpV &gt; array[mid] )left = mid + 1;elseright = mid - 1;}// 腾出位置等待插入for (int j = i; j &gt; left; j--)array[j] = array[j - 1];// 插入到腾出的位置(改进,相同的数不交换,实现稳定排序)if ( array[left] != tmpV ){array[left] = tmpV;System.err.println("发生一次交换");}}}}</code></pre><h3>案例结果：</h3><p></p><pre><code class="language-java">原始数组：02 02 02 03 03 02 01 -----------------------------当前序列：02 02 02 03 03 02 01位移序列：02 02 02 03 03 02 01 -----------------------------当前序列：02 02 02 03 03 02 01 位移序列：02 02 02 03 03 02 01 -----------------------------当前序列：02 02 02 03 03 02 01 位移序列：02 02 02 03 03 02 01 -----------------------------当前序列：02 02 02 03 03 02 01 位移序列：02 02 02 02 03 03 01 -----------------------------当前序列：02 02 02 02 03 03 01 位移序列：01 02 02 02 02 03 03 发生一次交换(上面execute方法最后一行只执行了一次，即相同的数没有交换)</code></pre><p></p><p>由此可见本排序算法为稳定排序！</p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android框架进阶〖03〗】ThinkAndroid框架总结</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B603_ThinkAndroid%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B603_ThinkAndroid%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p style="text-align:center;"><span style="font-family:'Microsoft YaHei';color:rgb(54,46,43);line-height:25.98958396911621px;"><strong>/**************************************************************************************************</strong></span></p><p style="text-align:center;"></p><p style="text-align:center;color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<span style="color:rgb(106,57,6);"></span><a href="http://blog.csdn.net/mkrcpp/article/details/13170649" rel="noopener" style="color:rgb(106,57,6);text-decoration:none;" target="_blank"></a><a href="http://blog.csdn.net/mkrcpp/article/details/20993533" rel="noopener" target="_blank">http://blog.csdn.net/mkrcpp/article/details/20993533</a></span></strong></span></p><p style="text-align:center;color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p><span></span><p><br></p><blockquote style="border:none;"><p><span style="font-family:'Microsoft YaHei';font-size:12px;">用多了框架，觉得也没什么太难的东西，前提是只要我们彻头彻尾的理解了它们。</span></p></blockquote><p><span style="font-family:'Microsoft YaHei';font-size:12px;">TA的框架整体来说：</span></p><p></p><ul><li><span style="font-family:'Microsoft YaHei';font-size:12px;">优点：减少了大量的重复代码，提供了简洁的机制，特别是 docommand，得心应手。这个网络请求有一个bug，就是当网络类型转换时，超时设置不管用。</span></li><li><span style="font-family:'Microsoft YaHei';font-size:12px;">缺点：有代码入侵量，很多东西都没用到，文档不全，比如 download ，一直没用过，缓存也没用过，图片也没用过，都是自己写的。</span></li></ul><p></p><blockquote style="border:none;"><p><span style="font-family:'Microsoft YaHei';font-size:12px;">我最喜欢的应该是其注解机制了，做的最好的应该是 command 注册机制，以后可能有很多command，繁重任务的command ，udp请求，快速请求等。</span></p></blockquote><p><span style="font-family:'Microsoft YaHei';font-size:12px;">我综合了final 框架和 TA 框架的注解机制，自己实现了一套框架，命名为 mdevil，基类前缀为M，例如MApplication，总监说我很自恋.....反正是自己用的，无所谓 :)</span></p><blockquote style="border:none;"><p><span style="font-family:'Microsoft YaHei';font-size:12px;">在这套框架里，拥有了最称手的注解资源绑定机制(个人认为)，然后对于orm，感觉对TA的orm相当不爽，搞的那么复杂，至于final的没去研究，感觉不优美。于是决定采用 OrmLite。拥有完善的文档！在实际项目使用中，有一个需求是使用复合主键，OrmLite虽然没有提供，却提供了唯一性约束，能达到同样的效果，有可能ormlite的性能会慢一点点，但我喜欢：）</span></p></blockquote><blockquote style="border:none;"><p><span style="font-family:'Microsoft YaHei';font-size:12px;">当真正理解一个应用从开始到形成的时候，就觉得一切皆有可能了。</span></p></blockquote><blockquote style="border:none;"><p><span style="font-family:'Microsoft YaHei';font-size:12px;">前路漫漫，Android只是一个开始！</span></p></blockquote><p><br></p><p></p><p style="text-align:center;color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong>/**************************************<span style="color:rgb(54,46,43);font-family:'Microsoft YaHei';line-height:25.984375px;text-align:center;"><strong>*******<span style="color:rgb(54,46,43);font-family:'Microsoft YaHei';line-height:25.984375px;text-align:center;"><strong>*******</strong></span></strong></span>**********************************<span style="color:rgb(54,46,43);font-family:'Microsoft YaHei';line-height:25.984375px;text-align:center;"><strong>************<span style="color:rgb(54,46,43);font-family:'Microsoft YaHei';line-height:25.984375px;text-align:center;"><strong>************</strong></span></strong></span>*******</strong></span></p><p style="text-align:center;color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';font-size:12px;"><strong><span style="color:rgb(255,0,0);"> *  本博客为</span><span style="color:rgb(51,51,255);">CSDN博主【MK】原创</span><span style="color:rgb(255,0,0);">，博客</span><span style="line-height:25.98958396911621px;color:rgb(255,0,0);">地址：<span style="color:rgb(106,57,6);"></span><a href="http://blog.csdn.net/mkrcpp/article/details/13170649" rel="noopener" style="color:rgb(106,57,6);text-decoration:none;" target="_blank"></a><a href="http://blog.csdn.net/mkrcpp/article/details/20993533" rel="noopener" target="_blank">http://blog.csdn.net/mkrcpp/article/details/20993533</a></span></strong></span></p><p style="text-align:center;color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:25.98958396911621px;"><span style="font-family:'Microsoft YaHei';"><span style="font-size:12px;"> **********************************************************************************************************************/</span></span></p><br><p><br></p><p><br></p><p><span></span></p><p><span></span></p><p><span></span></p><p><span></span></p><p><span></span></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【数据结构与算法 02】选择排序</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_02_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_02_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <h3><span style="font-size:12px;">算法思想：</span></h3><p></p><ul><li>遍历数组array[N]，索引为 i，然后算出[i+1,N-1]区间中的最小数，与array[i]交换，最后一个数因为只有一个，所以不用比较外循环为 N-2次</li></ul><p></p><p><a href="http://blog.csdn.net/mkrcpp/article/details/39181077" rel="noopener" target="_blank"><strong>博客地址：http://blog.csdn.net/mkrcpp/article/details/39181077</strong></a><br></p><p></p><pre><code class="language-java">import java.util.Arrays;/*** * @title 选择排序 * @author michael.mao * @date 2014年9月10日 下午2:32:01 * @version V1.0 */public class SelectionSort{/*** * @title 遍历数组 *        array[N]，然后算出[i+1,N-1]区间中的最小数，与array[i]交换，最后一个数因为只有一个，所以不用比较外循环为 *        N-2次 * @param array * @author michael.mao * @date 2014年9月10日 下午2:33:17 * @version V1.0 */public static void execute(int[] array){int tmp = 0;for (int i = 0, min = i; i &lt; array.length - 1; i++){for (int j = i + 1; j &lt; array.length; j++)if ( array[min] &gt; array[j] )min = j;if ( i != min ){tmp = array[i];array[i] = array[min];array[min] = tmp;}}}// 循环测试次数public static int LOOP_COUNT = 100;public static int ARRAY_SIZE = 10000;public static void main(String[] args){int[] mArray = Common.getArray(ARRAY_SIZE);int allTime = 0;for (int i = 0; i &lt; LOOP_COUNT; i++){// 拷贝数组int[] tmpArray = Arrays.copyOf(mArray, ARRAY_SIZE);long tmpTime = System.currentTimeMillis();execute(tmpArray);allTime += System.currentTimeMillis() - tmpTime;}System.err.println("数组大小为(" + ARRAY_SIZE + ")的" + LOOP_COUNT + "次选择排序的平均耗时为：" + allTime / (float) LOOP_COUNT);}}</code></pre><br><pre><code class="language-html">数组大小为(10000)的100次选择排序的平均耗时为：39.29 ms</code></pre><br><br><p></p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【数据结构与算法 01】冒泡排序</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_01_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_01_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>算法思想：</p><p></p><ul><li>一共进行 array.size-1趟排序，每一趟排序，都将左右两个数进行比较大小，并且交换位置，这样的效果是：每一趟排序中，能找到最大的值冒泡到该趟排序的最后面，这样的话，第一趟排序，最后一个数是最大的，第二趟排序，倒数第二个数就是第二大的，最后一趟排序后 (因为最后一趟只有一个数，不用比较，所以比较次数是 array.size-1 趟)，将得到有序数组</li></ul><p></p><p><strong><a href="http://blog.csdn.net/mkrcpp/article/details/39178213" rel="noopener" target="_blank">博客地址：http://blog.csdn.net/mkrcpp/article/details/39178213</a></strong></p><p></p><pre><code class="language-java">import java.util.Arrays;/*** * @title 冒泡排序 * @author michael.mao * @date 2014年9月10日 上午10:00:44 * @version V1.0 */public class BubbleSort{/*** * @title 一共进行 array.size-1趟排序，每一趟排序，都将左右两个数进行比较大小，并且交换位置，这样的效果是：每一趟排序中， *        能找到最大的值冒泡到该趟排序的最后面，这样的话，第一趟排序，最后一个数是最大的，第二趟排序，倒数第二个数就是第二大的，最后一趟排序后 *        (因为最后一趟只有一个数，不用比较，所以比较次数是 array.size-1 趟)，将得到有序数组 * @param array * @author michael.mao * @date 2014年9月10日 上午10:28:00 * @version V1.0 */public static void execute(int[] array){int tmp = 0;// 如果一次循环后发现没有交换，说明数组有序，无需排序boolean isSwap = true;for (int i = 0; ((i &lt; array.length - 1) &amp;&amp; isSwap); i++){isSwap = false;for (int j = 0; j &lt; array.length - 1 - i; j++){if ( array[j] &gt; array[j + 1] ){tmp = array[j + 1];array[j + 1] = array[j];array[j] = tmp;isSwap = true;}}}}// 循环测试次数public static int LOOP_COUNT = 100;public static int ARRAY_SIZE = 10000;public static void main(String[] args){int[] mArray = Common.getArray(ARRAY_SIZE);int allTime = 0;for (int i = 0; i &lt; LOOP_COUNT; i++){// 拷贝数组int[] tmpArray = Arrays.copyOf(mArray, ARRAY_SIZE);long tmpTime = System.currentTimeMillis();execute(tmpArray);allTime += System.currentTimeMillis() - tmpTime;}System.err.println("数组大小为(" + ARRAY_SIZE + ")的" + LOOP_COUNT + "次冒泡排序的平均耗时为：" + allTime / (float) LOOP_COUNT);}}</code></pre><p><br></p><p></p><pre><code class="language-java">数组大小为(10000)的100次冒泡排序的平均耗时为：125.79 ms</code></pre><br><br><p><br></p><br><br>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【心情日记】总有一天你将破蛹而出</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0_%E6%80%BB%E6%9C%89%E4%B8%80%E5%A4%A9%E4%BD%A0%E5%B0%86%E7%A0%B4%E8%9B%B9%E8%80%8C%E5%87%BA/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0_%E6%80%BB%E6%9C%89%E4%B8%80%E5%A4%A9%E4%BD%A0%E5%B0%86%E7%A0%B4%E8%9B%B9%E8%80%8C%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <blockquote style="line-height:26px;border:none;"><blockquote style="font-family:Arial;font-size:14px;border:none;"><blockquote style="border:none;"><p><br></p><p><span style="font-family:'Microsoft YaHei';font-size:16px;"><span style="color:#ff0000;">总有一天你将破蛹而出，成长得比人们期待的还要<strong>美丽</strong>。</span></span></p></blockquote></blockquote><blockquote style="font-family:Arial;font-size:14px;border:none;"><blockquote style="border:none;"><p><span style="font-family:'Microsoft YaHei';font-size:16px;color:rgb(0,153,0);">但这个过程会很痛，会很辛苦，有时候还会觉得</span><span style="font-family:'Microsoft YaHei';font-size:16px;"><strong><span style="color:#666666;">灰心</span></strong></span><span style="font-family:'Microsoft YaHei';font-size:16px;color:rgb(0,153,0);">。</span></p></blockquote></blockquote><blockquote style="font-family:Arial;font-size:14px;border:none;"><blockquote style="border:none;"><p><span style="color:#3333ff;"><span style="font-family:'Microsoft YaHei';font-size:16px;">面对着<strong>汹涌</strong></span><span style="font-family:'Microsoft YaHei';font-size:16px;">而来的<strong>现实</strong>，</span><span style="font-family:'Microsoft YaHei';font-size:16px;">觉得自己<strong>渺小</strong>无力。</span></span></p></blockquote></blockquote><blockquote style="font-family:Arial;font-size:14px;border:none;"><blockquote style="border:none;"><p><span style="color:#ff9900;"><span style="font-family:'Microsoft YaHei';font-size:16px;"><strong>但</strong>这，也是生命的一部分。</span><span style="font-family:'Microsoft YaHei';font-size:16px;"><strong>做好</strong>现在你能做的，然后，一切都会好的。</span></span></p></blockquote></blockquote><blockquote style="font-family:Arial;font-size:14px;border:none;"><blockquote style="border:none;"><p><span style="font-family:'Microsoft YaHei';font-size:16px;"><span style="color:#00cccc;">我们都将</span><strong>孤独地</strong><span style="color:#00cccc;">长</span></span><span style="color:rgb(0,204,204);font-family:'Microsoft YaHei';font-size:16px;">大，不要害怕。</span></p></blockquote></blockquote><blockquote style="border:none;"><blockquote style="border:none;"><p style="font-family:Arial;font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:16px;"><span></span>                                                          —— 寂地《踮脚张望的时光》</span></p><p style="font-family:Arial;font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:16px;"><br></span></p><p><span style="font-family:'Microsoft YaHei';font-size:14px;">转自大神 <a href="http://blog.csdn.net/zhmxy555/article/details/7563469" rel="noopener" target="_blank">http://blog.csdn.net/zhmxy555/article/details/7563469</a></span></p></blockquote></blockquote></blockquote>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Java服务端编程〖00〗】是时候开始了</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Java%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B00_%E6%98%AF%E6%97%B6%E5%80%99%E5%BC%80%E5%A7%8B%E4%BA%86/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Java%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B00_%E6%98%AF%E6%97%B6%E5%80%99%E5%BC%80%E5%A7%8B%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>即将开始踏上服务端编程之路，纪念一下。</p><p>做事情总得有个开始，那就开始吧 ......</p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Java服务端编程〖01〗】搭建环境第一步</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Java%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B01_%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%E7%AC%AC%E4%B8%80%E6%AD%A5/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Java%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B01_%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%E7%AC%AC%E4%B8%80%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <ul><li><span style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;">1：安装 myeclipse</span></span></li><li><span style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;">2：下载解压 tomcat7.55</span></span></li><li><span style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;">3：下载解压 maven</span></span></li><li><span style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;">4：配置maven,之所以用maven 是因为 maven管理项目很方便，之所以重新配置maven 是因为本地maven版本低，功能具有局限性</span></span></li><li><span style="font-family:SimHei;"><img src="https://img-blog.csdn.net/20140904005014115" width="500" height="307" alt="" style="font-size:14.399999618530273px;line-height:16.799999237060547px;"></span></li><li><span style="font-family:SimHei;"><img src="https://img-blog.csdn.net/20140904004756765" width="500" height="307" alt="" style="font-size:14.399999618530273px;line-height:16.799999237060547px;"></span></li><li><span style="font-family:SimHei;"><img src="https://img-blog.csdn.net/20140904005021416" width="400" height="100" alt="" style="font-size:14.399999618530273px;line-height:16.799999237060547px;"></span></li><li><span style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;">右击项目 run as maven clean 下载必要的文件</span></span></li></ul><div style="line-height:16.799999237060547px;font-size:14.399999618530273px;"><ul><li><span style="font-size:14.399999618530273px;"><span style="font-family:SimHei;">5：新建 maven 项目 ，选择 webapp</span></span></li></ul></div><div style="line-height:16.799999237060547px;font-size:14.399999618530273px;"><ul><li><span style="font-size:14.399999618530273px;"><span style="font-family:SimHei;">6：加载 spring，要想用spring,首先就是要有spring</span></span></li></ul></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><pre class="prettyprint linenums prettyprinted" style="font-size:13px;border:1px solid rgb(225,225,232);background-color:rgb(247,247,249);"></pre><div class="linenums" style="color:rgb(30,52,123);"><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span class="pun" style="color:rgb(147,161,161);"><span style="font-family:SimHei;"><strong><span style="color:#000000;"><u>pom.xml</u></span></strong></span></span></code></div><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">project xmlns</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://maven.apache.org/POM/4.0.0"</span><span class="pln" style="color:rgb(72,72,76);"> xmlns</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">xsi</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://www.w3.org/2001/XMLSchema-instance"</span></span></code></div><div class="L1" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    xsi</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">schemaLocation</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L2" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">modelVersion</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="lit" style="color:rgb(25,95,145);">4.0</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="lit" style="color:rgb(25,95,145);">0</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">modelVersion</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L3" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">com</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">mdevil</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L4" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">server</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L5" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">packaging</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">war</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">packaging</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L6" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="lit" style="color:rgb(25,95,145);">0.0</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="lit" style="color:rgb(25,95,145);">1</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">SNAPSHOT</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L7" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">name</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">server </span><span class="typ" style="color:#008080;">Maven</span><span class="pln" style="color:rgb(72,72,76);"> </span><span class="typ" style="color:#008080;">Webapp</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">name</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L8" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">url</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">http</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="com" style="color:rgb(147,161,161);">//maven.apache.org&lt;/url&gt;</span></span></code></div><div class="L9" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">dependencies</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">dependency</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L1" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">junit</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L2" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">junit</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L3" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="lit" style="color:rgb(25,95,145);">4.10</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L4" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">scope</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">test</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">scope</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L5" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">dependency</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L6" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">dependency</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L7" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">org</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">springframework</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L8" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">spring</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">context</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L9" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="lit" style="color:rgb(25,95,145);">3.2</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="lit" style="color:rgb(25,95,145);">10.RELEASE</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">dependency</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L1" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">dependency</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L2" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">org</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">springframework</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">groupId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L3" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">spring</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">webmvc</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">artifactId</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L4" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">            </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="lit" style="color:rgb(25,95,145);">3.2</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="lit" style="color:rgb(25,95,145);">10.RELEASE</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">version</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L5" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">dependency</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L6" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">dependencies</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L7" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">build</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L8" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">finalName</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">server</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">finalName</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L9" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">build</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-java"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">project</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div></div></div><div style="line-height:16.799999237060547px;font-size:14.399999618530273px;"><div><pre class="prettyprint linenums prettyprinted" style="font-size:13px;border:1px solid rgb(225,225,232);background-color:rgb(247,247,249);"></pre><div class="linenums"><div class="L0" style="line-height:18px;list-style-type:none;"><code class="language-c"><span class="pun"><span style="font-family:SimHei;"><strong><u><span style="color:rgb(0,0,0);">web.xml，程序第一步，加载 “上下文加载器，加载时的参数为 下面的</span> <span class="pun" style="font-family:SimHei;font-size:13px;line-height:18px;background-color:rgb(247,247,249);">&lt;</span><span class="pln" style="font-family:SimHei;font-size:13px;line-height:18px;background-color:rgb(247,247,249);">context</span><span class="pun" style="font-family:SimHei;font-size:13px;line-height:18px;background-color:rgb(247,247,249);">-</span><span class="pln" style="font-family:SimHei;font-size:13px;line-height:18px;background-color:rgb(247,247,249);">param</span><span class="pun" style="font-family:SimHei;font-size:13px;line-height:18px;background-color:rgb(247,247,249);">&gt;，以便在程序启动之初，初始化spring，经大神指导，未经初始化的spring不可用</span>”</u></strong><span style="color:#93a1a1;"></span></span></span></code></div><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;?</span><span class="pln" style="color:rgb(72,72,76);">xml version</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"1.0"</span><span class="pln" style="color:rgb(72,72,76);"> encoding</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"UTF-8"</span><span class="pun" style="color:rgb(147,161,161);">?&gt;</span></span></code></div><div class="L1" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">web</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">app id</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"WebApp_9"</span><span class="pln" style="color:rgb(72,72,76);"> version</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"2.4"</span><span class="pln" style="color:rgb(72,72,76);"> xmlns</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://java.sun.com/xml/ns/j2ee"</span></span></code></div><div class="L2" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    xmlns</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">xsi</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://www.w3.org/2001/XMLSchema-instance"</span></span></code></div><div class="L3" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    xsi</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">schemaLocation</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L4" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">context</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">param</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L5" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">param</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">name</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">contextConfigLocation</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">param</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">name</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L6" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">param</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">value</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">classpath</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">applicationContext</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">xml</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">param</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">value</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L7" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">context</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">param</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L8" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="str" style="color:rgb(221,17,68);">&lt;listener&gt;</span></span></code></div><div class="L9" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">        </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">listener</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="kwd" style="color:rgb(30,52,123);">class</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">org</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">springframework</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">web</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">context</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="typ" style="color:#008080;">ContextLoaderListener</span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">listener</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="kwd" style="color:rgb(30,52,123);">class</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">listener</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span></span></code></div><div class="L1" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">web</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">app</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);"> </span></span></code></div></div></div><div><div><pre class="prettyprint linenums prettyprinted" style="font-size:13px;border:1px solid rgb(225,225,232);background-color:rgb(247,247,249);"></pre><div class="linenums" style="color:rgb(30,52,123);"><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-weight:bold;"><span style="color:#000000;"><u><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">applicationContext</span><span class="pun" style="color:rgb(147,161,161);">.</span><span class="pln" style="color:rgb(72,72,76);">xml,该文件即上文 “上下文加载器”需要加载的 上下文文件，该文件实现了对spring的初始化配置，开启了多个特性，具体特性是干什么的，我也不知道，格式固定。</span></span></u></span></span></code></div><div class="L1" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;?</span><span class="pln" style="color:rgb(72,72,76);">xml version</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"1.0"</span><span class="pln" style="color:rgb(72,72,76);"> encoding</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"UTF-8"</span><span class="pun" style="color:rgb(147,161,161);">?&gt;</span></span></code></div><div class="L2" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">beans xmlns</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://www.springframework.org/schema/beans"</span></span></code></div><div class="L3" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    xmlns</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">xsi</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln" style="color:rgb(72,72,76);"> xmlns</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">context</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://www.springframework.org/schema/context"</span></span></code></div><div class="L4" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    xmlns</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">aop</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://www.springframework.org/schema/aop"</span><span class="pln" style="color:rgb(72,72,76);"> xmlns</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">tx</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"http://www.springframework.org/schema/tx"</span></span></code></div><div class="L5" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    xsi</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">schemaLocation</span><span class="pun" style="color:rgb(147,161,161);">=</span><span class="str" style="color:rgb(221,17,68);">"</span><span class="pln" style="color:rgb(72,72,76);">http</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="com" style="color:rgb(147,161,161);">//www.springframework.org/schema/beans</span></span></code></div><div class="L6" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">           http</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="com" style="color:rgb(147,161,161);">//www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></code></div><div class="L7" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">           http</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="com" style="color:rgb(147,161,161);">//www.springframework.org/schema/context</span></span></code></div><div class="L8" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">           http</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="com" style="color:rgb(147,161,161);">//www.springframework.org/schema/context/spring-context-3.2.xsd"&gt;</span></span></code></div><div class="L9" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pln" style="color:rgb(72,72,76);">    </span><span class="pun" style="color:rgb(147,161,161);">&lt;</span><span class="pln" style="color:rgb(72,72,76);">context</span><span class="pun" style="color:rgb(147,161,161);">:</span><span class="pln" style="color:rgb(72,72,76);">annotation</span><span class="pun" style="color:rgb(147,161,161);">-</span><span class="pln" style="color:rgb(72,72,76);">config </span><span class="pun" style="color:rgb(147,161,161);">/&gt;</span></span></code></div><div class="L0" style="color:rgb(190,190,197);line-height:18px;list-style-type:none;"><code class="language-c"><span style="font-family:SimHei;"><span class="pun" style="color:rgb(147,161,161);">&lt;/</span><span class="pln" style="color:rgb(72,72,76);">beans</span><span class="pun" style="color:rgb(147,161,161);">&gt;</span><span class="pln" style="color:rgb(72,72,76);">  </span></span></code></div></div></div><div><ul><li><span style="font-size:14.399999618530273px;"><span style="font-family:SimHei;">7：配置tomcat，用自己下载的tomcat，方便管理，控制</span></span></li></ul></div></div><div><ul><li><span style="font-family:SimHei;"><img src="https://img-blog.csdn.net/20140904005023959" width="500" height="300" alt="" style="font-size:14.399999618530273px;"><img src="https://img-blog.csdn.net/20140904005023959" width="500" height="300" alt="" style="font-size:14.399999618530273px;"><img src="https://img-blog.csdn.net/20140904005027921" width="500" height="300" alt="" style="font-size:14.399999618530273px;"><img src="https://img-blog.csdn.net/20140904005031556" width="300" height="300" alt="" style="font-size:14.399999618530273px;"><img src="https://img-blog.csdn.net/20140904005036314" width="500" height="200" alt="" style="font-size:14.399999618530273px;"></span></li></ul></div><div><span style="font-family:SimHei;"><br></span></div><div><ul><li><span style="font-family:SimHei;"><span style="font-size:14.399999618530273px;">8：在浏览器中输入 </span><a href="http://localhost:8080/server/" rel="noopener" style="font-size:14.399999618530273px;" target="_blank">http://localhost:8080/server/</a></span></li></ul></div><div><ul><li><span style="font-family:SimHei;"><img src="https://img-blog.csdn.net/20140904005040042" width="200" height="100" alt="" style="font-size:14.399999618530273px;"></span></li></ul></div><div><span style="font-family:SimHei;"><br></span></div><div><span style="font-family:SimHei;"><br></span></div><div><span style="font-family:SimHei;"><br></span></div><div><span style="font-family:SimHei;"><span style="font-size:10.5pt;line-height:1.5;"> </span><br></span></div></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-size:10.5pt;line-height:1.5;"><span style="font-family:SimHei;"><br></span></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-size:10.5pt;line-height:1.5;"><span style="font-family:SimHei;"><br></span></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-size:10.5pt;line-height:1.5;"><span style="font-family:SimHei;"><br></span></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-size:10.5pt;line-height:1.5;"><span style="font-family:SimHei;"><br></span></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-size:10.5pt;line-height:1.5;"><span style="font-family:SimHei;"><br></span></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;"><br></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;"><br></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;"><br></span></div><div style="font-size:14.399999618530273px;line-height:16.799999237060547px;"><span style="font-family:SimHei;"><br></span></div><span style="font-family:SimHei;"><br></span><br>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【心情日记】从这里开始吧</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0_%E4%BB%8E%E8%BF%99%E9%87%8C%E5%BC%80%E5%A7%8B%E5%90%A7/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0_%E4%BB%8E%E8%BF%99%E9%87%8C%E5%BC%80%E5%A7%8B%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><strong><span style="font-family:'Microsoft YaHei';"><span style="font-size:14px;">终于</span>，又有了开始的勇气，那就开始吧。</span></strong></p><p></p><ul><li><span style="font-family:'Microsoft YaHei';color:rgb(0,153,0);font-weight:bold;">——  30岁之前，不玩 Dota。</span></li></ul><p></p><p><br></p><p><span style="color:rgb(255,0,0);"><em><span style="font-family:'Microsoft YaHei';"><span style="font-size:13px;line-height:19px;"><strong>引用:</strong></span><span style="font-size:13px;line-height:19px;"><a href="http://www.cnblogs.com/windwithlife/archive/2005/11/02/266761.html" rel="noopener" target="_blank">http://www.cnblogs.com/windwithlife/archive/2005/11/02/266761.html</a></span></span></em></span></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【IOS编程 01】开发环境</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS%E7%BC%96%E7%A8%8B_01_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS%E7%BC%96%E7%A8%8B_01_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>做了几年的 android 开发了，有点腻，现打算学习IOS开发。</p><p></p><ol><li>参照 <a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;tid=1418055&amp;page=1" rel="noopener" target="_blank">http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;tid=1418055&amp;page=1</a> 安装 Mac 10.9，然后通过 AppStore 在线更新到 10.9.5，只为了能用到 XCode6.1 。</li><li>我先在Windows下载Mac 官网用迅雷下载了xcode_6.1.1.dmg，开启虚拟机共享文件夹，在Mac 上打开 xcode_6.1.1.dmg，这里一定要正确安装，不然肯定会遇到不可预知的错误，我装了两次才摸清楚，就是双击xcode_6.1.1.dmg 安装包，出现一个窗口，将左边的拖拽到右边安装即可，不要有多余的操作。此时新建一个IOS项目，即可运行。</li></ol><p><br></p><p><img src="" alt=""><br></p><p><img src="https://img-blog.csdn.net/20141217231406925" alt=""><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【IOS编程 02】加法器</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS%E7%BC%96%E7%A8%8B_02_%E5%8A%A0%E6%B3%95%E5%99%A8/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS%E7%BC%96%E7%A8%8B_02_%E5%8A%A0%E6%B3%95%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>每当学习一门新的语言，我最喜欢的就是先做一个加法器，因为这能使我学会操控 UI元素，以及后台逻辑运算。</p><p>...好晚啊，好冷</p><p>我先发张结果图，明天再细说</p><p><br></p><p><img src="https://img-blog.csdn.net/20141217231335490" alt=""><br></p><p><br></p><p><br></p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【数据结构与算法】图的创建与遍历</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><strong><span style="font-size:18px;">图结构</span>有什么用？现在想来，网络游戏里面的自动寻路就是典型的图的路径搜索！</strong></p><p><strong><br></strong></p><p><strong><span style="color:#009900;">头文件Graph.h</span></strong></p><p></p><pre><code class="language-cpp">#ifndef GRAPH_H#define GRAPH_H#include &lt;queue&gt;using namespace std;const int MAXSIZE=5;            //暂时只定义存在5个节点 0-4class Graph                     //邻接矩阵建图{private:    int vertex[MAXSIZE];    int arc[MAXSIZE][MAXSIZE];    queue&lt;int&gt;vQueue;public:    int isVisited[MAXSIZE];     //isVisited[i] =1 表示 顶点i已被访问过，或者说，已经输出！    void DFSTraverse(int i);    //深度优先遍历    void BFSTraverse();         //广度优先遍历        Graph();};Graph::Graph(){    //初始化顶点数组与边数组    for(int i=0;i&lt;MAXSIZE;i++)    {        vertex[i]=i;        isVisited[i]=0;     //顺便初始化访问标志位    }    for(int i=0;i&lt;MAXSIZE;i++)        for(int j=0;j&lt;MAXSIZE;j++)            arc[i][j]=0;    arc[0][1]=1;            //如果 顶点0-----&gt;顶点1有边，则置1    arc[0][4]=1;    arc[1][0]=1;    arc[1][2]=1;    arc[1][3]=1;    arc[2][1]=1;    arc[3][1]=1;    arc[3][4]=1;    arc[4][0]=1;    arc[4][3]=1;}void Graph::DFSTraverse(int i)  //深度优先遍历{    cout&lt;&lt;vertex[i]&lt;&lt;" ";     isVisited[i]=1;    for(int j=0;j&lt;MAXSIZE;j++)        if(arc[i][j]==1 &amp;&amp; isVisited[j]==0)            DFSTraverse(j);}void Graph::BFSTraverse()       //广度优先遍历{    vQueue.push(vertex[0]);    isVisited[vQueue.front()]=1;        while(!vQueue.empty())    {        cout&lt;&lt;vQueue.front()&lt;&lt;" ";        for(int j=0;j&lt;MAXSIZE;j++)        {            if(arc[vQueue.front()][j]==1 &amp;&amp; isVisited[j]==0)            {                vQueue.push(j);                isVisited[vertex[j]]=1;            }            if(arc[j][vQueue.front()]==1 &amp;&amp; isVisited[j]==0)            {                vQueue.push(j);                isVisited[vertex[j]]=1;            }        }        vQueue.pop();    }}#endif // GRAPH_H</code></pre><p></p><p><br></p><strong><span style="color:#009900;">主函数文件 main.cpp</span></strong><p></p><pre><code class="language-cpp">#include &lt;iostream&gt;#include "Graph.h"using namespace std;int main(){    Graph mGraph;        cout&lt;&lt;"DFSTraverse:"&lt;&lt;endl;    mGraph.DFSTraverse(0);        for(int i=0;i&lt;MAXSIZE;i++)        mGraph.isVisited[i]=0;        cout&lt;&lt;endl&lt;&lt;"BFSTraverse:"&lt;&lt;endl;    mGraph.BFSTraverse();    return 0;}</code></pre><p></p><p><br></p><p><span style="background-color:rgb(0,153,0);">结果：</span></p><p><img src="http://img.my.csdn.net/uploads/201304/25/1366871131_3665.jpg" alt=""><br></p><p><br></p><strong>感觉无向图有向图相比，在深度优先遍历与广度优先遍历中几乎没啥区别，只不过邻接矩阵中的值不一样罢了。</strong><p><strong>继续研究中。</strong><br><br></p><p><strong><span style="color:#ff0000;">转载请注明出处！</span></strong></p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【MFC基础入门】OpenCV人脸检测与马赛克</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_MFC%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_OpenCV%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%A9%AC%E8%B5%9B%E5%85%8B/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_MFC%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8_OpenCV%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%A9%AC%E8%B5%9B%E5%85%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>这是OpenCV的代码，在这基础上加了马赛克。</p><p></p><pre><code class="language-cpp">void CFaceDetectionDlg::detect_and_draw( IplImage* img )  {  //static CvScalar colors[] =   //{  //{{0,0,255}},  //{{0,128,255}},  //{{0,255,255}},  //{{0,255,0}},  //{{255,128,0}},  //{{255,255,0}},  //{{255,0,0}},  //{{255,0,255}}  //};  //用不同颜色的圈圈区分不同的人double scale = 1.3;//先缩小为small_img 后放大，为了便于处理也可以不用   IplImage* gray = cvCreateImage( cvSize(img-&gt;width,img-&gt;height), 8, 1 );  IplImage* small_img = cvCreateImage( cvSize( cvRound (img-&gt;width/scale),  cvRound (img-&gt;height/scale)),  8, 1 );  int i;  cvCvtColor( img, gray, CV_BGR2GRAY );//灰度图cvResize( gray, small_img, CV_INTER_LINEAR );//缩小cvEqualizeHist( small_img, small_img );//经过上面两步，gray指向的图像已经变为small_imgcvClearMemStorage( storage );//动态内存重置if( cascade )//括号里是分类器的指针，就是用这个东西来判断是不是人脸的！！！{double t = (double)cvGetTickCount();//开始计时CvSeq* faces = cvHaarDetectObjects( small_img, cascade, storage,1.1, 2, 0/*CV_HAAR_DO_CANNY_PRUNING*/,cvSize(30, 30) );//检测的核心语句，注意cascade参数t = (double)cvGetTickCount() - t;//计算时间间隔//cout&lt;&lt;"detection time = %gms\n"&lt;&lt;t/((double)cvGetTickFrequency()*1000.)&lt;&lt;endl;//打印出所用的时间for( i = 0; i &lt; (faces ? faces-&gt;total : 0); i++ )//总共有faces-&gt;total 个脸，把他们一个一个圈出来{CvRect* r = (CvRect*)cvGetSeqElem( faces, i );//每个脸对应的链表节点CvPoint center;int radius;center.x = cvRound((r-&gt;x + r-&gt;width*0.5)*scale);//圆心横坐标，注意scale，这里放大center.y = cvRound((r-&gt;y + r-&gt;height*0.5)*scale);//纵坐标radius = cvRound((r-&gt;width + r-&gt;height)*0.25*scale);//半径//cvCircle( img, center, radius, colors[i%8], -1, 8, 0 );//画圆圈出目标头像//马赛克cvSetImageROI(img,cvRect(center.x-radius,center.y-radius,radius*2,radius*2));int W=8;int H=8;for(int mi=W;mi&lt;img-&gt;roi-&gt;width;mi+=W)for(int mj=H;mj&lt;img-&gt;roi-&gt;height;mj+=H){CvScalar tmp=cvGet2D(img,mj-H/2,mi-W/2);for(int mx=mi-W;mx&lt;=mi;mx++)for(int my=mj-H;my&lt;=mj;my++)cvSet2D(img,my,mx,tmp);}cvResetImageROI(img);  }}cvReleaseImage( &amp;gray );  cvReleaseImage( &amp;small_img );  }</code></pre><p></p><p><strong>本人写的通用小项目下载地址：可以提取分类器进行检测，大家必须配置好OpenCV环境和在源码中设置好分类器的路径。</strong></p><p><a href="http://download.csdn.net/detail/mkr127/5397219" rel="noopener" target="_blank">http://download.csdn.net/detail/mkr127/5397219</a></p><br><p><br></p><p><br></p><p></p><span style="font-size:18px;background-color:rgb(0,153,0);">结果预览</span><p><img src="http://img.my.csdn.net/uploads/201304/24/1366793742_5824.jpg" alt=""><br></p><p><img src="http://img.my.csdn.net/uploads/201304/24/1366793418_6540.jpg" alt=""><br></p><p><br></p><p><span style="font-size:24px;color:#ff0000;"><strong>转载请注明出处！</strong></span></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【Android框架进阶〖04〗】MDevil 之 网络模块 Volley</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B604_MDevil_%E4%B9%8B_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97_Volley/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_Android%E6%A1%86%E6%9E%B6%E8%BF%9B%E9%98%B604_MDevil_%E4%B9%8B_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97_Volley/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p>对于 Android 应用开发，基于网络请求的开源框架有不少，我喜欢用的就是 AsyncHttpClient，UniversalImageLoader。原想法是在框架中封装一套通用的请求与返回接口，那么以后项目底层不管用什么框架进行网络请求，都不会修改业务层代码，实现业务与基本功能的分离，方便后期的优化，扩展。后来跟阿里的一位朋友聊到这块，谈到android端的网络请求，觉得一款牛逼的应用，尤其的是网络请求模块，应该有一套自己的东西，而不是用别人的，突然觉得很有道理，有必要选择一套自己网络框架，方便以后做老大 ：）</p><p>首先想到一些内存，省电，线程池等诸多关键因素，再集合当前的一些开源框架，发现 AsyncHttpClient 也是有bug 的，而且如果用 AsyncHttpClient，对于listview等网络请求，我还得引入诸如 UniversalImageLoader 来对图片进行专门的处理，以前用过volley ,觉得很不错，没有深入研究，现在研究了下，发现也是有一些问题的，比如不能进行上传下载大文件，没有进度等，不过 volley 对 android做了很多优化，不支持大文件上传下载也是有原因的，比如设置了扫描线程的优先级，使之更省电，对 2.2 以上和以下版本的网络请求做了分别处理，2.2以下用了AndroidHttpClient，2.3以上使用了  HttpUrlConnection，具体原因见 <a href="http://blog.csdn.net/guolin_blog/article/details/12452307" rel="noopener" target="_blank">http://blog.csdn.net/guolin_blog/article/details/12452307</a> 。觉得 Android 系统是谷歌推出的，Volley 是谷歌工程师在 2013 I/O大会上推出的，最正统，遂决定研究 volley ，扩展 volley 。</p><p>看了两天，发现 volley 在启动时，缓存了 主线程的 Handler，那么以后无论在主线程 or 子线程执行 volley网络请求，返回执行 onResponse 时都是主线程在执行，这是特性之一，然后接着发现 volley 初始化时开启了5个扫描线程，其中1个 缓存扫描线程，4个非缓存扫描线程，当添加一个请求时，先检查缓存是否已经有了，有则直接返回，否则再执行网络请求，这里应该就是对多图片请求的优化，volley 看翻译意思是 “万箭齐发”，寓意为加载图片像万箭齐射一样快，后期有空看能不能再搞个 下载上传进度 功能，那就完美了。</p><p><br></p><p>随着对volley的深入，觉得不适合讲上传下载大文件集合在volley中，一共只有四个网络线程，大文件耗时的话会严重影响其他的，继续研究中。</p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【IOS编程 00】The Swift Programming Language</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS%E7%BC%96%E7%A8%8B_00_The_Swift_Programming_Language/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS%E7%BC%96%E7%A8%8B_00_The_Swift_Programming_Language/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                稍微看了下 Swift 语言的语法结构，与 Python 语法大致一样，迄今接触过的语言，当属Python 的格式最为美丽，如今Swift 与 Python 类似，提起了我的兴趣，希望能借此 踏入 IOS 领域 。            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS谷歌地图 DEMO</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E8%B0%B7%E6%AD%8C%E5%9C%B0%E5%9B%BE_DEMO/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E8%B0%B7%E6%AD%8C%E5%9C%B0%E5%9B%BE_DEMO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <img src="" alt="">需要做谷歌地图,涉及到js+html,最烦了......<p>涉及到自动以 infowindow ,自定义 marker</p><p><img src="https://img-blog.csdn.net/20150312151947779?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWtyY3Bw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></p><p>研究了将近一个月,苦逼还是苦逼!</p><p>下载链接 <a href="http://download.csdn.net/detail/mkr127/8494939" rel="noopener" target="_blank">http://download.csdn.net/detail/mkr127/8494939</a></p><p>基于本人耗费的精力太多,且最讨厌html+js+css编码,所以分有点高,不洗勿喷!</p><p><br></p><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOSTextView 设置无下划线超链接</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_TextView_%E8%AE%BE%E7%BD%AE%E6%97%A0%E4%B8%8B%E5%88%92%E7%BA%BF%E8%B6%85%E9%93%BE%E6%8E%A5/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_TextView_%E8%AE%BE%E7%BD%AE%E6%97%A0%E4%B8%8B%E5%88%92%E7%BA%BF%E8%B6%85%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p><br></p><p></p><pre><code class="language-java">// 设置无下划线超链接 startString textStr = "13771839951;021-12345678";text.setAutoLinkMask(Linkify.PHONE_NUMBERS);text.setText(textStr);Spannable s = (Spannable) text.getText();s.setSpan(new UnderlineSpan() {@Overridepublic void updateDrawState(TextPaint ds) {ds.setColor(ds.linkColor);ds.setUnderlineText(false);}}, 0, textStr.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);// 设置无下划线超链接 end</code></pre><br>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS【数据结构与算法 03】直接插入排序</title>
      <link href="/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_03_%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/11/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95_03_%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css"><script id="toolbar-tpl-scriptId" src="https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js" type="text/javascript" domain="https://blog.csdn.net/"></script><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/blog_code-c3a0c33d5c.css"><link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/vendor/pagination/paging.css"><div class="htmledit_views" id="content_views">                <p></p><h3 style="color:rgb(54,46,43);font-family:Arial;line-height:26px;"><span style="font-family:'Microsoft YaHei';">算法思想（从小到大排序）</span></h3><div style="color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;"><ul><li><span style="font-family:SimHei;">将待排序数组看左右两个序列，左序列有序，有序列无序。</span></li><li><span style="font-family:SimHei;">假设第一个数array[0]为有序列，那么array[1,N-1]为无序列.循环遍历无序列，找出array[i]在有序列中应该插入的位置,插入。</span></li><li><span style="font-family:SimHei;">例如一个乱序数组为{1,3,2,4 ， 假如有序列为 { 1,3 } 无序列循环到2时 ，那么2在有序列中的位置应该是1 - 3 中间 ， 所以 [ 3. . .2 ) 之间的所有数据右移 ， 即3右移的2的位置 ， 腾出了3原先所在的位置 ， 由2替代</span></li></ul></div><p></p><p><a href="http://blog.csdn.net/mkrcpp/article/details/39320797" rel="noopener" target="_blank"><strong>博客地址：http://blog.csdn.net/mkrcpp/article/details/39320797</strong></a><br></p><p></p><pre><code class="language-java">import java.util.Arrays;/*** * @title 直接插入排序 * @author michael.mao * @date 2014年9月16日 下午1:59:04 * @version V1.0 */public class InsertSort{/*** * @title 直接插入排序 * @description 将待排序数组看左右两个序列，左序列有序，有序列无序。 *              假设第一个数array[0]为有序列，那么array[1,N-1]为无序列.循环遍历无序列，找出array[i] *              在有序列中应该插入的位置,插入。&lt;br/&gt; *              例如一个乱序数组为{1,3,2,4 ， 假如有序列为 { 1,3 } 无序列循环到2时 ， *              那么2在有序列中的位置应该是1 - 3 中间 ， 所以 [ 3. . .2 ) 之间的所有数据右移 ， 即3 *              右移的2的位置 ， 腾出了3原先所在的位置 ， 由2替代 * @author michael.mao * @date 2014年9月16日 下午2:08:40 * @version V1.0 */public static void execute(int[] array){// 待插入的位置int tmpV, j = 0;// 循环无序列，次数为 N-1，默认有序列为 {array[0]}for (int i = 1; i &lt; array.length; i++){// 保存待插入的值tmpV = array[i];// 在有序列中找到合适的位置for (j = 0; j &lt; i; j++)if ( array[i] &lt; array[j] )break;// 如果array[i]比有序列中任何一个都大，则j退出循环时， j == i，则array[0,i]为有序列，无需插入if ( j != i ){// 将[j,i-1]顺序右移，腾出array[j]位置for (int k = i - 1; k &gt;= j; k--)array[k + 1] = array[k];// 插入array[j] = tmpV;}System.err.println(i + "----" + Common.print(array));}}// 循环测试次数public static int LOOP_COUNT = 1;public static int ARRAY_SIZE = 7;public static void main(String[] args){int[] mArray = Common.getArray(ARRAY_SIZE);int allTime = 0;for (int i = 0; i &lt; LOOP_COUNT; i++){// 拷贝数组int[] tmpArray = Arrays.copyOf(mArray, ARRAY_SIZE);Common.print(tmpArray);long tmpTime = System.currentTimeMillis();execute(tmpArray);Common.print(tmpArray);allTime += System.currentTimeMillis() - tmpTime;}System.err.println("数组大小为(" + ARRAY_SIZE + ")的" + LOOP_COUNT + "次插入排序的平均耗时为：" + allTime / (float) LOOP_COUNT);}}</code></pre><br><pre><code class="language-java">1----58 80 15 27 01 68 43 2----15 58 80 27 01 68 43 3----15 27 58 80 01 68 43 4----01 15 27 58 80 68 43 5----01 15 27 58 68 80 43 6----01 15 27 43 58 68 80</code></pre><br><pre><code class="language-java">数组大小为(10000)的100次直接插入排序的平均耗时为：17.58 ms</code></pre><p><br></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS_UICOLLECTIONVIEW_CELL_自适应大小</title>
      <link href="/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_UICOLLECTIONVIEW_CELL_%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F/"/>
      <url>/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_UICOLLECTIONVIEW_CELL_%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>自己研究是一个痛苦的过程,网上的完整一点的文章很少,而且总是遇到各种各样的问题,所以记录下来去帮助那些像我一样的人少走一些弯路</p><h3 id="实现目标-可以横向滚动的菜单栏"><a href="#实现目标-可以横向滚动的菜单栏" class="headerlink" title="实现目标 可以横向滚动的菜单栏"></a>实现目标 可以横向滚动的菜单栏</h3><p>点击任意一个CELL ,下方的数据发生改变,这里先用横向滚动的UITableView,不好做,然后用第三方的UIScrollView做的,也不好用</p><p><img src="http://upload-images.jianshu.io/upload_images/2062311-65e0a7b6423957be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一个小小的自适应代码,搞了两天两夜,IOS相比Android编码,简直太落后了,</span><br><span class="line"></span><br><span class="line">1. 通过约束自适应大小会出现最后1-2个数据不显示的问题,count是正确的,此时发现设置sectionInset&gt;0 以及 minimumLineSpacing=1 就显示完整了,但是这样代码就变成了魔术代码,后经过多方请教,发现决定性因素是 返回 CELL size的时候不能写 zero, 宽度自适应的时候,设置宽&gt;0,高度自适应的时候要设置高&gt;0,不然会出现末尾的几个cell丢失的不明不白的问题,如果约束写在自定义CELL 的 layoutSubviews 方法里,则需要在显示CELL的时候即cellForItemAt方法里调用 cell.layoutIfNeeded(),不然会出现CELL错乱的问题</span><br><span class="line"></span><br><span class="line">2. 通过自己计算CELL的大小,最开始是稀里糊涂的,结果现在已经豁然开朗,在 sizeForItemAt 里面返回的是 CELL.frame 的size ,但是CELL frame 里面的子view 都还没有设置大小,所以会不显示,需要在 layoutSubviews 里对子view进行设置大小,所以我认为 layoutSubviews 方法是在 sizeForItemAt之后调用的,已经可以拿到 CELL frame size</span><br><span class="line"></span><br><span class="line">3. 总结: 约束自适应优先使用,因为CELL越来越复杂的话自己计算就会十分麻烦,当然也可以自己计算大小然后通过约束来搞定subView 之间的位置关系混着用</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">import SnapKit</span><br><span class="line">import Foundation</span><br><span class="line"></span><br><span class="line">class HorizontalCollectionView: UIView, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout &#123;</span><br><span class="line">    var dataArray: [String] = [] &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">            collectionView.reloadData()</span><br><span class="line">            collectionView.collectionViewLayout.invalidateLayout()</span><br><span class="line">            //collectionView.reloadSections(IndexSet(integersIn: 0...0))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var collectionView: UICollectionView!</span><br><span class="line"></span><br><span class="line">    override init(frame: CGRect) &#123;</span><br><span class="line">        super.init(frame: frame)</span><br><span class="line">        self.setUp()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">        fatalError(&quot;init(coder:) has not been implemented&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func requestViewData() &#123;</span><br><span class="line">        dataArray = [&quot;0&quot;, &quot;1&quot;, &quot;22&quot;, &quot;333&quot;, &quot;4444&quot;, &quot;55555&quot;, &quot;666666&quot;, &quot;7777777&quot;, &quot;88888888&quot;, &quot;999999999&quot;, &quot;10101010101010101010&quot;, &quot;A&quot;, &quot;1111111111111111111111&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;]</span><br><span class="line">        print(&quot;dataArray.count=&quot;, dataArray.count)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private func setUp() &#123;</span><br><span class="line">        let flowLayout = UICollectionViewFlowLayout()</span><br><span class="line"></span><br><span class="line">        flowLayout.minimumInteritemSpacing = 10;</span><br><span class="line">        flowLayout.sectionInset = UIEdgeInsetsMake(0, 0, 0, 0)</span><br><span class="line">        flowLayout.scrollDirection = .horizontal</span><br><span class="line"></span><br><span class="line">        //===== CELL 约束自适应 必备条件 1 =====</span><br><span class="line">        if #available(iOS 10.0, *) &#123;</span><br><span class="line">            flowLayout.estimatedItemSize = UICollectionViewFlowLayoutAutomaticSize</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            flowLayout.estimatedItemSize = CGSize(width: 15, height: 48)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        collectionView = UICollectionView.init(frame: CGRect(0, 0, SCREEN_WIDTH, 48), collectionViewLayout: flowLayout)</span><br><span class="line">        collectionView.delegate = self</span><br><span class="line">        collectionView.dataSource = self</span><br><span class="line">        collectionView.backgroundColor = UIColor.yellow</span><br><span class="line">        collectionView.showsHorizontalScrollIndicator = false</span><br><span class="line">        self.addSubview(collectionView)</span><br><span class="line"></span><br><span class="line">        collectionView.register(HorizontalLabelCell.classForCoder(), forCellWithReuseIdentifier: &quot;_cell&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) &#123;</span><br><span class="line">        print(&quot;点击了 cell&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int &#123;</span><br><span class="line">        print(&quot;dataArray.count=&quot;, dataArray.count)</span><br><span class="line">        return dataArray.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell &#123;</span><br><span class="line">        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: &quot;_cell&quot;, for: indexPath) as! HorizontalLabelCell</span><br><span class="line">        cell.title = dataArray[indexPath.row]</span><br><span class="line">        return cell</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize &#123;</span><br><span class="line">        //===== CELL 计算自适应 必备条件 1 =====</span><br><span class="line">        // return CGSize(dataArray[indexPath.row].widthWithFont(), 48)</span><br><span class="line"></span><br><span class="line">        //===== CELL 约束自适应 必备条件 2 ===== 宽度或者高度一定要  大于 0 ,否则会出现丢失错误等不可预料问题</span><br><span class="line">        return CGSize(0.01, 48)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HorizontalLabelCell: UICollectionViewCell &#123;</span><br><span class="line"></span><br><span class="line">    private lazy var titleLabel: UILabel = &#123;</span><br><span class="line">        let label = UILabel()</span><br><span class="line">        label.numberOfLines = 1</span><br><span class="line">        label.font = UIFont.systemFont(ofSize: 18)</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        label.textColor = UIColor.red</span><br><span class="line">        return label</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    var title: String = &quot;&quot; &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">            self.titleLabel.text = title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">        super.init(coder: aDecoder)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override init(frame: CGRect) &#123;</span><br><span class="line">        super.init(frame: frame)</span><br><span class="line">        self.contentView.addSubview(self.titleLabel)</span><br><span class="line"></span><br><span class="line">        //===== CELL 约束自适应 必备条件 3 =====</span><br><span class="line">        self.titleLabel.snp.makeConstraints &#123; maker in</span><br><span class="line">            maker.left.top.equalTo(self.contentView)</span><br><span class="line">            maker.width.greaterThanOrEqualTo(5)</span><br><span class="line">            maker.height.greaterThanOrEqualTo(48)</span><br><span class="line">            maker.height.equalTo(self.contentView).priorityLow()</span><br><span class="line">            maker.right.equalTo(self.contentView).priorityLow()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //===== CELL 计算自适应 必备条件 2 ===== 如果没有使用约束,则在这里赋值 subViews frame 大小</span><br><span class="line">    /*override func layoutSubviews() &#123;</span><br><span class="line">        super.layoutSubviews()</span><br><span class="line">        self.titleLabel.frame = self.contentView.frame</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lazy var topMenuView: HorizontalCollectionView = &#123;</span><br><span class="line">    let horizontalView = HorizontalCollectionView.init(frame: CGRect(0, 0, SCREEN_WIDTH, 48))</span><br><span class="line">    return horizontalView</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    self.view.addSubview(self.topMenuView)</span><br><span class="line">    self.topMenuView.snp.makeConstraints &#123; maker in</span><br><span class="line">        maker.left.right.top.equalTo(self.view)</span><br><span class="line">        maker.height.equalTo(48)</span><br><span class="line">    &#125;</span><br><span class="line">    self.topMenuView.requestViewData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>经过多次使用总结: 上面通过约束自适应的方案当只有一个 cell 的时候,会居中,需要自定义 followLayout 设置左对齐,总之会有各种各样的问题,经老开发提醒,UICollectionView 的宽高最好在 外部给定, 即 sizeForItemAtIndexPath 这里返回固定的宽高,然后 不要设置 estimatedItemSize,然后在 自定义Cell里面通过约束布局,<br>注意 UICollectionView 有默认的 spacing 间距,需要设置为0,才不会出现计算之外的问题,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UICollectionViewFlowLayout *layout = [UICollectionViewFlowLayout new];</span><br><span class="line">layout.minimumInteritemSpacing = 0;</span><br><span class="line">layout.minimumLineSpacing = 0;</span><br></pre></td></tr></table></figure></p><p>即趋势应该是  由外到内 的设置 大小.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_FTP</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_FTP/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_FTP/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装-vsftpd"><a href="#1-安装-vsftpd" class="headerlink" title="1 安装 vsftpd"></a>1 安装 vsftpd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装vsftpd</span><br><span class="line">yum install -y vsftpd</span><br><span class="line"># 设置开机启动</span><br><span class="line">chkconfig vsftpd on</span><br><span class="line"># 重启</span><br><span class="line">service vsftpd restart</span><br><span class="line"># 查看vsftpd服务的状态</span><br><span class="line">service vsftpd status</span><br></pre></td></tr></table></figure><h3 id="2-配置-vsftpd-conf"><a href="#2-配置-vsftpd-conf" class="headerlink" title="2 配置 vsftpd.conf"></a>2 配置 vsftpd.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 备份配置文件</span><br><span class="line">cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span><br><span class="line"># 执行以下命令修改配置文件</span><br><span class="line">sed -i &quot;s/anonymous_enable=YES/anonymous_enable=YES/g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line">sed -i &quot;s/#anon_upload_enable=YES/anon_upload_enable=NO/g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line">sed -i &quot;s/#anon_mkdir_write_enable=YES/anon_mkdir_write_enable=NO/g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line">sed -i &quot;s/#chown_uploads=YES/chown_uploads=NO/g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line">sed -i &quot;s/#async_abor_enable=YES/async_abor_enable=YES/g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line">sed -i &quot;s/#ascii_upload_enable=YES/ascii_upload_enable=YES/g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line">sed -i &quot;s/#ascii_download_enable=YES/ascii_download_enable=YES/g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line">sed -i &quot;s/#ftpd_banner=Welcome to blah FTP service./ftpd_banner=Welcome to FTP service./g&quot; &apos;/etc/vsftpd/vsftpd.conf&apos;</span><br><span class="line"></span><br><span class="line">#添加下列内容到vsftpd.conf末尾</span><br><span class="line">use_localtime=YES</span><br><span class="line">listen_port=21</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">idle_session_timeout=300</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vsftpd</span><br><span class="line">user_config_dir=/etc/vsftpd/configusers</span><br><span class="line">data_connection_timeout=1</span><br><span class="line">virtual_use_local_privs=YES</span><br><span class="line">pasv_min_port=10060</span><br><span class="line">pasv_max_port=10090</span><br><span class="line">accept_timeout=5</span><br><span class="line">connect_timeout=1</span><br><span class="line"></span><br><span class="line"># 匿名用户相关设置</span><br><span class="line">anon_root=/home/vsftpd/public</span><br><span class="line">local_root=/home/vsftpd/public</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">no_anon_password=YES</span><br><span class="line">anon_upload_enable=NO</span><br><span class="line">anon_mkdir_write_enable=NO</span><br></pre></td></tr></table></figure><h3 id="3-建立用户文件"><a href="#3-建立用户文件" class="headerlink" title="3 建立用户文件"></a>3 建立用户文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 第一行用户名，第二行密码，不能使用root为用户名</span><br><span class="line">vi /etc/vsftpd/virtusers</span><br><span class="line">admin</span><br><span class="line">123456</span><br><span class="line">userA</span><br><span class="line">123456</span><br><span class="line">userB</span><br><span class="line">123456</span><br><span class="line">userC</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h3 id="4-生成用户数据文件"><a href="#4-生成用户数据文件" class="headerlink" title="4 生成用户数据文件"></a>4 生成用户数据文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 注意如果后面对 /etc/vsftpd/virtusers 用户文件的任意修改比如增加用户, 需要重新执行 db_load 的操作才会生效</span><br><span class="line">db_load -T -t hash -f /etc/vsftpd/virtusers /etc/vsftpd/virtusers.db</span><br><span class="line"># 设定PAM验证文件，并指定对虚拟用户数据库文件进行读取</span><br><span class="line">chmod 600 /etc/vsftpd/virtusers.db</span><br></pre></td></tr></table></figure><h3 id="5-修改-etc-pam-d-vsftpd文件"><a href="#5-修改-etc-pam-d-vsftpd文件" class="headerlink" title="5 修改/etc/pam.d/vsftpd文件"></a>5 修改/etc/pam.d/vsftpd文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改前先备份 </span><br><span class="line">cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.bak</span><br><span class="line"># 将auth及account的所有配置行均注释掉</span><br><span class="line">vi /etc/pam.d/vsftpd</span><br><span class="line">auth sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers</span><br><span class="line">account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers</span><br><span class="line"># 如果系统为32位，上面改为lib</span><br></pre></td></tr></table></figure><h3 id="6-新建系统用户vsftpd，用户目录为-home-vsftpd"><a href="#6-新建系统用户vsftpd，用户目录为-home-vsftpd" class="headerlink" title="6 新建系统用户vsftpd，用户目录为/home/vsftpd"></a>6 新建系统用户vsftpd，用户目录为/home/vsftpd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#用户登录终端设为/bin/false(即：使之不能登录系统)</span><br><span class="line">useradd vsftpd -d /home/vsftpd -s /bin/false</span><br><span class="line">chown -R vsftpd:vsftpd /home/vsftpd</span><br></pre></td></tr></table></figure><h3 id="7-建立虚拟用户个人配置文件"><a href="#7-建立虚拟用户个人配置文件" class="headerlink" title="7 建立虚拟用户个人配置文件"></a>7 建立虚拟用户个人配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/vsftpd/configusers</span><br><span class="line">cd /etc/vsftpd/configusers</span><br><span class="line"></span><br><span class="line">#这里建立两个虚拟用户配合文件</span><br><span class="line">touch admin</span><br><span class="line"></span><br><span class="line">#建立用户根目录</span><br><span class="line">mkdir -p /home/vsftpd/admin/</span><br><span class="line"></span><br><span class="line">#编辑admin用户配置文件，内容如下，其他用户类似</span><br><span class="line">vi admin</span><br><span class="line"></span><br><span class="line">local_root=/home/vsftpd/admin/</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br></pre></td></tr></table></figure><h3 id="8-防火墙设置"><a href="#8-防火墙设置" class="headerlink" title="8 防火墙设置"></a>8 防火墙设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables-config</span><br><span class="line"># 增加nf_conntrack_ftp， 也有文档ip_conntrack_ftp其实是它的别名</span><br><span class="line">IPTABLES_MODULES=&quot;nf_conntrack_ftp&quot;</span><br><span class="line"></span><br><span class="line"># 保存上面的配置后在控制台执行下面的命令</span><br><span class="line">iptables -A INPUT  -p tcp -m tcp --dport 21 -m conntrack --ctstate ESTABLISHED,NEW -j ACCEPT -m comment --comment &quot;Allow ftp connections on port 21&quot;</span><br><span class="line">iptables -A OUTPUT -p tcp -m tcp --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment &quot;Allow ftp connections on port 21&quot;</span><br><span class="line">iptables -A INPUT  -p tcp -m tcp --dport 20 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT -m comment --comment &quot;Allow ftp connections on port 20&quot;</span><br><span class="line">iptables -A OUTPUT -p tcp -m tcp --dport 20 -m conntrack --ctstate ESTABLISHED -j ACCEPT -m comment --comment &quot;Allow ftp connections on port 20&quot;</span><br><span class="line">iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state NEW -p tcp --dport 10060:10090 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m state --state NEW -p tcp --sport 10060:10090 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line"># 如果以上设置不行则尝试进行下面的操作</span><br><span class="line"># 如果以上设置不行则尝试进行下面的操作</span><br><span class="line"># 如果以上设置不行则尝试进行下面的操作</span><br><span class="line"></span><br><span class="line"># 这是替补方案</span><br><span class="line">vi /etc/sysconfig/iptables</span><br><span class="line"># 编辑iptables文件，添加如下内容，开启21端口</span><br><span class="line"></span><br><span class="line"># Generated by iptables-save v1.4.7 on Wed Mar 21 13:50:00 2018</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 21&quot; -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 20 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 20&quot; -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 10060:10090 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 21&quot; -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 20 -m conntrack --ctstate ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 20&quot; -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m state --state NEW -m tcp --sport 10060:10090 -j ACCEPT</span><br><span class="line">-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Wed Mar 21 13:50:00 2018</span><br><span class="line"></span><br><span class="line"># 重启防火墙使配置生效</span><br><span class="line">service iptables restart</span><br><span class="line"># 或者</span><br><span class="line">/etc/init.d/iptables restart</span><br></pre></td></tr></table></figure><h3 id="9-重启vsftpd服务器"><a href="#9-重启vsftpd服务器" class="headerlink" title="9 重启vsftpd服务器"></a>9 重启vsftpd服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><h3 id="10-连接测试"><a href="#10-连接测试" class="headerlink" title="10 连接测试"></a>10 连接测试</h3><ul><li>在部署 vsftpd 服务的同一台机器上进行内网测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ftp -y</span><br><span class="line">ftp 127.0.0.1</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Connected to 127.0.0.1 (127.0.0.1).</span><br><span class="line">220 Welcome to FTP service.</span><br><span class="line">Name (127.0.0.1:root): admin</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (127,0,0,1,39,88).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line"></span><br><span class="line"># 至此说明内网可以访问</span><br></pre></td></tr></table></figure><ul><li>在部署 vsftpd 服务的同一台机器上进行外网测试 (查看该服务器外网的ip为 10.10.10.10)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp -p 10.10.10.10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Connected to 10.10.10.10 (10.10.10.10).</span><br><span class="line">220 Welcome to FTP service.</span><br><span class="line">Name (10.10.10.10:root): admin</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (10,47,12,111,39,77).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line"></span><br><span class="line"># 至此说明外网可以访问</span><br></pre></td></tr></table></figure><h3 id="11-Connection-refused"><a href="#11-Connection-refused" class="headerlink" title="11 Connection refused"></a>11 Connection refused</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 查看 21 端口是否已开启</span><br><span class="line">netstat -na --ip</span><br><span class="line"></span><br><span class="line"># 在客户端测试</span><br><span class="line">$ telnet ip.ip.ip.ip 21</span><br><span class="line">Trying ip.ip.ip.ip...</span><br><span class="line">telnet: connect to address ip.ip.ip.ip: Connection refused</span><br><span class="line">telnet: Unable to connect to remote host</span><br><span class="line"></span><br><span class="line"># 发现在客户端连接不上,尝试关闭 vsftpd 服务器的防火墙</span><br><span class="line">service vsftpd stop</span><br><span class="line"></span><br><span class="line"># 在客户端重新 telnet</span><br><span class="line">telnet  ip.ip.ip.ip 21</span><br><span class="line">Trying ip.ip.ip.ip...</span><br><span class="line">Connected to v600000-97.dds.com.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">220 Welcome to FTP service.</span><br><span class="line"></span><br><span class="line"># 发现连接成功,则问题出在防火墙的配置上</span><br><span class="line"># 可以尝试把防火墙设置为 第8步的一模一样(注意备份)再试试</span><br></pre></td></tr></table></figure><h1 id="目录结构与成员权限配置"><a href="#目录结构与成员权限配置" class="headerlink" title="目录结构与成员权限配置"></a>目录结构与成员权限配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 假设有以下目录结构</span><br><span class="line">/home/vsftpd/</span><br><span class="line">.</span><br><span class="line">└── resources</span><br><span class="line">    └── organization</span><br><span class="line">        └── abc</span><br><span class="line">            └── apps</span><br><span class="line">                └── xyz</span><br><span class="line">                    └── 4.5.1</span><br><span class="line">                        ├── debug</span><br><span class="line">                        │   ├── android</span><br><span class="line">                        │   └── ios</span><br><span class="line">                        └── release</span><br><span class="line">                            ├── android</span><br><span class="line">                            └── ios</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"># 设置匿名用户只能访问 apps 目录</span><br><span class="line">anon_root=/home/vsftpd/resources/organization/abc/apps</span><br><span class="line"># 设置登录用户的默认访问目录 为abc, 权限比匿名用户高一级</span><br><span class="line">local_root=/home/vsftpd/resources/organization/abc</span><br><span class="line"></span><br><span class="line">#保存 重启 vsftpd</span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ul><li>发现有的用户可以登录, 但是有的用户报出 <strong>‘Server response: ‘530 Login incorrect.’ ‘</strong> 错误<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 原因是由于在 /etc/vsftpd/virtusers 中增加/修改/删除了用户, 需要重新执行以下命令, 问题解决</span><br><span class="line">db_load -T -t hash -f /etc/vsftpd/virtusers /etc/vsftpd/virtusers.db</span><br><span class="line">service vsftpd restart</span><br><span class="line"></span><br><span class="line"># 即对 /etc/vsftpd/virtusers 用户文件的任意修改, 需要重新执行 db_load 的操作才会生效</span><br></pre></td></tr></table></figure></li></ul><h1 id="所以正确的新增-修改用户的步骤为"><a href="#所以正确的新增-修改用户的步骤为" class="headerlink" title="所以正确的新增/修改用户的步骤为"></a>所以正确的新增/修改用户的步骤为</h1><ol><li>在 /etc/vsftpd/virtusers 文件中增加用户名密码</li><li>在 /etc/vsftpd/configusers 中新建该用户对应的配置文件</li><li>执行命令刷新数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_load -T -t hash -f /etc/vsftpd/virtusers /etc/vsftpd/virtusers.db</span><br></pre></td></tr></table></figure></li></ol><h1 id="上传文件失败-‘Server-response-‘200-PORT-command-successful-Consider-using-PASV-’’"><a href="#上传文件失败-‘Server-response-‘200-PORT-command-successful-Consider-using-PASV-’’" class="headerlink" title="上传文件失败 ‘Server response: ‘200 PORT command successful. Consider using PASV.’’"></a>上传文件失败 <strong>‘Server response: ‘200 PORT command successful. Consider using PASV.’’</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将 /home/vsftpd 本身及其所有子目录子文件的权限和组都改为 vsftpd 用户, 普通用户才会有权限上传文件</span><br><span class="line">chown -R vsftpd:vsftpd /home/vsftpd</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x. 2 vsftpd vsftpd 4096 Mar 21 19:19 android</span><br><span class="line">drwxr-xr-x. 2 vsftpd vsftpd 4096 Mar 21 16:22 ios</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://blog.csdn.net/the_victory/article/details/52192085" target="_blank" rel="noopener">http://blog.csdn.net/the_victory/article/details/52192085</a></li><li><a href="https://www.cnblogs.com/changbin/p/5830395.html" target="_blank" rel="noopener">https://www.cnblogs.com/changbin/p/5830395.html</a></li><li><a href="https://jingyan.baidu.com/article/ea24bc3984a3b2da63b33154.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/ea24bc3984a3b2da63b33154.html</a></li><li><a href="https://unix.stackexchange.com/questions/93554/iptables-to-allow-incoming-ftp" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/93554/iptables-to-allow-incoming-ftp</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法_00003_约瑟夫环</title>
      <link href="/2018/11/19/%E7%AE%97%E6%B3%95_00003_%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
      <url>/2018/11/19/%E7%AE%97%E6%B3%95_00003_%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="1-总结"><a href="#1-总结" class="headerlink" title="1 总结"></a>1 总结</h3><p>有 <strong>n</strong> 个打算杀身成仁的犹太人(<em>将军为约瑟夫</em>)商量后决定分别从黑箱子里抽签(<em>编号是连续的分别为 1,2,3…n, 在数组中下标即为 0,1,2…n-1</em>), 然后按编号顺序围成一个圈, 随机取一个数 <strong>m</strong> , 不断的依次杀死报数为 <strong>m</strong> (<em>即下标为m-1</em>)的人, 求最后一个报数为 <strong>m</strong> 的人编号(<em>自己有预谋的拿到这个编号,就可以活下来</em>)</p><ol><li>第一个杀死的人为第一个抽签为 <strong>m</strong> (<em>下标为m-1</em>) 的人</li><li>最后一个人在该轮的下标肯定为 <strong>0</strong></li></ol><ul><li>上一轮的结果f(n-1) + 报数的值 m 取模 这一轮的总数 n</li><li><strong>f(n)</strong>  即有 <strong>n</strong> 个人从 下标为<strong>m-1</strong>依次报数, 将报数为<strong>m</strong>的人杀掉, 求最后一个报数为m(最后一个可以活着)的人的下标<ul><li>注意报的数是从 <strong>1</strong> 开始到 <strong>m</strong>, 所以报数为m的人的下标为 m-1, 毕竟数组的下标从0开始<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">即 n 个人里面从 下标为(m-1)的人从1开始依次报数(1,2...m) 最后一个报数为m的人即为活着的人的 下标</span><br><span class="line">f(n) = (f(n-1) + m) % n</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a href="https://leetcode-cn.com/playground/93L4SBcb" target="_blank" rel="noopener">https://leetcode-cn.com/playground/93L4SBcb</a></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>大致过程如图下：<br><img src="http://upload-images.jianshu.io/upload_images/2062311-3a243e97a1545608?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="参考大神文章中提到一个容易理解的解释 [https://blog.csdn.net/tingyun_say/article/details/52343897](https://blog.csdn.net/tingyun_say/article/details/52343897)"></p><p>那么我们知道是这么得到的新的队列，那么也很容易知道怎么反推了：<br>反观如上的变化情况，都是减去一个q，所以：<br><strong>变回去的公式如下：old = (new + q) % n</strong><br>这里的old和new指的是下标，n指的是总共有多少人</p><p>知道了怎么推出之前的下标，那么也就可以一步步递推回去得到开始的队列或者从小推到大得到最后剩余的结果。<br><strong>最后再做一道实际点的例子，求J2(4):</strong></p><p>J2(1) = 0<br>J2(2) = (J2(1) + 2) % 2 = 0<br>J2(3) = (J2(2) + 2) % 3 = 2<br>J2(4) = (J2(3) + 2) % 4 = 0</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/tingyun_say/article/details/52343897" target="_blank" rel="noopener">https://blog.csdn.net/tingyun_say/article/details/52343897</a></p><p><a href="https://www.zhihu.com/question/23331384" target="_blank" rel="noopener">https://www.zhihu.com/question/23331384</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法_00002_Dijkstra</title>
      <link href="/2018/11/19/%E7%AE%97%E6%B3%95_00002_Dijkstra/"/>
      <url>/2018/11/19/%E7%AE%97%E6%B3%95_00002_Dijkstra/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><strong>Dijkstra算法</strong>是由荷兰计算机科学家<a href="http://wiki.mbalib.com/w/index.php?title=%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89&amp;action=edit" target="_blank" rel="noopener">狄克斯特拉</a>（<a href="http://wiki.mbalib.com/wiki/Dijkstra" target="_blank" rel="noopener">Dijkstra</a>）于1959 年提出的，因此又叫狄克斯特拉算法。是从一个顶点到其余各顶点的最短路径算法，解决的是有向图中最短路径问题。</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="http://upload-images.jianshu.io/upload_images/2062311-926a6bae20861cb3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dijkstra算法图(来源:见文章结尾参考链接)"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="http://upload-images.jianshu.io/upload_images/2062311-7799e871aa4e3116.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邻接矩阵(来源:见文章结尾参考链接)"></p><h3 id="以起点D开始的演算过程"><a href="#以起点D开始的演算过程" class="headerlink" title="以起点D开始的演算过程"></a>以起点D开始的演算过程</h3><p><img src="http://upload-images.jianshu.io/upload_images/2062311-30b98cc4326939a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dijkstra算法推演过程(来源:见文章结尾参考链接)"></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">初始化原始点到点距离矩阵:</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">     ┃     A     B     C     D     E     F     G</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">  A  ┃     0    12   INF   INF   INF    16    14</span><br><span class="line">  B  ┃    12     0    10   INF   INF     7   INF</span><br><span class="line">  C  ┃   INF    10     0     3     5     6   INF</span><br><span class="line">  D  ┃   INF   INF     3     0     4   INF   INF</span><br><span class="line">  E  ┃   INF   INF     5     4     0     2     8</span><br><span class="line">  F  ┃    16     7     6   INF     2     0     9</span><br><span class="line">  G  ┃    14   INF   INF   INF     8     9     0</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">初始化起点[D]到各顶点的距离:</span><br><span class="line">[D-&gt;A]的距离(INF)</span><br><span class="line">[D-&gt;B]的距离(INF)</span><br><span class="line">[D-&gt;C]的距离(  3)</span><br><span class="line">[D-&gt;D]的距离(  0)</span><br><span class="line">[D-&gt;E]的距离(  4)</span><br><span class="line">[D-&gt;F]的距离(INF)</span><br><span class="line">[D-&gt;G]的距离(INF)</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">开始执行 Dijkstra 算法:</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">标记[D]不参与下次循环</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">比较起点[D]到未被标记过的各顶点的距离:</span><br><span class="line">[D-&gt;A]的距离(INF)</span><br><span class="line">[D-&gt;B]的距离(INF)</span><br><span class="line">[D-&gt;C]的距离(  3)</span><br><span class="line">[D-&gt;E]的距离(  4)</span><br><span class="line">[D-&gt;F]的距离(INF)</span><br><span class="line">[D-&gt;G]的距离(INF)</span><br><span class="line">得出当前[D-&gt;C]的距离(  3)最短,标记[C]不参与下次循环,并计算判断当起点[D]在经过中间点[C]的情况下到达未被标记过的各顶点的距离是否变短,如果变短则更新最短距离):</span><br><span class="line">[D-&gt;C]的距离(  3) + [C-&gt;A]的距离(INF)得出[D-&gt;C-&gt;A]的距离(INF) ≥ [D-&gt;A]的累积计算的最短距离(INF)得出[D-&gt;A]的最短距离(INF)</span><br><span class="line">[D-&gt;C]的距离(  3) + [C-&gt;B]的距离( 10)得出[D-&gt;C-&gt;B]的距离( 13) &lt;  [D-&gt;B]的累积计算的最短距离(INF)得出[D-&gt;B]的最短距离( 13)</span><br><span class="line">[D-&gt;C]的距离(  3) + [C-&gt;E]的距离(  5)得出[D-&gt;C-&gt;E]的距离(  8) ≥ [D-&gt;E]的累积计算的最短距离(  4)得出[D-&gt;E]的最短距离(  4)</span><br><span class="line">[D-&gt;C]的距离(  3) + [C-&gt;F]的距离(  6)得出[D-&gt;C-&gt;F]的距离(  9) &lt;  [D-&gt;F]的累积计算的最短距离(INF)得出[D-&gt;F]的最短距离(  9)</span><br><span class="line">[D-&gt;C]的距离(  3) + [C-&gt;G]的距离(INF)得出[D-&gt;C-&gt;G]的距离(INF) ≥ [D-&gt;G]的累积计算的最短距离(INF)得出[D-&gt;G]的最短距离(INF)</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">比较起点[D]到未被标记过的各顶点的距离:</span><br><span class="line">[D-&gt;A]的距离(INF)</span><br><span class="line">[D-&gt;B]的距离( 13)</span><br><span class="line">[D-&gt;E]的距离(  4)</span><br><span class="line">[D-&gt;F]的距离(  9)</span><br><span class="line">[D-&gt;G]的距离(INF)</span><br><span class="line">得出当前[D-&gt;E]的距离(  4)最短,标记[E]不参与下次循环,并计算判断当起点[D]在经过中间点[E]的情况下到达未被标记过的各顶点的距离是否变短,如果变短则更新最短距离):</span><br><span class="line">[D-&gt;E]的距离(  4) + [E-&gt;A]的距离(INF)得出[D-&gt;E-&gt;A]的距离(INF) ≥ [D-&gt;A]的累积计算的最短距离(INF)得出[D-&gt;A]的最短距离(INF)</span><br><span class="line">[D-&gt;E]的距离(  4) + [E-&gt;B]的距离(INF)得出[D-&gt;E-&gt;B]的距离(INF) ≥ [D-&gt;B]的累积计算的最短距离( 13)得出[D-&gt;B]的最短距离( 13)</span><br><span class="line">[D-&gt;E]的距离(  4) + [E-&gt;F]的距离(  2)得出[D-&gt;E-&gt;F]的距离(  6) &lt;  [D-&gt;F]的累积计算的最短距离(  9)得出[D-&gt;F]的最短距离(  6)</span><br><span class="line">[D-&gt;E]的距离(  4) + [E-&gt;G]的距离(  8)得出[D-&gt;E-&gt;G]的距离( 12) &lt;  [D-&gt;G]的累积计算的最短距离(INF)得出[D-&gt;G]的最短距离( 12)</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">比较起点[D]到未被标记过的各顶点的距离:</span><br><span class="line">[D-&gt;A]的距离(INF)</span><br><span class="line">[D-&gt;B]的距离( 13)</span><br><span class="line">[D-&gt;F]的距离(  6)</span><br><span class="line">[D-&gt;G]的距离( 12)</span><br><span class="line">得出当前[D-&gt;F]的距离(  6)最短,标记[F]不参与下次循环,并计算判断当起点[D]在经过中间点[F]的情况下到达未被标记过的各顶点的距离是否变短,如果变短则更新最短距离):</span><br><span class="line">[D-&gt;F]的距离(  6) + [F-&gt;A]的距离( 16)得出[D-&gt;F-&gt;A]的距离( 22) &lt;  [D-&gt;A]的累积计算的最短距离(INF)得出[D-&gt;A]的最短距离( 22)</span><br><span class="line">[D-&gt;F]的距离(  6) + [F-&gt;B]的距离(  7)得出[D-&gt;F-&gt;B]的距离( 13) ≥ [D-&gt;B]的累积计算的最短距离( 13)得出[D-&gt;B]的最短距离( 13)</span><br><span class="line">[D-&gt;F]的距离(  6) + [F-&gt;G]的距离(  9)得出[D-&gt;F-&gt;G]的距离( 15) ≥ [D-&gt;G]的累积计算的最短距离( 12)得出[D-&gt;G]的最短距离( 12)</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">比较起点[D]到未被标记过的各顶点的距离:</span><br><span class="line">[D-&gt;A]的距离( 22)</span><br><span class="line">[D-&gt;B]的距离( 13)</span><br><span class="line">[D-&gt;G]的距离( 12)</span><br><span class="line">得出当前[D-&gt;G]的距离( 12)最短,标记[G]不参与下次循环,并计算判断当起点[D]在经过中间点[G]的情况下到达未被标记过的各顶点的距离是否变短,如果变短则更新最短距离):</span><br><span class="line">[D-&gt;G]的距离( 12) + [G-&gt;A]的距离( 14)得出[D-&gt;G-&gt;A]的距离( 26) ≥ [D-&gt;A]的累积计算的最短距离( 22)得出[D-&gt;A]的最短距离( 22)</span><br><span class="line">[D-&gt;G]的距离( 12) + [G-&gt;B]的距离(INF)得出[D-&gt;G-&gt;B]的距离(INF) ≥ [D-&gt;B]的累积计算的最短距离( 13)得出[D-&gt;B]的最短距离( 13)</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">比较起点[D]到未被标记过的各顶点的距离:</span><br><span class="line">[D-&gt;A]的距离( 22)</span><br><span class="line">[D-&gt;B]的距离( 13)</span><br><span class="line">得出当前[D-&gt;B]的距离( 13)最短,标记[B]不参与下次循环,并计算判断当起点[D]在经过中间点[B]的情况下到达未被标记过的各顶点的距离是否变短,如果变短则更新最短距离):</span><br><span class="line">[D-&gt;B]的距离( 13) + [B-&gt;A]的距离( 12)得出[D-&gt;B-&gt;A]的距离( 25) ≥ [D-&gt;A]的累积计算的最短距离( 22)得出[D-&gt;A]的最短距离( 22)</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">比较起点[D]到未被标记过的各顶点的距离:</span><br><span class="line">[D-&gt;A]的距离( 22)</span><br><span class="line">得出当前[D-&gt;A]的距离( 22)最短,标记[A]不参与下次循环,并计算判断当起点[D]在经过中间点[A]的情况下到达未被标记过的各顶点的距离是否变短,如果变短则更新最短距离):</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">经过 Dijkstra 算法处理之后D到其他节点的最短路径:</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line">[D-&gt;A]的最短路径为[D-&gt;E-&gt;F-&gt;A]        距离: 22</span><br><span class="line">[D-&gt;B]的最短路径为[D-&gt;C-&gt;B]           距离: 13</span><br><span class="line">[D-&gt;C]的最短路径为[D-&gt;C]              距离:  3</span><br><span class="line">[D-&gt;D]的最短路径为[D-&gt;D]              距离:  0</span><br><span class="line">[D-&gt;E]的最短路径为[D-&gt;E]              距离:  4</span><br><span class="line">[D-&gt;F]的最短路径为[D-&gt;E-&gt;F]           距离:  6</span><br><span class="line">[D-&gt;G]的最短路径为[D-&gt;E-&gt;G]           距离: 12</span><br><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br></pre></td></tr></table></figure><h3 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package krmao.algorithm.dijkstra;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayDeque;</span><br><span class="line">import java.util.Queue;</span><br><span class="line"></span><br><span class="line">import krmao.algorithm.common.Vocabulary;</span><br><span class="line"></span><br><span class="line">import static krmao.algorithm.common.MatrixUtil.INF;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 一些思路</span><br><span class="line"> */</span><br><span class="line">public class Dijkstra &#123;</span><br><span class="line"></span><br><span class="line">    public static void calculateByDijkstraAlgorithm(int startIndex, final int[][] distanceMatrix, final int[] newStartToNodeDistance, final int pathPreNodeIndex[]) &#123;</span><br><span class="line">        Queue&lt;Integer&gt; markedQueue = new ArrayDeque&lt;Integer&gt;();</span><br><span class="line">        System.out.printf(&quot;标记[%s]不参与下次循环\n&quot;, Vocabulary.charAt(startIndex));</span><br><span class="line">        markedQueue.add(startIndex);</span><br><span class="line">        System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">        while (markedQueue.size() &lt; distanceMatrix.length) &#123;//全部标记完,则循环结束</span><br><span class="line">            System.out.printf(&quot;比较起点[%s]到未被标记过的各顶点的距离:\n&quot;, Vocabulary.charAt(startIndex));</span><br><span class="line">            int minDistance = INF;</span><br><span class="line">            int minDistanceIndex = INF;</span><br><span class="line">            for (int j = 0; j &lt; distanceMatrix.length; j++) &#123;</span><br><span class="line">                if (!markedQueue.contains(j)) &#123;</span><br><span class="line">                    System.out.printf(&quot;[%c-&gt;%c]的距离(%3s)\n&quot;, Vocabulary.charAt(startIndex), Vocabulary.charAt(j), newStartToNodeDistance[j] == INF ? &quot;INF&quot; : newStartToNodeDistance[j]);</span><br><span class="line">                    if (newStartToNodeDistance[j] != INF &amp;&amp; (minDistance == INF || newStartToNodeDistance[j] &lt; minDistance)) &#123;</span><br><span class="line">                        minDistance = newStartToNodeDistance[j];</span><br><span class="line">                        minDistanceIndex = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (minDistanceIndex != INF &amp;&amp; newStartToNodeDistance[minDistanceIndex] != INF) &#123;</span><br><span class="line">                System.out.printf(&quot;得出当前[%c-&gt;%c]的距离(%3d)最短,标记[%s]不参与下次循环,并计算判断当起点[%s]在经过中间点[%s]的情况下到达未被标记过的各顶点的距离是否变短,如果变短则更新最短距离):\n&quot;, Vocabulary.charAt(startIndex), Vocabulary.charAt(minDistanceIndex), minDistance, Vocabulary.charAt(minDistanceIndex), Vocabulary.charAt(startIndex), Vocabulary.charAt(minDistanceIndex));</span><br><span class="line">                markedQueue.add(minDistanceIndex);</span><br><span class="line"></span><br><span class="line">                for (int currentThirdIndex = 0; currentThirdIndex &lt; distanceMatrix.length; currentThirdIndex++) &#123;</span><br><span class="line">                    if (!markedQueue.contains(currentThirdIndex)) &#123;</span><br><span class="line">                        int oldStartToThirdDistance = newStartToNodeDistance[currentThirdIndex];</span><br><span class="line">                        if (distanceMatrix[currentThirdIndex][minDistanceIndex] != INF) &#123;</span><br><span class="line">                            if (newStartToNodeDistance[currentThirdIndex] == INF || newStartToNodeDistance[currentThirdIndex] &gt; distanceMatrix[currentThirdIndex][minDistanceIndex] + newStartToNodeDistance[minDistanceIndex]) &#123;</span><br><span class="line">                                int startToThirdDistance = distanceMatrix[currentThirdIndex][minDistanceIndex] + newStartToNodeDistance[minDistanceIndex];</span><br><span class="line">                                printLog(startIndex, minDistanceIndex, newStartToNodeDistance[minDistanceIndex], currentThirdIndex, distanceMatrix[currentThirdIndex][minDistanceIndex], oldStartToThirdDistance, startToThirdDistance, &quot; &lt;  &quot;);</span><br><span class="line">                                newStartToNodeDistance[currentThirdIndex] = startToThirdDistance;</span><br><span class="line">                                pathPreNodeIndex[currentThirdIndex] = minDistanceIndex;</span><br><span class="line">                            &#125; else</span><br><span class="line">                                printLog(startIndex, minDistanceIndex, newStartToNodeDistance[minDistanceIndex], currentThirdIndex, distanceMatrix[currentThirdIndex][minDistanceIndex], oldStartToThirdDistance, newStartToNodeDistance[currentThirdIndex], &quot; ≥ &quot;);</span><br><span class="line">                        &#125; else</span><br><span class="line">                            printLog(startIndex, minDistanceIndex, newStartToNodeDistance[minDistanceIndex], currentThirdIndex, distanceMatrix[currentThirdIndex][minDistanceIndex], oldStartToThirdDistance, newStartToNodeDistance[currentThirdIndex], &quot; ≥ &quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void processPath(StringBuffer pathBuffer, final int pathPreNodeIndex[], int index) &#123;</span><br><span class="line">        if (pathPreNodeIndex[index] != INF) &#123;</span><br><span class="line">            processPath(pathBuffer, pathPreNodeIndex, pathPreNodeIndex[index]);</span><br><span class="line">            pathBuffer.append(Vocabulary.charAt(pathPreNodeIndex[index])).append(&quot;-&gt;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printPath(int startIndex, int matrixLength, int[] newStartToNodeDistance, final int pathPreNodeIndex[]) &#123;</span><br><span class="line">        System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">        for (int i = 0; i &lt; matrixLength; i++) &#123;</span><br><span class="line">            StringBuffer pathBuffer = new StringBuffer(&quot;[&quot;).append(Vocabulary.charAt(startIndex)).append(&quot;-&gt;&quot;);</span><br><span class="line">            processPath(pathBuffer, pathPreNodeIndex, i);</span><br><span class="line">            pathBuffer.append(Vocabulary.charAt(i)).append(&quot;]&quot;);</span><br><span class="line">            System.out.printf(&quot;[%c-&gt;%c]的最短路径为\t%-20s距离:%3d\n&quot;, Vocabulary.charAt(startIndex), Vocabulary.charAt(i), pathBuffer, newStartToNodeDistance[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printLog(int startIndex, int currentMinDistanceIndex, int startToMinDistance, int currentThirdIndex, int minToThirdDistance, int oldStartToThirdDistance, int newStartToThirdDistance, String symbol) &#123;</span><br><span class="line">        int tmpStartToMinToThirdDistance = startToMinDistance == INF || minToThirdDistance == INF ? INF : startToMinDistance + minToThirdDistance;</span><br><span class="line">        String tmpStartToMinToThirdDistanceStr = tmpStartToMinToThirdDistance == INF ? &quot;INF&quot; : String.valueOf(tmpStartToMinToThirdDistance);</span><br><span class="line">        System.out.printf(&quot;[%c-&gt;%c]的距离(%3s) + [%c-&gt;%c]的距离(%3s)&quot;</span><br><span class="line">                        + &quot;\t得出[%c-&gt;%c-&gt;%c]的距离(%3s)%s[%c-&gt;%c]的累积计算的最短距离(%3s)&quot;</span><br><span class="line">                        + &quot;\t得出[%c-&gt;%c]的最短距离(%3s)\n&quot;,</span><br><span class="line">                Vocabulary.charAt(startIndex), Vocabulary.charAt(currentMinDistanceIndex), startToMinDistance == INF ? &quot;INF&quot; : startToMinDistance, Vocabulary.charAt(currentMinDistanceIndex), Vocabulary.charAt(currentThirdIndex), minToThirdDistance == INF ? &quot;INF&quot; : minToThirdDistance</span><br><span class="line">                , Vocabulary.charAt(startIndex), Vocabulary.charAt(currentMinDistanceIndex), Vocabulary.charAt(currentThirdIndex), tmpStartToMinToThirdDistanceStr, symbol, Vocabulary.charAt(startIndex), Vocabulary.charAt(currentThirdIndex), oldStartToThirdDistance == INF ? &quot;INF&quot; : oldStartToThirdDistance</span><br><span class="line">                , Vocabulary.charAt(startIndex), Vocabulary.charAt(currentThirdIndex), newStartToThirdDistance == INF ? &quot;INF&quot; : newStartToThirdDistance</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###单元测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package krmao.algorithm.dijkstra.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import krmao.algorithm.common.MatrixUtil;</span><br><span class="line">import krmao.algorithm.common.Vocabulary;</span><br><span class="line"></span><br><span class="line">import static krmao.algorithm.floyed.Floyed.INF;</span><br><span class="line"></span><br><span class="line">public class DijkstraTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testDijkstra() &#123;</span><br><span class="line">        int originalMatrix[][] = new int[][]&#123;</span><br><span class="line">             /*A*//*B*//*C*//*D*//*E*//*F*//*G*/</span><br><span class="line">      /*A*/ &#123;0, 12, INF, INF, INF, 16, 14&#125;,</span><br><span class="line">      /*B*/ &#123;12, 0, 10, INF, INF, 7, INF&#125;,</span><br><span class="line">      /*C*/ &#123;INF, 10, 0, 3, 5, 6, INF&#125;,</span><br><span class="line">      /*D*/ &#123;INF, INF, 3, 0, 4, INF, INF&#125;,</span><br><span class="line">      /*E*/ &#123;INF, INF, 5, 4, 0, 2, 8&#125;,</span><br><span class="line">      /*F*/ &#123;16, 7, 6, INF, 2, 0, 9&#125;,</span><br><span class="line">      /*G*/ &#123;14, INF, INF, INF, 8, 9, 0&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        int pathPreNodeIndex[] = new int[originalMatrix.length];</span><br><span class="line">        int newStartToNodeDistance[] = new int[originalMatrix.length];</span><br><span class="line">        char startNode = &apos;D&apos;;</span><br><span class="line">        int startIndex = Vocabulary.indexFrom(startNode);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">        System.out.println(&quot;初始化原始点到点距离矩阵:&quot;);</span><br><span class="line">        MatrixUtil.printMatrix(originalMatrix);</span><br><span class="line">        System.out.printf(&quot;初始化起点[%s]到各顶点的距离:\n&quot;, Vocabulary.charAt(startIndex));</span><br><span class="line">        System.arraycopy(originalMatrix[startIndex], 0, newStartToNodeDistance, 0, originalMatrix.length);</span><br><span class="line">        for (int j = 0; j &lt; originalMatrix.length; j++) &#123;</span><br><span class="line">            pathPreNodeIndex[j] = INF;//借着这个循环初始化前向节点</span><br><span class="line">            System.out.printf(&quot;[%c-&gt;%c]的距离(%3s)\n&quot;, Vocabulary.charAt(startIndex), Vocabulary.charAt(j), newStartToNodeDistance[j] == INF ? &quot;INF&quot; : newStartToNodeDistance[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">        System.out.println(&quot;开始执行 Dijkstra 算法:&quot;);</span><br><span class="line">        System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">        krmao.algorithm.dijkstra.Dijkstra.calculateByDijkstraAlgorithm(startIndex, originalMatrix, newStartToNodeDistance, pathPreNodeIndex);</span><br><span class="line">        System.out.printf(&quot;经过 Dijkstra 算法处理之后%c到其他节点的最短路径:\n&quot;, startNode);</span><br><span class="line">        krmao.algorithm.dijkstra.Dijkstra.printPath(startIndex, originalMatrix.length, newStartToNodeDistance, pathPreNodeIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="涉及到的工具类"><a href="#涉及到的工具类" class="headerlink" title="涉及到的工具类"></a>涉及到的工具类</h3><p><a href="http://www.jianshu.com/p/a6f34f5f8cfa" target="_blank" rel="noopener">Vocabulary</a><br><a href="http://www.jianshu.com/p/a6f34f5f8cfa" target="_blank" rel="noopener">MatrixUtil</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.cnblogs.com/skywang12345/p/3711512.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3711512.html?utm_source=tuicool&amp;utm_medium=referral</a><br><a href="http://blog.sina.com.cn/s/blog_8fe28e630102wwye.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_8fe28e630102wwye.html</a><br><a href="http://wiki.mbalib.com/wiki/Dijkstra%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">http://wiki.mbalib.com/wiki/Dijkstra%E7%AE%97%E6%B3%95</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法_00001_Floyed</title>
      <link href="/2018/11/19/%E7%AE%97%E6%B3%95_00001_Floyed/"/>
      <url>/2018/11/19/%E7%AE%97%E6%B3%95_00001_Floyed/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>利用动态规划的思想寻找给定的加权图中多源点之间最短路径的算法</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>遍历所有地点(一层循环),判断该地点是否可以让 <strong>任意两地(这里就需要另外两层循环)</strong> 的距离更近,如果可以,记录下这个更短的距离,顺便保存路径</li><li>保存路径则按照保存第三地点名称的思路,假如AB之间有C使之更近,则PATH[A][B]=C;而其它循环自然会处理PATH[A][C],PATH[C][B]的问题,<strong>==INF</strong>则表示再无第三地点使之更近</li><li>输出路径则按照递归的思想,直到两个地点之间再无第三地点使之更近,递归结束</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="http://upload-images.jianshu.io/upload_images/2062311-7dcfdf27226f5f4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邻接矩阵.png"></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">初始化原始点到点距离矩阵:</span><br><span class="line">--------------------------------------------------</span><br><span class="line">     0     2     6     4</span><br><span class="line">    -1     0     3    -1</span><br><span class="line">     7    -1     0     1</span><br><span class="line">     5    -1    12     0</span><br><span class="line">--------------------------------------------------</span><br><span class="line">经过 Floyed 算法处理之后的点到点最短距离矩阵:</span><br><span class="line">--------------------------------------------------</span><br><span class="line">     0     2     5     4</span><br><span class="line">     9     0     3     4</span><br><span class="line">     6     8     0     1</span><br><span class="line">     5     7    10     0</span><br><span class="line">--------------------------------------------------</span><br><span class="line">[0-&gt;0] 的最短路径为 :(0-&gt;0)</span><br><span class="line">[0-&gt;1] 的最短路径为 :(0-&gt;1)</span><br><span class="line">[0-&gt;2] 的最短路径为 :(0-&gt;1-&gt;2)</span><br><span class="line">[0-&gt;3] 的最短路径为 :(0-&gt;3)</span><br><span class="line">[1-&gt;0] 的最短路径为 :(1-&gt;2-&gt;0)</span><br><span class="line">[1-&gt;1] 的最短路径为 :(1-&gt;1)</span><br><span class="line">[1-&gt;2] 的最短路径为 :(1-&gt;2)</span><br><span class="line">[1-&gt;3] 的最短路径为 :(1-&gt;2-&gt;3)</span><br><span class="line">[2-&gt;0] 的最短路径为 :(2-&gt;3-&gt;0)</span><br><span class="line">[2-&gt;1] 的最短路径为 :(2-&gt;3-&gt;0-&gt;1)</span><br><span class="line">[2-&gt;2] 的最短路径为 :(2-&gt;2)</span><br><span class="line">[2-&gt;3] 的最短路径为 :(2-&gt;3)</span><br><span class="line">[3-&gt;0] 的最短路径为 :(3-&gt;0)</span><br><span class="line">[3-&gt;1] 的最短路径为 :(3-&gt;0-&gt;1)</span><br><span class="line">[3-&gt;2] 的最短路径为 :(3-&gt;0-&gt;2)</span><br><span class="line">[3-&gt;3] 的最短路径为 :(3-&gt;3)</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package krmao.algorithm.floyed;</span><br><span class="line"></span><br><span class="line">public class Floyed &#123;</span><br><span class="line">    public static final int INF = -1;//无穷大/不可达</span><br><span class="line"></span><br><span class="line">    public static void calculateByFloyedAlgorithm(final int[][] distanceMatrix, final int pathMatrix[][]) &#123;</span><br><span class="line">        if (distanceMatrix != null) &#123;</span><br><span class="line">            for (int k = 0; k &lt; distanceMatrix.length; k++)</span><br><span class="line">                for (int i = 0; i &lt; distanceMatrix.length; i++)</span><br><span class="line">                    for (int j = 0; j &lt; distanceMatrix.length; j++) &#123;</span><br><span class="line">                        if (distanceMatrix[i][k] != Floyed.INF &amp;&amp; distanceMatrix[k][j] != Floyed.INF &amp;&amp; (distanceMatrix[i][j] == -1 || (distanceMatrix[i][j] &gt; distanceMatrix[i][k] + distanceMatrix[k][j]))) &#123;</span><br><span class="line">                            distanceMatrix[i][j] = distanceMatrix[i][k] + distanceMatrix[k][j];</span><br><span class="line">                            if (pathMatrix[i][j] == INF)</span><br><span class="line">                                pathMatrix[i][j] = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printPath(final int[][] distanceMatrix, final int pathMatrix[][]) &#123;</span><br><span class="line">        if (pathMatrix != null &amp;&amp; distanceMatrix != null) &#123;</span><br><span class="line">            for (int i = 0; i &lt; pathMatrix.length; i++) &#123;</span><br><span class="line">                for (int j = 0; j &lt; pathMatrix.length; j++) &#123;</span><br><span class="line">                    System.out.print(&quot;\t[&quot; + i + &quot;-&gt;&quot; + j + &quot;] 的最短路径为 :&quot;);</span><br><span class="line">                    if (distanceMatrix[i][j] == INF) &#123;</span><br><span class="line">                        System.out.println(&quot;(不可达)&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        System.out.print(&quot;(&quot; + i + &quot;-&gt;&quot;);</span><br><span class="line">                        printPath(pathMatrix, i, j);</span><br><span class="line">                        System.out.println(j + &quot;)&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void printPath(int path[][], int i, int j) &#123;//递归输出路径</span><br><span class="line">        if (path != null &amp;&amp; path[i][j] != INF) &#123;</span><br><span class="line">            printPath(path, i, path[i][j]);</span><br><span class="line">            System.out.printf(&quot;%d-&gt;&quot;, path[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printMatrix(final int[][] originalMatrix) &#123;</span><br><span class="line">        if (originalMatrix != null) &#123;</span><br><span class="line">            for (int[] itemMatrix : originalMatrix) &#123;</span><br><span class="line">                for (int itemValue : itemMatrix)</span><br><span class="line">                    System.out.printf(&quot;%6d&quot;, itemValue);</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package krmao.algorithm.floyed.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import static krmao.algorithm.floyed.Floyed.INF;</span><br><span class="line"></span><br><span class="line">public class FloyedTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testFloyed() &#123;</span><br><span class="line">        int originalMatrix[][] = new int[][]&#123;</span><br><span class="line">                &#123;0, 2, 6, 4&#125;,</span><br><span class="line">                &#123;INF, 0, 3, INF&#125;,</span><br><span class="line">                &#123;7, INF, 0, 1&#125;,</span><br><span class="line">                &#123;5, INF, 12, 0&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        //记录点到点之间 经过哪一个点(保存这个点的名字) 使得距离更近,初始值INF表示不经过别的点中转</span><br><span class="line">        int pathMatrix[][] = new int[][]&#123;</span><br><span class="line">                &#123;INF, INF, INF, INF&#125;,</span><br><span class="line">                &#123;INF, INF, INF, INF&#125;,</span><br><span class="line">                &#123;INF, INF, INF, INF&#125;,</span><br><span class="line">                &#123;INF, INF, INF, INF&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------------------------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;\t初始化原始点到点距离矩阵:&quot;);</span><br><span class="line">        System.out.println(&quot;--------------------------------------------------&quot;);</span><br><span class="line">        krmao.algorithm.floyed.Floyed.printMatrix(originalMatrix);</span><br><span class="line">        krmao.algorithm.floyed.Floyed.calculateByFloyedAlgorithm(originalMatrix, pathMatrix);</span><br><span class="line">        System.out.println(&quot;--------------------------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;\t经过 Floyed 算法处理之后的点到点最短距离矩阵:&quot;);</span><br><span class="line">        System.out.println(&quot;--------------------------------------------------&quot;);</span><br><span class="line">        krmao.algorithm.floyed.Floyed.printMatrix(originalMatrix);</span><br><span class="line">        System.out.println(&quot;--------------------------------------------------&quot;);</span><br><span class="line">        krmao.algorithm.floyed.Floyed.printPath(originalMatrix, pathMatrix);</span><br><span class="line">        System.out.println(&quot;--------------------------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://developer.51cto.com/art/201403/433874.htm" target="_blank" rel="noopener">http://developer.51cto.com/art/201403/433874.htm</a><br><a href="http://www.cnblogs.com/skywang12345/p/3711532.html" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3711532.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_REACT_NATIVE_拆分BUNDLE与ANDROID加载</title>
      <link href="/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_REACT_NATIVE_%E6%8B%86%E5%88%86BUNDLE%E4%B8%8EANDROID%E5%8A%A0%E8%BD%BD/"/>
      <url>/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_REACT_NATIVE_%E6%8B%86%E5%88%86BUNDLE%E4%B8%8EANDROID%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="1-拆分-bundle-代码-基于-react-native-最新版本-0-55-4-https-github-com-krmao-smart-metro-tree-smart"><a href="#1-拆分-bundle-代码-基于-react-native-最新版本-0-55-4-https-github-com-krmao-smart-metro-tree-smart" class="headerlink" title="1 拆分 bundle 代码(基于 react native 最新版本 0.55.4)https://github.com/krmao/smart-metro/tree/smart"></a>1 拆分 bundle 代码(基于 react native 最新版本 0.55.4)<a href="https://github.com/krmao/smart-metro/tree/smart" target="_blank" rel="noopener">https://github.com/krmao/smart-metro/tree/smart</a></h3><h3 id="2-android-分步加载-react-native-bundle-代码https-github-com-krmao-template-tree-reactnative-apps-app-template-android-arsenal-modules-module-template-react-native-src-main-java-com-smart-template-module-rn"><a href="#2-android-分步加载-react-native-bundle-代码https-github-com-krmao-template-tree-reactnative-apps-app-template-android-arsenal-modules-module-template-react-native-src-main-java-com-smart-template-module-rn" class="headerlink" title="2 android 分步加载 react native bundle 代码https://github.com/krmao/template/tree/reactnative/apps/app-template/android/arsenal/modules/module-template-react_native/src/main/java/com/smart/template/module/rn"></a>2 android 分步加载 react native bundle 代码<a href="https://github.com/krmao/template/tree/reactnative/apps/app-template/android/arsenal/modules/module-template-react_native/src/main/java/com/smart/template/module/rn" target="_blank" rel="noopener">https://github.com/krmao/template/tree/reactnative/apps/app-template/android/arsenal/modules/module-template-react_native/src/main/java/com/smart/template/module/rn</a></h3><h3 id="参考-https-github-com-tsyeyuanfeng-metro-bundler"><a href="#参考-https-github-com-tsyeyuanfeng-metro-bundler" class="headerlink" title="参考 https://github.com/tsyeyuanfeng/metro-bundler"></a>参考 <a href="https://github.com/tsyeyuanfeng/metro-bundler" target="_blank" rel="noopener">https://github.com/tsyeyuanfeng/metro-bundler</a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> REACT-NATIVE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法_00000_通用工具类</title>
      <link href="/2018/11/19/%E7%AE%97%E6%B3%95_00000_%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2018/11/19/%E7%AE%97%E6%B3%95_00000_%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="本文包含后面所有算法中涉及到的工具类"><a href="#本文包含后面所有算法中涉及到的工具类" class="headerlink" title="本文包含后面所有算法中涉及到的工具类"></a>本文包含后面所有算法中涉及到的工具类</h3><h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package krmao.algorithm.common;</span><br><span class="line"></span><br><span class="line">public class Vocabulary &#123;</span><br><span class="line">    public static char charAt(int index) &#123;</span><br><span class="line">        return (char) (index + 65);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int indexFrom(char _char) &#123;</span><br><span class="line">        return _char - 65;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MatrixUtil"><a href="#MatrixUtil" class="headerlink" title="MatrixUtil"></a>MatrixUtil</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package krmao.algorithm.common;</span><br><span class="line"></span><br><span class="line">public class MatrixUtil &#123;</span><br><span class="line">    public static final int INF = -1;//无穷大/不可达</span><br><span class="line"></span><br><span class="line">    public static void printMatrix(final int[][] originalMatrix) &#123;</span><br><span class="line">        if (originalMatrix != null) &#123;</span><br><span class="line">            System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">            System.out.printf(&quot;%3c%3c&quot;, &apos; &apos;, &apos;┃&apos;);</span><br><span class="line">            for (int i = 0; i &lt; originalMatrix.length; i++)</span><br><span class="line">                System.out.printf(&quot;%6c&quot;, Vocabulary.charAt(i));</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">            ;</span><br><span class="line">            for (int i = 0; i &lt; originalMatrix.length; i++) &#123;</span><br><span class="line">                int[] itemMatrix = originalMatrix[i];</span><br><span class="line">                System.out.printf(&quot;%3c%3c&quot;, Vocabulary.charAt(i), &apos;┃&apos;);</span><br><span class="line">                for (int itemValue : itemMatrix)</span><br><span class="line">                    if (itemValue == INF)</span><br><span class="line">                        System.out.printf(&quot;%6s&quot;, &quot;INF&quot;);</span><br><span class="line">                    else</span><br><span class="line">                        System.out.printf(&quot;%6d&quot;, itemValue);</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;━━━━━━━━━━━━━━━━━━━━━━━━━━━&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS_文件操作</title>
      <link href="/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h5 id="1：-拖拽需要打包的文件至工程为蓝色，勾选-Copy-items-if-needed-and-Create-folder-references"><a href="#1：-拖拽需要打包的文件至工程为蓝色，勾选-Copy-items-if-needed-and-Create-folder-references" class="headerlink" title="1： 拖拽需要打包的文件至工程为蓝色，勾选 Copy items if needed and Create folder references"></a>1： 拖拽需要打包的文件至工程为蓝色，勾选 Copy items if needed and Create folder references</h5><h5 id="2：TARGETS-gt-Build-Phases-gt-Copy-Bundle-Resources-gt-add-第一步的文件"><a href="#2：TARGETS-gt-Build-Phases-gt-Copy-Bundle-Resources-gt-add-第一步的文件" class="headerlink" title="2：TARGETS -&gt; Build Phases -&gt; Copy Bundle Resources -&gt; add 第一步的文件"></a>2：TARGETS -&gt; Build Phases -&gt; Copy Bundle Resources -&gt; add 第一步的文件</h5><h5 id="3：案例"><a href="#3：案例" class="headerlink" title="3：案例"></a>3：案例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">// 1、获取沙盒根目录let homeDir = NSHomeDirectory() as String</span><br><span class="line">let homeDir = NSHomeDirectory() as String</span><br><span class="line">print(&quot;[hybird]&quot;, &quot;homeDir&quot;, homeDir)</span><br><span class="line"></span><br><span class="line">// 2、获取 Documents 目录</span><br><span class="line">let docDirs = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true) as NSArray</span><br><span class="line">let docDir = docDirs[0] as! String</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;docDirs&quot;,docDirs)</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;docDir&quot;,docDir)</span><br><span class="line">// 3、获取 Caches 目录</span><br><span class="line">let cachesDirs = NSSearchPathForDirectoriesInDomains(.cachesDirectory, .userDomainMask, true) as NSArray</span><br><span class="line">let cachesDir = cachesDirs[0] as! String</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;cachesDirs&quot;,cachesDirs)</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;cachesDir&quot;,cachesDir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 4、获取 Library 目录</span><br><span class="line">let libDirs = NSSearchPathForDirectoriesInDomains(.libraryDirectory, .userDomainMask, true) as NSArray</span><br><span class="line">let libDir = libDirs[0] as! String</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;libDirs&quot;,libDirs)</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;libDir&quot;,libDir)</span><br><span class="line"></span><br><span class="line">// 5、获取 tmp 目录</span><br><span class="line"></span><br><span class="line">let tmpDir = NSTemporaryDirectory() as String</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;tmpDir&quot;,tmpDir)</span><br><span class="line"></span><br><span class="line">// 6、初始化 fileManager</span><br><span class="line">let fileManager = FileManager.default</span><br><span class="line"></span><br><span class="line">// 7、使用 fileManager 创建目录</span><br><span class="line">let testDir = docDir + &quot;/test&quot;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    try  fileManager.createDirectory(atPath: testDir, withIntermediateDirectories: true, attributes: nil)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;[hybird]&quot;,&quot;createDirectory failure&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 8、使用 fileManager 创建文件</span><br><span class="line">let testFile1 = testDir + &quot;/test1.txt&quot;</span><br><span class="line">let testFile2 = testDir + &quot;/test2.txt&quot;</span><br><span class="line">fileManager.createFile(atPath: testFile1, contents: nil, attributes: nil)</span><br><span class="line">fileManager.createFile(atPath: testFile2, contents: nil, attributes: nil)</span><br><span class="line"></span><br><span class="line">// 9、使用 fileManager 获取目录下的文件名</span><br><span class="line">var files = fileManager.subpaths(atPath: testDir)</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;files:&quot;,files ?? &quot;&quot;)</span><br><span class="line">// 10、使用 fileManager 删除文件</span><br><span class="line">do &#123;</span><br><span class="line">    try fileManager.removeItem(atPath: testFile1)</span><br><span class="line">&#125; catch  &#123;</span><br><span class="line">    print(&quot;[hybird]&quot;,&quot;removeItem failure&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;[hybird]&quot;,&quot;Bundle.main.resourcePath&quot;,Bundle.main.resourcePath ?? &quot;null&quot;)</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;Bundle.main.bundlePath&quot;,Bundle.main.bundlePath)</span><br><span class="line"></span><br><span class="line">files = fileManager.subpaths(atPath: Bundle.main.bundlePath)</span><br><span class="line"></span><br><span class="line">print(&quot;[hybird]&quot;,&quot;============================================&quot;)</span><br><span class="line">for file in files! &#123;</span><br><span class="line">    print(&quot;[hybird]&quot;,&quot;file:&quot;,file)</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;============================================&quot;)</span><br><span class="line"></span><br><span class="line">let bundleZipPath = Bundle.main.path(forResource: &quot;bundle&quot;, ofType: &quot;zip&quot;, inDirectory: &quot;assets&quot;) ?? &quot;&quot;</span><br><span class="line">print(&quot;[hybird]&quot;,&quot;bundleZipPath:&quot;,bundleZipPath)</span><br></pre></td></tr></table></figure><h5 id="4：输出"><a href="#4：输出" class="headerlink" title="4：输出"></a>4：输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[hybird] homeDir /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630</span><br><span class="line">[hybird] docDirs (</span><br><span class="line">    &quot;/Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630/Documents&quot;</span><br><span class="line">)</span><br><span class="line">[hybird] docDir /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630/Documents</span><br><span class="line">[hybird] cachesDirs (</span><br><span class="line">    &quot;/Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630/Library/Caches&quot;</span><br><span class="line">)</span><br><span class="line">[hybird] cachesDir /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630/Library/Caches</span><br><span class="line">[hybird] libDirs (</span><br><span class="line">    &quot;/Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630/Library&quot;</span><br><span class="line">)</span><br><span class="line">[hybird] libDir /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630/Library</span><br><span class="line">[hybird] tmpDir /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Data/Application/26A9A63E-FB26-4975-B2C9-CD71B0ECE630/tmp/</span><br><span class="line">[hybird] files: [&quot;test1.txt&quot;, &quot;test2.txt&quot;]</span><br><span class="line">[hybird] Bundle.main.resourcePath /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Bundle/Application/A4E96998-21EA-4EFB-9B13-B4FDBC16D9F0/fruit-shop-ios.app</span><br><span class="line">[hybird] Bundle.main.bundlePath /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Bundle/Application/A4E96998-21EA-4EFB-9B13-B4FDBC16D9F0/fruit-shop-ios.app</span><br><span class="line">[hybird] ============================================</span><br><span class="line">[hybird] file: _CodeSignature</span><br><span class="line">[hybird] file: _CodeSignature/CodeResources</span><br><span class="line">[hybird] file: assets</span><br><span class="line">[hybird] file: assets/bundle.zip</span><br><span class="line">[hybird] file: Assets.car</span><br><span class="line">[hybird] file: Base.lproj</span><br><span class="line">[hybird] file: Base.lproj/LaunchScreen.storyboardc</span><br><span class="line">[hybird] file: Base.lproj/LaunchScreen.storyboardc/01J-lp-oVM-view-Ze5-6b-2t3.nib</span><br><span class="line">[hybird] file: Base.lproj/LaunchScreen.storyboardc/Info.plist</span><br><span class="line">[hybird] file: Base.lproj/LaunchScreen.storyboardc/UIViewController-01J-lp-oVM.nib</span><br><span class="line">[hybird] file: Base.lproj/Main.storyboardc</span><br><span class="line">[hybird] file: Base.lproj/Main.storyboardc/BYZ-38-t0r-view-8bC-Xf-vdC.nib</span><br><span class="line">[hybird] file: Base.lproj/Main.storyboardc/Info.plist</span><br><span class="line">[hybird] file: Base.lproj/Main.storyboardc/UIViewController-BYZ-38-t0r.nib</span><br><span class="line">[hybird] file: Frameworks</span><br><span class="line">[hybird] file: Frameworks/libswiftCore.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftCoreFoundation.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftCoreGraphics.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftCoreImage.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftDarwin.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftDispatch.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftFoundation.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftMetal.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftObjectiveC.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftos.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftQuartzCore.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftSwiftOnoneSupport.dylib</span><br><span class="line">[hybird] file: Frameworks/libswiftUIKit.dylib</span><br><span class="line">[hybird] file: Frameworks/SnapKit.framework</span><br><span class="line">[hybird] file: Frameworks/SnapKit.framework/_CodeSignature</span><br><span class="line">[hybird] file: Frameworks/SnapKit.framework/_CodeSignature/CodeResources</span><br><span class="line">[hybird] file: Frameworks/SnapKit.framework/Info.plist</span><br><span class="line">[hybird] file: Frameworks/SnapKit.framework/SnapKit</span><br><span class="line">[hybird] file: fruit-shop-ios</span><br><span class="line">[hybird] file: Info.plist</span><br><span class="line">[hybird] file: libswiftRemoteMirror.dylib</span><br><span class="line">[hybird] file: PkgInfo</span><br><span class="line">[hybird] file: Podfile</span><br><span class="line">[hybird] ============================================</span><br><span class="line">[hybird] bundleZipPath: /Users/maokangren/Library/Developer/CoreSimulator/Devices/4001EB70-F821-4801-905D-49DA2DAF52C2/data/Containers/Bundle/Application/A4E96998-21EA-4EFB-9B13-B4FDBC16D9F0/fruit-shop-ios.app/assets/bundle.zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS_发布</title>
      <link href="/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_%E5%8F%91%E5%B8%83/"/>
      <url>/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h3 id="1-首先设置-apple-开发者账号"><a href="#1-首先设置-apple-开发者账号" class="headerlink" title="1: 首先设置 apple 开发者账号"></a>1: 首先设置 apple <a href="https://developer.apple.com/account/ios/identifier/bundle]" target="_blank" rel="noopener">开发者账号</a></h3><p>我把所有的(Certificates/Provisioning Profiles)全部删除了,只留下 Identifiers 菜单里面的 App IDs 里面的  该应用的 id</p><p><img src="http://upload-images.jianshu.io/upload_images/2062311-b2e1aa094039036c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-xcode-登录账号密码"><a href="#2-xcode-登录账号密码" class="headerlink" title="2: xcode 登录账号密码"></a>2: xcode 登录账号密码</h3><h3 id="3-Targets-gt-General-gt-Identity-gt-Bundle-Identifier-输入-与步骤一里面-app-id-对应的-id"><a href="#3-Targets-gt-General-gt-Identity-gt-Bundle-Identifier-输入-与步骤一里面-app-id-对应的-id" class="headerlink" title="3: Targets -&gt; General -&gt; Identity -&gt; Bundle Identifier  输入 与步骤一里面 app id 对应的 id"></a>3: Targets -&gt; General -&gt; Identity -&gt; Bundle Identifier  输入 与步骤一里面 app id 对应的 id</h3><h3 id="3-Targets-gt-General-gt-Signing-gt-Team-选择注册-该应用-Bundle-Identifier-的账号-这里很关键"><a href="#3-Targets-gt-General-gt-Signing-gt-Team-选择注册-该应用-Bundle-Identifier-的账号-这里很关键" class="headerlink" title="3: Targets -&gt; General -&gt; Signing -&gt; Team 选择注册 该应用 Bundle Identifier 的账号 (这里很关键)"></a>3: Targets -&gt; General -&gt; Signing -&gt; Team 选择注册 该应用 Bundle Identifier 的账号 (这里很关键)</h3><ul><li>一般个人账号没有注册 Bundle Identifier (Personal Team 都是为了自己免费在自己的真机上测试使用的)</li><li>如果选择了注册 该应用 的 Bundle Identifier 的账号,则 步骤二必须 填写相同的 Bundle Identifier,生成的包应该即可以发布到appstore,也可以发给注册了 iphone-uuid 的用户安装测试</li><li>如果选择了个人账号(Personal Team ),则必须填写与 appstore中完全不重复的 Bundle Identifier(随便写一个)才能编译通过,而且生成的包不能发布到 app store, 但是应该依然可以发给注册了 iphone-uuid 的用户安装使用<h3 id="4-Targets-gt-Build-Settings-gt-Code-Signing-Identity-gt-选择步骤3里面的-Signing-Certificate-相同账号的账号"><a href="#4-Targets-gt-Build-Settings-gt-Code-Signing-Identity-gt-选择步骤3里面的-Signing-Certificate-相同账号的账号" class="headerlink" title="4: Targets -&gt; Build Settings -&gt; Code Signing Identity -&gt; 选择步骤3里面的 Signing Certificate 相同账号的账号"></a>4: Targets -&gt; Build Settings -&gt; Code Signing Identity -&gt; 选择步骤3里面的 Signing Certificate 相同账号的账号</h3><h3 id="5-Xcode-gt-Product-gt-Archive-进行打包"><a href="#5-Xcode-gt-Product-gt-Archive-进行打包" class="headerlink" title="5: Xcode -&gt; Product -&gt; Archive 进行打包"></a>5: Xcode -&gt; Product -&gt; Archive 进行打包</h3></li><li>如果个人/公司账号想要发布到 蒲公英等,打包成功后选择 AD HOC<br><img src="http://upload-images.jianshu.io/upload_images/2062311-d539bd819e46c5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="发布 ad hoc.png"></li><li>如果想发布到 app store 则直接点击 upload to appstore<br><img src="http://upload-images.jianshu.io/upload_images/2062311-b4bd45902c958451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="发布.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法_00004_快速排序</title>
      <link href="/2018/11/19/%E7%AE%97%E6%B3%95_00004_%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/11/19/%E7%AE%97%E6%B3%95_00004_%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class QuickSort &#123;</span><br><span class="line"></span><br><span class="line">    private static void quickSort(final int array[], final int originLeft, final int originRight) &#123;</span><br><span class="line"></span><br><span class="line">        if (originLeft &lt; originRight) &#123;</span><br><span class="line"></span><br><span class="line">            int baseValue = array[originLeft];</span><br><span class="line">            int tmpLeft = originLeft;</span><br><span class="line">            int tmpRight = originRight;</span><br><span class="line"></span><br><span class="line">            while (tmpLeft != tmpRight) &#123;</span><br><span class="line"></span><br><span class="line">                while (tmpLeft &lt; tmpRight &amp;&amp; array[tmpRight] &gt;= baseValue) tmpRight--;</span><br><span class="line">                array[tmpLeft] = array[tmpRight];</span><br><span class="line"></span><br><span class="line">                while (tmpLeft &lt; tmpRight &amp;&amp; array[tmpLeft] &lt;= baseValue) tmpLeft++;</span><br><span class="line">                array[tmpRight] = array[tmpLeft];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            array[tmpRight] = baseValue;</span><br><span class="line">            quickSort(array, originLeft, tmpLeft - 1);</span><br><span class="line">            quickSort(array, tmpRight + 1, originRight);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        int array[] = &#123;10, 5, 4, 1, 5, 2, 7, 3, 0, 4, 9, 6, 8&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;排序之前：&quot;);</span><br><span class="line">        for (int element : array) System.out.print(element + &quot; &quot;);</span><br><span class="line"></span><br><span class="line">        quickSort(array, 0, array.length - 1);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n排序之后：&quot;);</span><br><span class="line">        for (int element : array) System.out.print(element + &quot; &quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/MOBIN/p/4681369.html" target="_blank" rel="noopener">https://www.cnblogs.com/MOBIN/p/4681369.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>服务端_SPRING_BOOT_KOTLIN_MYBATIS_COMMON_SQL_PROVIDER</title>
      <link href="/2018/11/19/%E6%9C%8D%E5%8A%A1%E7%AB%AF_SPRING_BOOT_KOTLIN_MYBATIS_COMMON_SQL_PROVIDER/"/>
      <url>/2018/11/19/%E6%9C%8D%E5%8A%A1%E7%AB%AF_SPRING_BOOT_KOTLIN_MYBATIS_COMMON_SQL_PROVIDER/</url>
      
        <content type="html"><![CDATA[<h3 id="公共接口"><a href="#公共接口" class="headerlink" title="公共接口"></a>公共接口</h3><p>发现书写 mapper对数据库进行增删改查 以及 controller 都是重复性操作，才有了本编文章，主要是利用反射自动生成 SQL 增删改查语句</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.ibatis.annotations.DeleteProvider</span><br><span class="line">import org.apache.ibatis.annotations.InsertProvider</span><br><span class="line">import org.apache.ibatis.annotations.Options</span><br><span class="line">import org.apache.ibatis.annotations.UpdateProvider</span><br><span class="line"></span><br><span class="line">interface HKBaseMapper&lt;T&gt; &#123;</span><br><span class="line">    @Options(useGeneratedKeys = true)</span><br><span class="line">    @InsertProvider(type = HKSqlProvider::class, method = &quot;insert&quot;)</span><br><span class="line">    fun insert(tableModel: T): Int</span><br><span class="line"></span><br><span class="line">    @DeleteProvider(type = HKSqlProvider::class, method = &quot;delete&quot;)</span><br><span class="line">    fun delete(tableModel: T): Int</span><br><span class="line"></span><br><span class="line">    @UpdateProvider(type = HKSqlProvider::class, method = &quot;update&quot;)</span><br><span class="line">    fun update(tableModel: T): Int</span><br><span class="line"></span><br><span class="line">    @SelecProvider(type = HKSqlProvider::class, method = &quot;select&quot;)</span><br><span class="line">    fun select(tableModel: T): MutableList&lt;T&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.ibatis.annotations.Mapper</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">interface AdMapper : HKBaseMapper&lt;AdModel&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.logging.log4j.LogManager</span><br><span class="line">import org.apache.logging.log4j.Logger</span><br><span class="line"></span><br><span class="line">@Suppress(&quot;unused&quot;)</span><br><span class="line">class HKSqlProvider &#123;</span><br><span class="line">    private val logger: Logger = LogManager.getLogger(UserController::class.java.name)</span><br><span class="line"></span><br><span class="line">    fun insert(tableModel: Any?): String &#123;</span><br><span class="line">        val tableName = tableModel?.javaClass?.simpleName?.replace(&quot;Model&quot;, &quot;&quot;)?.toLowerUnderScoreFromUpperCamel()</span><br><span class="line">        val modelFields = HKReflectUtil.getFields(tableModel?.javaClass)</span><br><span class="line">        val valueNameList = ArrayList&lt;String&gt;()</span><br><span class="line">        val sqlString = StringBuilder(&quot;insert into $tableName (&quot;)</span><br><span class="line">        modelFields.forEach &#123; field -&gt; HKReflectUtil.getValue(field, tableModel)?.let &#123; valueNameList.add(field.name) &#125; &#125;</span><br><span class="line">        valueNameList.forEachIndexed &#123; index, valueName -&gt; sqlString.append(valueName).append(if (index != valueNameList.size - 1) &quot;,&quot; else &quot;) values(&quot;) &#125;</span><br><span class="line">        valueNameList.forEachIndexed &#123; index, valueName -&gt; sqlString.append(&quot;#&#123;$valueName&#125;&quot;).append(if (index != valueNameList.size - 1) &quot;,&quot; else &quot;)&quot;) &#125;</span><br><span class="line"></span><br><span class="line">        logger.warn(&quot;&quot;&quot;</span><br><span class="line">            ---------------------------------</span><br><span class="line">            mybatis-buildSql-insert --&gt;</span><br><span class="line">            tableModel: $tableModel</span><br><span class="line">                   sql: $sqlString</span><br><span class="line">            ---------------------------------</span><br><span class="line">        &quot;&quot;&quot;)</span><br><span class="line">        return sqlString.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun update(tableModel: Any?): String &#123;</span><br><span class="line">        val tableName = tableModel?.javaClass?.simpleName?.replace(&quot;Model&quot;, &quot;&quot;)?.toLowerUnderScoreFromUpperCamel()</span><br><span class="line">        val modelFields = HKReflectUtil.getFields(tableModel?.javaClass)</span><br><span class="line">        val valueNameList = ArrayList&lt;String&gt;()</span><br><span class="line">        val sqlString = StringBuilder(&quot;update $tableName set &quot;)</span><br><span class="line">        modelFields.forEach &#123; field -&gt; HKReflectUtil.getValue(field, tableModel)?.let &#123; valueNameList.add(field.name) &#125; &#125;</span><br><span class="line">        valueNameList.forEachIndexed &#123; index, valueName -&gt; sqlString.append(&quot;$valueName=#&#123;$valueName&#125;&quot;).append(if (index != valueNameList.size - 1) &quot;,&quot; else &quot;&quot;) &#125;</span><br><span class="line"></span><br><span class="line">        logger.warn(&quot;&quot;&quot;</span><br><span class="line">            ---------------------------------</span><br><span class="line">            mybatis-buildSql-update --&gt;</span><br><span class="line">            tableModel: $tableModel</span><br><span class="line">                   sql: $sqlString</span><br><span class="line">            ---------------------------------</span><br><span class="line">        &quot;&quot;&quot;)</span><br><span class="line">        return sqlString.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun delete(tableModel: Any?): String &#123;</span><br><span class="line">        val tableName = tableModel?.javaClass?.simpleName?.replace(&quot;Model&quot;, &quot;&quot;)?.toLowerUnderScoreFromUpperCamel()</span><br><span class="line">        val modelFields = HKReflectUtil.getFields(tableModel?.javaClass)</span><br><span class="line">        val valueNameList = ArrayList&lt;String&gt;()</span><br><span class="line">        val sqlString = StringBuilder(&quot;delete from $tableName where &quot;)</span><br><span class="line">        modelFields.forEach &#123; field -&gt; HKReflectUtil.getValue(field, tableModel)?.let &#123; valueNameList.add(field.name) &#125; &#125;</span><br><span class="line">        valueNameList.forEachIndexed &#123; index, valueName -&gt; sqlString.append(&quot;$valueName=#&#123;$valueName&#125;&quot;).append(if (index != valueNameList.size - 1) &quot; and &quot; else &quot;&quot;) &#125;</span><br><span class="line"></span><br><span class="line">        logger.warn(&quot;&quot;&quot;</span><br><span class="line">            ---------------------------------</span><br><span class="line">            mybatis-buildSql-delete --&gt;</span><br><span class="line">            tableModel: $tableModel</span><br><span class="line">                   sql: $sqlString</span><br><span class="line">            ---------------------------------</span><br><span class="line">        &quot;&quot;&quot;)</span><br><span class="line">        return sqlString.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun select(tableModel: Any?): String &#123;</span><br><span class="line">        val tableName = tableModel?.javaClass?.simpleName?.replace(&quot;Model&quot;, &quot;&quot;)?.toLowerUnderScoreFromUpperCamel()</span><br><span class="line">        val modelFields = HKReflectUtil.getFields(tableModel?.javaClass)</span><br><span class="line">        val valueNameList = ArrayList&lt;String&gt;()</span><br><span class="line">        val sqlString = StringBuilder(&quot;select * from $tableName where &quot;)</span><br><span class="line">        modelFields.forEach &#123; field -&gt; HKReflectUtil.getValue(field, tableModel)?.let &#123; valueNameList.add(field.name) &#125; &#125;</span><br><span class="line">        valueNameList.forEachIndexed &#123; index, valueName -&gt; sqlString.append(&quot;$valueName=#&#123;$valueName&#125;&quot;).append(if (index != valueNameList.size - 1) &quot; and &quot; else &quot;&quot;) &#125;</span><br><span class="line"></span><br><span class="line">        logger.warn(&quot;&quot;&quot;</span><br><span class="line">            ---------------------------------</span><br><span class="line">            mybatis-buildSql-select --&gt;</span><br><span class="line">            tableModel: $tableModel</span><br><span class="line">                   sql: $sqlString</span><br><span class="line">            ---------------------------------</span><br><span class="line">        &quot;&quot;&quot;)</span><br><span class="line">        return sqlString.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import io.swagger.annotations.ApiOperation</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping</span><br><span class="line">import org.springframework.web.bind.annotation.RestController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/ad&quot;)</span><br><span class="line">class AdController(val mapper: AdMapper) &#123;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;增加&quot;, notes = &quot;返回 ID&quot;)</span><br><span class="line">    @PostMapping(&quot;/insert&quot;)</span><br><span class="line">    fun insert(@RequestBody request: HKRequest&lt;AdModel&gt;): HKResponse&lt;HKIdData&gt; &#123;</span><br><span class="line">        if (request.data == null) return HKCode.ERROR_PARAMS.response()</span><br><span class="line">        return HKResponse(HKIdData(mapper.insert(request.data!!)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;删除&quot;, notes = &quot;返回 受影响的行数&quot;)</span><br><span class="line">    @PostMapping(&quot;/delete&quot;)</span><br><span class="line">    fun delete(@RequestBody request: HKRequest&lt;AdModel&gt;): HKResponse&lt;HKColumnData&gt; &#123;</span><br><span class="line">        if (request.data == null) return HKCode.ERROR_PARAMS.response(HKColumnData(-1))</span><br><span class="line">        return HKResponse(HKColumnData(mapper.delete(request.data!!)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;修改&quot;, notes = &quot;返回 受影响的行数&quot;)</span><br><span class="line">    @PostMapping(&quot;/update&quot;)</span><br><span class="line">    fun update(@RequestBody request: HKRequest&lt;AdModel&gt;): HKResponse&lt;HKColumnData&gt; &#123;</span><br><span class="line">        if (request.data == null) return HKCode.ERROR_PARAMS.response()</span><br><span class="line">        return HKResponse(HKColumnData(mapper.update(request.data!!)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;查询&quot;)</span><br><span class="line">    @PostMapping(&quot;/select&quot;)</span><br><span class="line">    fun select(@RequestBody request: HKRequest&lt;AdModel&gt;): HKResponse&lt;List&lt;AdModel&gt;&gt; &#123;</span><br><span class="line">        if (request.data == null || request.data == null) return HKCode.ERROR_PARAMS.response()</span><br><span class="line">        return HKResponse(mapper.select(request.data!!))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射工具类"><a href="#反射工具类" class="headerlink" title="反射工具类"></a>反射工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Field</span><br><span class="line">import java.lang.reflect.InvocationTargetException</span><br><span class="line">import kotlin.reflect.KClass</span><br><span class="line">import kotlin.reflect.full.companionObject</span><br><span class="line">import kotlin.reflect.full.companionObjectInstance</span><br><span class="line">import kotlin.reflect.full.declaredFunctions</span><br><span class="line"></span><br><span class="line">@Suppress(&quot;unused&quot;)</span><br><span class="line">object HKReflectUtil &#123;</span><br><span class="line">    private val TAG = &quot;[reflect]&quot;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据方法的名字调用方法，适合 object 定义的单例静态方法</span><br><span class="line">     */</span><br><span class="line">    @Throws(RuntimeException::class, IllegalAccessException::class, IllegalArgumentException::class, InvocationTargetException::class, NullPointerException::class, ExceptionInInitializerError::class)</span><br><span class="line">    fun invoke(clazz: KClass&lt;*&gt;?, methodName: String?, vararg params: Any?): Any? &#123;</span><br><span class="line">        if (clazz == null || methodName.isNullOrBlank()) throw RuntimeException(&quot;$&#123;TAG&#125; clazz:$clazz or methodName:$methodName is null&quot;)</span><br><span class="line">        val methods = clazz.java.kotlin.companionObject?.declaredFunctions?.filter &#123; it.name == methodName &amp;&amp; it.parameters.size - 1 == params.size &#125;</span><br><span class="line">        if (methods?.size ?: 0 &lt;= 0) throw RuntimeException(&quot;[callNativeMethod] the invoked method dose not exist :$methodName&quot;)</span><br><span class="line">        return methods!![0].call(clazz.companionObjectInstance, *params)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun getFields(objectClass: Class&lt;*&gt;?): MutableList&lt;Field&gt; &#123;</span><br><span class="line">        var fieldList: MutableList&lt;Field&gt;? = null</span><br><span class="line">        try &#123;</span><br><span class="line">            fieldList = objectClass?.declaredFields?.toMutableList()</span><br><span class="line">            objectClass?.superclass?.declaredFields.let &#123; if (it != null) fieldList?.addAll(it) &#125;</span><br><span class="line">        &#125; catch (ignore: Exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return fieldList ?: arrayListOf()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun getValue(field: Field?, fromObject: Any?): Any? = try &#123;</span><br><span class="line">        field?.isAccessible = true</span><br><span class="line">        field?.get(fromObject)</span><br><span class="line">    &#125; catch (ignore: Exception) &#123;</span><br><span class="line">        null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p><img src="http://upload-images.jianshu.io/upload_images/2062311-b06f057d9274c144.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="swagger2"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
            <tag> SPRING-BOOT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端_IOS_SWIFT_4_0_ALAMOFILE_同步执行</title>
      <link href="/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_SWIFT_4_0_ALAMOFILE_%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C/"/>
      <url>/2018/11/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF_IOS_SWIFT_4_0_ALAMOFILE_%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">static func downloadByFullURLSync&lt;T: Codable&gt;(url: String, timeoutInterval: Double = 60) -&gt; T? &#123;</span><br><span class="line">    CXLogUtil.e(&quot;download 0 sync \(Thread.currentThread())&quot;)</span><br><span class="line">    let semaphore = DispatchSemaphore.init(value: 0)</span><br><span class="line"></span><br><span class="line">    var responseModel: T?</span><br><span class="line"></span><br><span class="line">    let start = Date()</span><br><span class="line">    Alamofire.download(URLRequest(url: NSURL.init(string: url)! as URL, timeoutInterval: timeoutInterval))</span><br><span class="line">        .responseJSON(queue: DispatchQueue.global(qos: DispatchQoS.QoSClass.background), options: .allowFragments, completionHandler:  &#123; dataResponse in</span><br><span class="line">                CXLogUtil.e(&quot;download 2 sync \(Thread.currentThread())&quot;)</span><br><span class="line"></span><br><span class="line">                print(&quot;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;)</span><br><span class="line">                print(&quot;request url: &quot;, dataResponse.request?.url ?? &quot;&quot;)</span><br><span class="line">                print(&quot;\nrequest headers:\n&quot;)</span><br><span class="line">                dataResponse.request?.allHTTPHeaderFields?.forEach &#123; key, value in</span><br><span class="line">                    print(&quot;\t&quot;, key, value)</span><br><span class="line">                &#125;</span><br><span class="line">                print(&quot;\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;----------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&quot;)</span><br><span class="line">                print(&quot;response headers:\n&quot;)</span><br><span class="line">                dataResponse.response?.allHeaderFields.forEach &#123; key, value in</span><br><span class="line">                    print(&quot;\t&quot;, key, value)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                print(&quot;\nresponse body:\n\n\t\(dataResponse.result.value ?? &quot;&quot;)\n&quot;)</span><br><span class="line"></span><br><span class="line">                let ms = round(Date().timeIntervalSince(start) * 1000)</span><br><span class="line">                print(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 耗时: \(ms) ms \n\n&quot;)</span><br><span class="line">                if (dataResponse.result.isSuccess &amp;&amp; dataResponse.result.value != nil) &#123;</span><br><span class="line">                    responseModel = CXJsonUtil.parse(T.self, withJSONObject: dataResponse.result.value ?? &quot;&quot;)</span><br><span class="line">                    print(&quot;\nresponse success:\n&quot;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    responseModel = nil</span><br><span class="line">                    let failureMessage = dataResponse.result.error?.localizedDescription.lowercased() ?? &quot;网络错误&quot;</span><br><span class="line">                    print(&quot;\nresponse failure:\n\n\t\(failureMessage)\n&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                semaphore.signal()</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    _ = semaphore.wait(timeout: DispatchTime.distantFuture)</span><br><span class="line">    CXLogUtil.e(&quot;download 1 sync \(Thread.currentThread())&quot;)</span><br><span class="line">    return responseModel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_系统新装</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_%E7%B3%BB%E7%BB%9F%E6%96%B0%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="1-升级"><a href="#1-升级" class="headerlink" title="1 升级"></a>1 升级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum upgrade -y</span><br></pre></td></tr></table></figure><h5 id="关于-upgrade-与-update-参考大神见解"><a href="#关于-upgrade-与-update-参考大神见解" class="headerlink" title="关于 upgrade 与 update 参考大神见解"></a><a href="https://segmentfault.com/q/1010000011264410" target="_blank" rel="noopener">关于 upgrade 与 update 参考大神见解</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">其实我更推荐用yum upgrade取代yum update，yum update只更新系统中已有的软件包，不会更新内核软件包(kernel-这个包)，yum upgrade是更彻底的update，会分析包的废弃关系，可以跨小版本升级（比如从centos 7.1升级到centos 7.4），除了做了yum update完全相同的事之外，还会更新kernel-的包，也会卸载掉已经废弃的包。</span><br><span class="line"></span><br><span class="line">新部署系统需要yum update/upgrade是因为yum不会给你解决依赖冲突(但是apt会)。</span><br><span class="line"></span><br><span class="line">举个例子，你的系统中已经安装了kernel-2.6.32.500，但是你要安装的某个软件包依赖于kernel-2.6.32.600，此时yum会报错退出，告诉你依赖不满足，并不会升级kernel包(只是举个例子而已，实际上几乎没有软件包直接依赖于kernel包)，所以你只能yum update/upgrade一次，把系统中所有的软件包全部更新，这样满足新部署的软件包的依赖。</span><br><span class="line"></span><br><span class="line">在debian/ubuntu的系统中，apt会对这种情况自动处理，会自动升级依赖的软件包。</span><br><span class="line"></span><br><span class="line">换句话来说，对于新部署的服务器，也是推荐upgrade全部的软件包，已获得最新的安全补丁。即使对于已经上线的服务器，也是推荐定期打安全漏洞补丁，减少漏洞带来的侵害。</span><br></pre></td></tr></table></figure><h3 id="2-不能-ping通-解析-域名-但是能-ping通-ip-参考链接"><a href="#2-不能-ping通-解析-域名-但是能-ping通-ip-参考链接" class="headerlink" title="2 不能 ping通* (解析)域名,但是能 ping通 ip 参考链接"></a>2 不能 <strong>ping通*</strong> (解析)域名,但是能 <strong>ping通</strong> ip <a href="https://newbug.top/centos%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D/" target="_blank" rel="noopener">参考链接</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line"># 在文件的最后加上dns的设置比如：DNS1=8.8.8.8</span><br><span class="line"># 114.114.114.114和8.8.8.8，这两个DNS都可以，不用担心因ISP运营商导致的DNS劫持等问题，而且都是免费提供给用户使用的。</span><br><span class="line"># 114.114.114.114是国内移动、电信和联通通用的DNS，如果你的服务器位于海外，建议使用谷歌的DNS</span><br><span class="line"># 8.8.8.8是谷歌提供的DNS，该地址是全球通用的，如果你的服务器位于大陆，请不要使用。</span><br><span class="line"></span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line"></span><br><span class="line"># 重启网卡</span><br><span class="line">sudo service network restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_TOMCAT</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_TOMCAT/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_TOMCAT/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载-tomcat"><a href="#1-下载-tomcat" class="headerlink" title="1 下载 tomcat"></a>1 下载 <a href="https://tomcat.apache.org" target="_blank" rel="noopener">tomcat</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/packages</span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.29/bin/apache-tomcat-8.5.29.tar.gz</span><br><span class="line">tar -xzvf /opt/software/packages/apache-tomcat-8.5.29.tar.gz -C /opt/software/</span><br></pre></td></tr></table></figure><h1 id="2-启动-tomcat"><a href="#2-启动-tomcat" class="headerlink" title="2 启动 tomcat"></a>2 启动 tomcat</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/software/apache-tomcat-8.5.29/bin/startup.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Using CATALINA_BASE:   /opt/software/apache-tomcat-8.5.29</span><br><span class="line">Using CATALINA_HOME:   /opt/software/apache-tomcat-8.5.29</span><br><span class="line">Using CATALINA_TMPDIR: /opt/software/apache-tomcat-8.5.29/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using CLASSPATH:       /opt/software/apache-tomcat-8.5.29/bin/bootstrap.jar:/opt/software/apache-tomcat-8.5.29/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><h1 id="3-访问-tomcat"><a href="#3-访问-tomcat" class="headerlink" title="3 访问 tomcat"></a>3 访问 tomcat</h1><p>在浏览器中输入地址 <a href="http://10.10.10.10:8080" target="_blank" rel="noopener">http://10.10.10.10:8080</a> 注意tomcat默认监听8080端口<br><img src="https://upload-images.jianshu.io/upload_images/2062311-09ee7dd56abb46e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="4-配置端口tomcat默认端口8080-为服务器默认的-80-端口"><a href="#4-配置端口tomcat默认端口8080-为服务器默认的-80-端口" class="headerlink" title="4 配置端口tomcat默认端口8080 为服务器默认的 80 端口"></a>4 配置端口tomcat默认端口8080 为服务器默认的 80 端口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1024以下的端口只能由root用户使用，普通权限的tomcat服使用80端口启动时会报没有权限</span><br><span class="line"># 以下方法为重定向 80 端口 到 8080, 避免了权限问题</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080  </span><br><span class="line">iptables -t nat -A PREROUTING -p udp -m udp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 或者</span><br><span class="line">vi /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">-A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">-A PREROUTING -p udp -m udp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line"></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在浏览器中访问 http://10.10.10.10:80</span><br></pre></td></tr></table></figure><h1 id="5-开机自启"><a href="#5-开机自启" class="headerlink" title="5 开机自启"></a>5 开机自启</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"># 在最下面添加</span><br><span class="line">/opt/software/apache-tomcat-8.5.29/bin/startup.sh</span><br></pre></td></tr></table></figure><h1 id="6-常用的防火墙配置"><a href="#6-常用的防火墙配置" class="headerlink" title="6 常用的防火墙配置"></a>6 常用的防火墙配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#iptables-save v1.4.7 on Wed Mar 21 13:50:00 2018</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8000 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 7777 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8888 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 21&quot; -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 20 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 20&quot; -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 10060:10090 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 21 -m conntrack --ctstate NEW,ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 21&quot; -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m tcp --dport 20 -m conntrack --ctstate ESTABLISHED -m comment --comment &quot;Allow ftp connections on port 20&quot; -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m state --state NEW -m tcp --sport 10060:10090 -j ACCEPT</span><br><span class="line">-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Wed Mar 21 13:50:00 2018</span><br><span class="line"></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [0:0]</span><br><span class="line">:POSTROUTING ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">-A PREROUTING -p udp -m udp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><h1 id="7-tomcat-webapps-目录启用软连接文件夹"><a href="#7-tomcat-webapps-目录启用软连接文件夹" class="headerlink" title="7 tomcat webapps 目录启用软连接文件夹"></a>7 tomcat webapps 目录启用软连接文件夹</h1><ul><li>修改 conf/context.xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Default set of monitored resources. If one of these changes, the    --&gt;</span><br><span class="line">    &lt;!-- web application will be reloaded.                                   --&gt;</span><br><span class="line">    &lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt;</span><br><span class="line">    &lt;WatchedResource&gt;$&#123;catalina.base&#125;/conf/web.xml&lt;/WatchedResource&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Manager pathname=&quot;&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Resources allowLinking=&quot;true&quot;/&gt; # 加上这句话即可, 注:java 对文件夹软链接的访问使用 &apos;dir.canonicalFile&apos;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="8-tomcat-指定默认的启动工程"><a href="#8-tomcat-指定默认的启动工程" class="headerlink" title="8 tomcat 指定默认的启动工程"></a>8 tomcat 指定默认的启动工程</h1><ul><li>修改 /conf/server.xml</li></ul><ol><li>当appBase采用相对路径时，其父路径是tomcat的安装目录。即：/opt/software/apache-tomcat-8.5.29<br>如：appBase = “/webapps” 或 appBase = “webapps” 相当于 appBase = “/opt/software/apache-tomcat-8.5.29/webapps/”</li><li>当appBase使用绝对路径时，显然不需要注意什么，这也是推荐的写法。</li><li>当docBase采用相对路径时，其父路径是appBase的路径。即：/opt/software/apache-tomcat-8.5.29<br>如：docBase = “/template”或docBase = “template”相当于 docBase = “/opt/software/apache-tomcat-8.5.29/template”</li><li>特别的，路径显然只能指向某一文件夹，而不能具体的指向某个文件或是图片资源什么的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">      unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">  # 加上这句话即可</span><br><span class="line">  &lt;Context path=&quot;&quot; reloadable=&quot;true&quot; debug=&quot;5&quot; docBase=&quot;template&quot; /&gt; </span><br><span class="line"></span><br><span class="line">  &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">       Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Access log processes all example.</span><br><span class="line">       Documentation at: /docs/config/valve.html</span><br><span class="line">       Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">         prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class="line">         pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure></li></ol><p>#9 由 tomcat 导致的中文乱码问题</p><ul><li><p>首先确保 html 文件本身是 UTF-8 编码, 并且在 html 代码中设置编码格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试本地正常, 但是经过tomcat 中转后出现中文乱码, 尤其是纯英文的操作系统, 部分电脑正常部分电脑乱码, 有的电脑谷歌浏览器乱码但是火狐浏览器正常, 针对谷歌浏览器有一个临时解决方案,将 <strong>设置-&gt;高级-&gt;语言-&gt;中文（简体)</strong> 排序到最顶部 可以临时解决乱码</p></li><li><p>修改 /conf/server.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">           connectionTimeout=&quot;20000&quot;</span><br><span class="line">           redirectPort=&quot;8443&quot;</span><br><span class="line">           URIEncoding=&quot;UTF-8&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果上述修改不起作用, 则需要在 spring boot 项目中增加静态资源过滤器,强制设置静态资源编码为 UTF-8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.smart.template.base.config.filter</span><br><span class="line"></span><br><span class="line">import org.slf4j.LoggerFactory</span><br><span class="line">import org.springframework.core.annotation.Order</span><br><span class="line">import org.springframework.web.servlet.resource.ResourceUrlEncodingFilter</span><br><span class="line">import springfox.documentation.annotations.ApiIgnore</span><br><span class="line">import javax.servlet.FilterChain</span><br><span class="line">import javax.servlet.ServletRequest</span><br><span class="line">import javax.servlet.ServletResponse</span><br><span class="line">import javax.servlet.annotation.WebFilter</span><br><span class="line">import javax.servlet.http.HttpServletRequest</span><br><span class="line"></span><br><span class="line">@ApiIgnore</span><br><span class="line">@Order(1)</span><br><span class="line">@WebFilter(filterName = &quot;static-filter&quot;, urlPatterns = arrayOf(&quot;/*&quot;)) //拦截器拦截的是域名+端口相同的路径</span><br><span class="line">class CXResourceUrlFilter : ResourceUrlEncodingFilter() &#123;</span><br><span class="line"></span><br><span class="line">    private val log = LoggerFactory.getLogger(this.javaClass)</span><br><span class="line"></span><br><span class="line">    override fun doFilter(request: ServletRequest?, response: ServletResponse?, filterChain: FilterChain?) &#123;</span><br><span class="line">        val httpRequest = request as HttpServletRequest</span><br><span class="line">        log.error(&quot;----------&gt;doFilter start($&#123;response?.contentType&#125;) &quot; + httpRequest.requestURI)</span><br><span class="line">        response?.contentType = &quot;UTF-8&quot;</span><br><span class="line"></span><br><span class="line">        super.doFilter(request, response, filterChain)</span><br><span class="line">        log.error(&quot;----------&gt;doFilter end($&#123;response?.contentType&#125;) &quot; + httpRequest.requestURI)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>虽然设置过滤器解决了乱码问题, 比如通过访问 <a href="http://10.47.12.111/index.html" target="_blank" rel="noopener">http://10.47.12.111/index.html</a> 已经显示正常, 但是如果是项目的默认首页, 比如通过访问  <a href="http://10.47.12.111" target="_blank" rel="noopener">http://10.47.12.111</a> 就可以看到<br>index.html  所展示的页面<em>(只要将 index.html 放到 src/main/resources/public/ 目录下即可实现在 url 中不加 <strong>/index.html</strong> 也可访问到页面)</em>, 由于 url  <a href="http://10.47.12.111" target="_blank" rel="noopener">http://10.47.12.111</a>  中没有path 所以无法被上一步骤的拦截器所拦截, 此时还有一个冷门却有效的做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;mime-mapping&gt; </span><br><span class="line">       &lt;extension&gt;html&lt;/extension&gt; </span><br><span class="line">       &lt;mime-type&gt;text/html;charset=utf-8&lt;/mime-type&gt; </span><br><span class="line">&lt;/mime-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_用户组管理</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># 新增用户组</span><br><span class="line">groupadd dev</span><br><span class="line"></span><br><span class="line"># 新增用户并添加到用户组</span><br><span class="line">useradd -g dev user_name</span><br><span class="line"></span><br><span class="line"># 为新增的用户修改密码</span><br><span class="line">echo &quot;123456&quot; | passwd --stdin user_name</span><br><span class="line"></span><br><span class="line">Changing password for user user_name.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line"># 查看用户所属的组</span><br><span class="line">groups user_name</span><br><span class="line"></span><br><span class="line"># 查看用户信息</span><br><span class="line">id user_name</span><br><span class="line"></span><br><span class="line"># 从组中删除用户</span><br><span class="line">gpasswd dev -d user_name</span><br><span class="line"></span><br><span class="line">Removing user user_name from group dev</span><br><span class="line">gpasswd: user &apos;user_name&apos; is not a member of &apos;dev&apos;</span><br><span class="line"></span><br><span class="line"># 添加已有用户到组</span><br><span class="line">gpasswd dev -a user_name</span><br><span class="line"></span><br><span class="line">Adding user user_name to group dev</span><br><span class="line"></span><br><span class="line"># 永久删除用户</span><br><span class="line">userdel user_name</span><br><span class="line">gpasswd dev -d user_name</span><br><span class="line"># 同时删除该用户所有数据</span><br><span class="line">rm -rf /home/user_name</span><br><span class="line"></span><br><span class="line"># 给用户添加 sudo 权限(为了方便大佬)</span><br><span class="line">vi /etc/sudoers</span><br><span class="line"># 找到 root    ALL=(ALL)       ALL 这一行,在下面添加  user_name    ALL=(ALL)       ALL </span><br><span class="line"></span><br><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">user_name    ALL=(ALL)       ALL</span><br><span class="line">user_name_1    ALL=(ALL)       ALL</span><br><span class="line">user_name_2    ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line">wq! 保存即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_ROCKET_MQ</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_ROCKET_MQ/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_ROCKET_MQ/</url>
      
        <content type="html"><![CDATA[<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul><li><a href="http://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://blog.csdn.net/u013680938/article/details/53447996" target="_blank" rel="noopener">参考文档</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 64bit OS, Linux/Unix/Mac is recommended</span><br><span class="line"># install 64bit JDK 1.8+</span><br><span class="line"># install Maven 3.2.x</span><br><span class="line"></span><br><span class="line">yum install git</span><br><span class="line"></span><br><span class="line">cd /opt/software</span><br><span class="line">git clone -b release-4.2.0 https://github.com/apache/rocketmq.git</span><br><span class="line">cd rocketmq</span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br></pre></td></tr></table></figure><ul><li>环境变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ROCKETMQ_HOME</span><br><span class="line">ROCKETMQ_HOME=/opt/software/rocketmq/distribution/target/apache-rocketmq</span><br><span class="line"></span><br><span class="line"># MAVEN_HOME</span><br><span class="line">MAVEN_HOME=/opt/software/apache-maven-3.5.3</span><br><span class="line"></span><br><span class="line"># JAVA_HOME START</span><br><span class="line">JAVA_HOME=/opt/software/sdks/jdk/jdk1.8.0_162</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$MAVEN_HOME/bin:$ROCKETMQ_HOME:$ROCKETMQ_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"># JAVA_HOME END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="Start-Name-Server"><a href="#Start-Name-Server" class="headerlink" title="Start Name Server"></a>Start Name Server</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd /opt/software/rocketmq/distribution/target/apache-rocketmq</span><br><span class="line">&gt; nohup sh bin/mqnamesrv &amp;</span><br><span class="line">&gt; tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">The Name Server boot success...</span><br></pre></td></tr></table></figure><h1 id="Start-Broker"><a href="#Start-Broker" class="headerlink" title="Start Broker"></a>Start Broker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd /opt/software/rocketmq/distribution/target/apache-rocketmq</span><br><span class="line">&gt; nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line">&gt; tail -f ~/logs/rocketmqlogs/broker.log </span><br><span class="line">The broker[%s, 172.30.30.233:10911] boot success...</span><br></pre></td></tr></table></figure><h1 id="Shutdown-Servers"><a href="#Shutdown-Servers" class="headerlink" title="Shutdown Servers"></a>Shutdown Servers</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd /opt/software/rocketmq/distribution/target/apache-rocketmq</span><br><span class="line">&gt; sh bin/mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line">&gt; sh bin/mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure><h1 id="Send-amp-Receive-Messages"><a href="#Send-amp-Receive-Messages" class="headerlink" title="Send &amp; Receive Messages"></a>Send &amp; Receive Messages</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd /opt/software/rocketmq/distribution/target/apache-rocketmq</span><br><span class="line">&gt; export NAMESRV_ADDR=localhost:9876</span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId= ...</span><br><span class="line"></span><br><span class="line">&gt; cd /opt/software/rocketmq/distribution/target/apache-rocketmq</span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line">ConsumeMessageThread_%d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 开放 9876 端口</span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ul><li><p>启动 Name Server 和 Broker 的时候 报内存不足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“VM warning: INFO: OS::commit_memory(0x00000006c0000000, 2147483648, 0) faild; error=’Cannot allocate memory’ (errno=12)”</span><br></pre></td></tr></table></figure></li><li><p>解决方案：修改/RocketMQ/devnev/bin/ 下的服务启动脚本 runserver.sh 、runbroker.sh 中对于内存的限制，​改成如下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx128m -Xmn128m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_NODE</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_NODE/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_NODE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载地址-https-nodejs-org-en-download"><a href="#1-下载地址-https-nodejs-org-en-download" class="headerlink" title="1 下载地址 https://nodejs.org/en/download/"></a>1 下载地址 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/packages/</span><br><span class="line">wget https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf /opt/software/packages/node-v8.10.0-linux-x64.tar.xz -C /opt/software/</span><br><span class="line">cd /opt/software/node-v8.10.0-linux-x64/bin/ &amp;&amp; ls</span><br><span class="line">./node -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8.10.0</span><br></pre></td></tr></table></figure><h1 id="3-增加软连接-使得-node-npm-可以全局使用"><a href="#3-增加软连接-使得-node-npm-可以全局使用" class="headerlink" title="3 增加软连接,使得 node/npm 可以全局使用"></a>3 增加软连接,使得 node/npm 可以全局使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/software/node-v8.10.0-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /opt/software/node-v8.10.0-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 测试</span><br><span class="line">cd /home &amp;&amp; node -v &amp;&amp; npm -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v8.10.0</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_JDK_1_8</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_JDK_1_8/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_JDK_1_8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载-JDK"><a href="#1-下载-JDK" class="headerlink" title="1 下载 JDK"></a>1 下载 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/packages/</span><br><span class="line">wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f5095bf8624735fa2f1/jdk-8u162-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 卸载 centos 默认安装的 open jdk</span><br><span class="line">[root@localhost jdk]# rpm -qa | grep java</span><br><span class="line">java-1.7.0-openjdk-1.7.0.171-2.6.13.0.el6_9.x86_64</span><br><span class="line">tzdata-java-2018c-1.el6.noarch</span><br><span class="line">java-1.6.0-openjdk-1.6.0.41-1.13.13.1.el6_8.x86_64</span><br><span class="line">[root@localhost jdk]#</span><br><span class="line">[root@localhost jdk]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.171-2.6.13.0.el6_9.x86_64</span><br><span class="line">[root@localhost jdk]# rpm -e --nodeps tzdata-java-2018c-1.el6.noarch</span><br><span class="line">[root@localhost jdk]# rpm -e --nodeps java-1.6.0-openjdk-1.6.0.41-1.13.13.1.el6_8.x86_64</span><br><span class="line">[root@localhost jdk]# rpm -qa | grep java</span><br><span class="line">[root@localhost jdk]#</span><br><span class="line"></span><br><span class="line"># 安装 JDK 1.8</span><br><span class="line">mv jdk-8u161-linux-x64.tar.gz\?AuthParam\=1521635451_ad06a59373f1aebdda5baa55350799bd jdk-8u161.tar.gz</span><br><span class="line">tar -zxvf /opt/software/packages/jdk-8u161.tar.gz -C /opt/software/sdks/jdk/</span><br></pre></td></tr></table></figure><h1 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3 配置环境变量"></a>3 配置环境变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># JAVA_HOME START</span><br><span class="line">JAVA_HOME=/opt/software/sdks/jdk/jdk1.8.0_161</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"># JAVA_HOME END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jdk1.8.0_161]# java -version</span><br><span class="line">java version &quot;1.8.0_161&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br><span class="line">[root@localhost jdk1.8.0_161]#</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装_CENTOS_ANDROID_SDK</title>
      <link href="/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_ANDROID_SDK/"/>
      <url>/2018/11/19/%E5%AE%89%E8%A3%85_CENTOS_ANDROID_SDK/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载地址-https-developer-android-com-studio-index-html-downloads"><a href="#1-下载地址-https-developer-android-com-studio-index-html-downloads" class="headerlink" title="1 下载地址 https://developer.android.com/studio/index.html#downloads"></a>1 下载地址 <a href="https://developer.android.com/studio/index.html#downloads" target="_blank" rel="noopener">https://developer.android.com/studio/index.html#downloads</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/packages/</span><br><span class="line">wget https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip</span><br></pre></td></tr></table></figure><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><ul><li><p>解压到指定目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip /opt/software/packages/sdk-tools-linux-3859397.zip -d /opt/software/sdks/android/sdk</span><br><span class="line">cd /opt/software/sdks/android/sdk/tools/bin</span><br></pre></td></tr></table></figure></li><li><p>检查需要安装的 sdk 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Sdk and tools</span><br><span class="line">minSdkVersion = 15</span><br><span class="line">targetSdkVersion = 25</span><br><span class="line">compileSdkVersion = 27</span><br><span class="line">buildToolsVersion = &quot;27.0.3&quot;</span><br><span class="line"></span><br><span class="line">// App dependencies</span><br><span class="line">supportLibraryVersion = &quot;27.0.2&quot;</span><br><span class="line">constraintLayoutVersion = &quot;1.0.2&quot;</span><br><span class="line">multidex = &quot;1.0.2&quot;</span><br></pre></td></tr></table></figure></li><li><p>执行安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./sdkmanager --help</span><br><span class="line"></span><br><span class="line"># echo y | 通过管道模式直接确认,不需要等会儿手动输入 y 确认</span><br><span class="line">echo y | ./sdkmanager &quot;build-tools;27.0.3&quot; &quot;platforms;android-27&quot; &quot;platform-tools&quot; &quot;ndk-bundle&quot; &quot;extras;android;m2repository&quot; &quot;extras;google;m2repository&quot; &quot;extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2&quot; &quot;tools&quot;</span><br></pre></td></tr></table></figure></li><li><p>默认安装的目录结构 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># /opt/software/sdks/android/sdk</span><br><span class="line">[root@localhost android]# tree -L 3</span><br><span class="line">.</span><br><span class="line">└── sdk</span><br><span class="line">    ├── build-tools</span><br><span class="line">    │   └── 27.0.3</span><br><span class="line">    ├── emulator</span><br><span class="line">    │   ├── bin64</span><br><span class="line">    │   ├── emulator</span><br><span class="line">    │   ├── emulator64-arm</span><br><span class="line">    │   ├── emulator64-crash-service</span><br><span class="line">    │   ├── emulator64-mips</span><br><span class="line">    │   ├── emulator64-x86</span><br><span class="line">    │   ├── emulator-check</span><br><span class="line">    │   ├── lib</span><br><span class="line">    │   ├── lib64</span><br><span class="line">    │   ├── mksdcard</span><br><span class="line">    │   ├── NOTICE.txt</span><br><span class="line">    │   ├── package.xml</span><br><span class="line">    │   ├── qemu</span><br><span class="line">    │   ├── resources</span><br><span class="line">    │   └── source.properties</span><br><span class="line">    ├── extras</span><br><span class="line">    │   ├── android</span><br><span class="line">    │   ├── google</span><br><span class="line">    │   └── m2repository</span><br><span class="line">    ├── licenses</span><br><span class="line">    │   └── android-sdk-license</span><br><span class="line">    ├── ndk-bundle</span><br><span class="line">    │   ├── build</span><br><span class="line">    │   ├── CHANGELOG.md</span><br><span class="line">    │   ├── meta</span><br><span class="line">    │   ├── ndk-build</span><br><span class="line">    │   ├── ndk-depends</span><br><span class="line">    │   ├── ndk-gdb</span><br><span class="line">    │   ├── ndk-stack</span><br><span class="line">    │   ├── ndk-which</span><br><span class="line">    │   ├── package.xml</span><br><span class="line">    │   ├── platforms</span><br><span class="line">    │   ├── prebuilt</span><br><span class="line">    │   ├── python-packages</span><br><span class="line">    │   ├── README.md</span><br><span class="line">    │   ├── shader-tools</span><br><span class="line">    │   ├── simpleperf</span><br><span class="line">    │   ├── source.properties</span><br><span class="line">    │   ├── sources</span><br><span class="line">    │   ├── sysroot</span><br><span class="line">    │   └── toolchains</span><br><span class="line">    ├── patcher</span><br><span class="line">    │   └── v4</span><br><span class="line">    ├── platforms</span><br><span class="line">    │   └── android-27</span><br><span class="line">    ├── platform-tools</span><br><span class="line">    │   ├── adb</span><br><span class="line">    │   ├── api</span><br><span class="line">    │   ├── dmtracedump</span><br><span class="line">    │   ├── e2fsdroid</span><br><span class="line">    │   ├── etc1tool</span><br><span class="line">    │   ├── fastboot</span><br><span class="line">    │   ├── hprof-conv</span><br><span class="line">    │   ├── lib64</span><br><span class="line">    │   ├── make_f2fs</span><br><span class="line">    │   ├── mke2fs</span><br><span class="line">    │   ├── mke2fs.conf</span><br><span class="line">    │   ├── NOTICE.txt</span><br><span class="line">    │   ├── package.xml</span><br><span class="line">    │   ├── sload_f2fs</span><br><span class="line">    │   ├── source.properties</span><br><span class="line">    │   ├── sqlite3</span><br><span class="line">    │   └── systrace</span><br><span class="line">    └── tools</span><br><span class="line">        ├── android</span><br><span class="line">        ├── bin</span><br><span class="line">        ├── emulator</span><br><span class="line">        ├── emulator-check</span><br><span class="line">        ├── lib</span><br><span class="line">        ├── mksdcard</span><br><span class="line">        ├── monitor</span><br><span class="line">        ├── NOTICE.txt</span><br><span class="line">        ├── package.xml</span><br><span class="line">        ├── proguard</span><br><span class="line">        ├── source.properties</span><br><span class="line">        └── support</span><br><span class="line"></span><br><span class="line">38 directories, 42 files</span><br><span class="line">[root@localhost android]#</span><br></pre></td></tr></table></figure></li></ul><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"># ANDROID_HOME START</span><br><span class="line">ANDROID_HOME=/opt/software/sdks/android/sdk</span><br><span class="line">PATH=$PATH:$ANDROID_HOME:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:ANDROID_HOME/emulator</span><br><span class="line">export ANDROID_HOME PATH</span><br><span class="line"># ANDROID_HOME END</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ul><li><p>Unsupported major.minor version 52.0 <a href="https://www.jianshu.com/p/9cde35b7faba" target="_blank" rel="noopener">点击查看如何安装 JDK1.8</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 需要安装 jdk 1.8 版本</span><br><span class="line">JDK 1.8 = 52</span><br><span class="line">JDK 1.7 = 51</span><br><span class="line">JDK 1.6 = 50</span><br><span class="line">JDK 1.5 = 49</span><br><span class="line">JDK 1.4 = 48</span><br><span class="line">JDK 1.3 = 47</span><br><span class="line">JDK 1.2 = 46</span><br><span class="line">JDK 1.1 = 45</span><br></pre></td></tr></table></figure></li><li><p>编译 android 项目 报错 <strong>‘java.lang.RuntimeException: No server to serve request. Check logs for details.’</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 仔细查看编译日志</span><br><span class="line">AAPT err(Facade for 232115523): /opt/software/sdks/android/sdk/build-tools/27.0.3/aapt: /lib64/libc.so.6: version `GLIBC_2.14&apos; not found (required by /opt/software/sdks/android/sdk/build-tools/27.0.3/aapt)</span><br><span class="line">AAPT err(Facade for 232115523): /opt/software/sdks/android/sdk/build-tools/27.0.3/aapt: /lib64/libc.so.6: version `GLIBC_2.14&apos; not found (required by /opt/software/sdks/android/sdk/build-tools/27.0.3/lib64/libc++.so)</span><br><span class="line"></span><br><span class="line"># 查看系统是否已经安装 glibc 2.14</span><br><span class="line">strings /lib64/libc.so.6 |grep GLIBC</span><br><span class="line"></span><br><span class="line"># 发现不包含 2.14, 安装 glibc 2.14 版本应该可以解决问题</span><br><span class="line">yum install gcc g++</span><br><span class="line"></span><br><span class="line">cd /opt/software/packages/ &amp;&amp; wget wget http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.gz</span><br><span class="line">tar zxvf glibc-2.14.tar.gz</span><br><span class="line">cd glibc-2.14</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">../configure –prefix=/opt/glibc-2.14</span><br><span class="line">make -j4</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># /opt/software/packages/glibc-2.14/build/elf/ldconfig: Can&apos;t open configuration file /opt/software/glibc-2.14/etc/ld.so.conf: No such file or directory</span><br><span class="line">cp /etc/ld.so.conf /opt/software/glibc-2.14/etc/</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># make install 最后报 ld.so.conf: No such file or directory</span><br><span class="line">mkdir -p $prefix/etc</span><br><span class="line">touch $prefix/etc/ld.so.conf</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># 重新查看系统是否已经安装 glibc 2.14</span><br><span class="line">strings /lib64/libc.so.6 |grep GLIBC</span><br><span class="line"># 我这里是仍然没有看到 2.14 :) 哈哈</span><br><span class="line"></span><br><span class="line"># 修改 aapt</span><br><span class="line">cd /opt/software/sdks/android/sdk/build-tools/27.0.3</span><br><span class="line">mv ./aapt ./aapt_</span><br><span class="line">vi ./aapt</span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line">export LD_LIBRARY_PATH=/opt/software/glibc_2_14/lib &amp;&amp; &quot;$0&quot;_ $@</span><br><span class="line"></span><br><span class="line">chmod +x ./aapt</span><br><span class="line"></span><br><span class="line"># 对 ./aapt2 也做相同的处理,因为发现有的时候编译使用的是 aapt, 有的时候使用的是 aapt2</span><br><span class="line"></span><br><span class="line"># 重新build android 项目</span><br><span class="line">./gradlew clean assembleDebug --stacktrace</span><br><span class="line"></span><br><span class="line"># 编译成功 !!!</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> CENTOS </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>一些产品</title>
      <link href="/products/index.html"/>
      <url>/products/index.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">安卓</th><th style="text-align:center">苹果</th><th style="text-align:center">网页</th><th style="text-align:center">后台</th><th style="text-align:center">管理系统</th><th style="text-align:center">公众号</th><th style="text-align:center">小程序</th></tr></thead><tbody><tr><td style="text-align:center">吉多家园</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">菜仓生鲜</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">易马股权</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">北京地铁巡检</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">北京自然博物馆</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td></tr></tbody></table><h2 id="1-吉多家园-下载链接"><a href="#1-吉多家园-下载链接" class="headerlink" title="1 吉多家园 下载链接"></a>1 吉多家园 <a href="http://www.jiduojia.com/" target="_blank" rel="noopener">下载链接</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">吉多家园app是一款集合了邻里社交、商超购物、二手市场、房产买卖和社区物业服务，并且还有</span><br><span class="line">方便的记事和提醒等功能的移动应用。未来我们会为建设智慧社区添加更多功能，大家快来加入我们，</span><br><span class="line">让我们为社区和生活创造更多价值!</span><br></pre></td></tr></table></figure><div style="overflow-x:scroll;width:100%;"><br>    <div style="width:1000px;"><br>        <div style="float:left;border:solid 2px #333;"><img src="http://image1.mdpda.com/picture.php?picurl=aHR0cDovL2YuaGlwaG90b3MuYmRpbWcuY29tL3dpc2VnYW1lL3BpYy9pdGVtL2MyOGI4N2Q2Mjc3ZjllMmZhMjNkMmZkODE2MzBlOTI0Yjk5OWYzZDIuanBn&" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://image1.mdpda.com/picture.php?picurl=aHR0cDovL2EuaGlwaG90b3MuYmRpbWcuY29tL3dpc2VnYW1lL3BpYy9pdGVtL2ZkMmYwNzA4MjgzODFmMzA0MTExYmY3OWEwMDE0YzA4NmYwNmYwZDIuanBn&" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://image1.mdpda.com/picture.php?picurl=aHR0cDovL2guaGlwaG90b3MuYmRpbWcuY29tL3dpc2VnYW1lL3BpYy9pdGVtLzJmMDg2ZTA2MWQ5NTBhN2JhZDU4N2MxNDAzZDE2MmQ5ZjNkM2M5ZjUuanBn&" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://image1.mdpda.com/picture.php?picurl=aHR0cDovL2cuaGlwaG90b3MuYmRpbWcuY29tL3dpc2VnYW1lL3BpYy9pdGVtLzVlNmQ1NWZiYjJmYjQzMTZhYmQ4NDlhYTI5YTQ0NjIzMDhmN2QzMWYuanBn&" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://image1.mdpda.com/picture.php?picurl=aHR0cDovL2IuaGlwaG90b3MuYmRpbWcuY29tL3dpc2VnYW1lL3BpYy9pdGVtLzIwMTY2ZDIyNGY0YTIwYTQ4ZmQ5MGYxNzk5NTI5ODIyNzMwZWQwMWYuanBn&" width="196px"></div><br>    </div><br></div><h2 id="2-菜仓生鲜-下载链接"><a href="#2-菜仓生鲜-下载链接" class="headerlink" title="2 菜仓生鲜 下载链接"></a>2 菜仓生鲜 <a href="http://www.onlinedown.net/soft/1211129.htm" target="_blank" rel="noopener">下载链接</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在居住社区范围内每周进行一次集中采购，包括水果、生鲜蔬菜等，在社区范围内每周收集订单后在</span><br><span class="line">固定的一天进行送货，由于集中采购并集中送货可以节约很多成本，客户也将以更优惠的价格购买到</span><br><span class="line">我们的商品。</span><br></pre></td></tr></table></figure><div style="overflow-x:scroll;width:100%;"><br>    <div style="width:1000px;"><br>        <div style="float:left;border:solid 2px #333;"><img src="http://src.onlinedown.net/images/h_iphone_imges/replace/180228_2019136.jpg" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://src.onlinedown.net/images/h_iphone_imges/replace/180228_1819135.jpg" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://src.onlinedown.net/images/h_iphone_imges/replace/180228_2119137.jpg" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://src.onlinedown.net/images/h_iphone_imges/replace/180228_2219139.jpg" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="http://src.onlinedown.net/images/h_iphone_imges/replace/180228_2119138.jpg" width="196px"></div><br>    </div><br></div><h2 id="3-易马股权-下载链接"><a href="#3-易马股权-下载链接" class="headerlink" title="3 易马股权 下载链接"></a>3 易马股权 <a href="https://www.pgyer.com/mV9i" target="_blank" rel="noopener">下载链接</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">展示一些资讯</span><br></pre></td></tr></table></figure><h2 id="4-北京地铁巡检"><a href="#4-北京地铁巡检" class="headerlink" title="4 北京地铁巡检"></a>4 北京地铁巡检</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮助地铁巡检员离线同步通过二维码检查记录地铁设备故障问题</span><br></pre></td></tr></table></figure><h2 id="5-北京自然博物馆-下载链接"><a href="#5-北京自然博物馆-下载链接" class="headerlink" title="5 北京自然博物馆 下载链接"></a>5 北京自然博物馆 <a href="https://m.paopaoche.net/xia/360191" target="_blank" rel="noopener">下载链接</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">北京自然博物馆app基于用户自带设备（智能手机、平板电脑）采用移动互联网、wifi定位等技术，</span><br><span class="line">融合线上和现场服务，实现导览、导航、签到、交流等多样的功能，利用新兴数字手段把自然博物馆</span><br><span class="line">参观提升到新的高度，有助于提高北京自然博物馆服务水平、管理水准和教育功能，加深对观众的深</span><br><span class="line">度体验服务，扩大博物馆宣传力度，提升北京自然博物馆品牌形象。</span><br></pre></td></tr></table></figure><div style="overflow-x:scroll;width:100%;"><br>    <div style="width:600px;"><br>        <div style="float:left;border:solid 2px #333;"><img src="https://thumb31.jfcdns.com/up/2017-12/20171212165723108100.jpg" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="https://thumb31.jfcdns.com/up/2017-12/20171212165723320420.jpg" width="196px"></div><div style="float:left;border:solid 2px #333;"><img src="https://thumb31.jfcdns.com/up/2017-12/20171212165724108200.jpg" width="196px"></div><br>    </div><br></div>]]></content>
      
    </entry>
    
  
</search>
